'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Panel = require('react-bootstrap/lib/Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _ValidationIcon = require('../ValidationIcon');

var _ValidationIcon2 = _interopRequireDefault(_ValidationIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var SidebarHeader = function (_React$Component) {
  (0, _inherits3['default'])(SidebarHeader, _React$Component);

  function SidebarHeader(props) {
    (0, _classCallCheck3['default'])(this, SidebarHeader);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.renderValidation = _this.renderValidation.bind(_this);
    return _this;
  }

  SidebarHeader.prototype.renderValidation = function renderValidation() {
    var validationState = this.props.validationState;


    return _react2['default'].createElement(_ValidationIcon2['default'], { validationState: validationState });
  };

  SidebarHeader.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        collapsible = _props.collapsible,
        validationState = _props.validationState,
        title = _props.title,
        open = _props.open;

    var iconName = open ? 'chevron-up' : 'chevron-down';

    return _react2['default'].createElement(
      _Panel2['default'].Heading,
      null,
      _react2['default'].createElement(
        _Panel2['default'].Title,
        { toggle: collapsible },
        validationState && this.renderValidation(),
        title,
        collapsible && _react2['default'].createElement(
          'span',
          { className: 'arrow' },
          _react2['default'].createElement(_Icon2['default'], { icon: iconName })
        )
      ),
      children
    );
  };

  return SidebarHeader;
}(_react2['default'].Component);

SidebarHeader.propTypes = {
  /**
   * Whether the SidebarHeader is part of a collapsible SidebarPanel.
   */
  collapsible: _propTypes2['default'].bool,
  /**
   * Whether the SidebarPanel connected to the SidebarHeader is open, or not.
   */
  open: _propTypes2['default'].bool,
  /**
   * The label to be displayed in the header.
   * @required
   */
  title: _propTypes2['default'].string.isRequired,
  /**
   * If the SidebarPanel connected to this SidebarHeader has validation, display an icon summarizing the validation state. Adds a span and Icon before the title.
   */
  validationState: _propTypes2['default'].oneOf(['success', 'error', 'incomplete', 'warning']),
  /**
   * Additional components to be added to the SidebarHeader.  Actions and Dropdowns are common items.
   */
  children: _propTypes2['default'].node
};

SidebarHeader.defaultProps = {
  collapsible: false,
  open: true,
  validationState: null,
  children: null
};

exports['default'] = SidebarHeader;
module.exports = exports['default'];