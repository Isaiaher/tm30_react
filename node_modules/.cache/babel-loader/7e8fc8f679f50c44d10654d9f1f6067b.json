{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Grid = require('react-bootstrap/lib/Grid');\n\nvar _Grid2 = _interopRequireDefault(_Grid);\n\nvar _Row = require('react-bootstrap/lib/Row');\n\nvar _Row2 = _interopRequireDefault(_Row);\n\nvar _Collapse = require('react-bootstrap/lib/Collapse');\n\nvar _Collapse2 = _interopRequireDefault(_Collapse);\n\nvar _Link = require('react-router-dom/Link');\n\nvar _Link2 = _interopRequireDefault(_Link);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _Link3 = require('../Link');\n\nvar _Link4 = _interopRequireDefault(_Link3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar Header = function (_React$Component) {\n  (0, _inherits3['default'])(Header, _React$Component);\n\n  function Header(props) {\n    (0, _classCallCheck3['default'])(this, Header);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));\n\n    _this.state = {\n      isMobile: function isMobile() {\n        return document.body.clientWidth < 768;\n      },\n      // Width in pixels below which the navigation will be accessible as a menu\n      navbarCollapse: true,\n      navbarTransitioning: false\n    };\n    _this.onToggle = _this.onToggle.bind(_this);\n    _this.onAppTitleClick = _this.onAppTitleClick.bind(_this);\n    _this.onNavActionsClick = _this.onNavActionsClick.bind(_this);\n    _this.onTransitionEnd = _this.onTransitionEnd.bind(_this);\n    _this.getParentSiteElement = _this.getParentSiteElement.bind(_this);\n    return _this;\n  }\n\n  Header.prototype.onAppTitleClick = function onAppTitleClick(event) {\n    // Only do this if we're in a mobile context\n    if (this.state.isMobile()) {\n      event.preventDefault();\n      this.onToggle();\n    } // Otherwise go ahead and let the title navigate to the app root\n\n  };\n\n  Header.prototype.onNavActionsClick = function onNavActionsClick(event) {\n    // Only do this if we're in a mobile context\n    if (this.state.isMobile()) {\n      var node = event.target;\n\n      do {\n        // check to see if we are within a non-open dropdown menu\n        if (node.classList.contains('dropdown') && !node.classList.contains('open')) {\n          return;\n        } else if (node.id === 'nav-actions') {\n          // get to this by bubbling all the way up the parent stack until you get to the nav container\n          this.onToggle();\n          return;\n        }\n\n        node = node.parentNode;\n      } while (node);\n    }\n  };\n\n  Header.prototype.onToggle = function onToggle() {\n    this.setState(function (state) {\n      // Writing this way to avoid arrow-body-style lint rule\n      var newState = {\n        navbarCollapse: !state.navbarCollapse,\n        navbarTransitioning: true\n      };\n      return newState;\n    });\n  };\n\n  Header.prototype.onTransitionEnd = function onTransitionEnd(event) {\n    if (event.srcElement === this.primaryNav) {\n      this.setState({\n        navbarTransitioning: false\n      });\n    }\n  };\n\n  Header.prototype.getNavigation = function getNavigation() {\n    var _props = this.props,\n        primaryNav = _props.primaryNav,\n        fluid = _props.fluid;\n\n    if (!primaryNav) {\n      return '';\n    }\n\n    var _state = this.state,\n        navbarCollapse = _state.navbarCollapse,\n        navbarTransitioning = _state.navbarTransitioning;\n    var navClasses = (0, _classnames2['default'])('PnnlNavBar', {\n      'open-nav': !navbarCollapse,\n      transitioning: navbarTransitioning\n    });\n    return _react2['default'].createElement('nav', {\n      className: navClasses,\n      onTransitionEnd: this.onTransitionEnd\n    }, _react2['default'].createElement(_Collapse2['default'], {\n      'in': !navbarCollapse,\n      role: 'navigation'\n    }, _react2['default'].createElement(_Grid2['default'], {\n      onClick: this.onNavActionsClick,\n      id: 'nav-actions',\n      fluid: fluid\n    }, primaryNav)));\n  };\n\n  Header.prototype.getParentSiteElement = function getParentSiteElement() {\n    var parentSite = this.props.parentSiteProps;\n\n    if (parentSite && parentSite.label) {\n      var labelContent = parentSite.imageHref ? _react2['default'].createElement('img', {\n        src: parentSite.imageHref,\n        alt: parentSite.label\n      }) : _react2['default'].createElement('span', null, parentSite.label);\n\n      if (parentSite.linkHref) {\n        return _react2['default'].createElement(_Link4['default'], {\n          to: parentSite.linkHref\n        }, labelContent);\n      }\n\n      return labelContent;\n    }\n\n    return null;\n  };\n\n  Header.prototype.render = function render() {\n    var _props2 = this.props,\n        appLogo = _props2.appLogo,\n        _props2$appTitle = _props2.appTitle,\n        appTitle = _props2$appTitle === undefined ? '' : _props2$appTitle,\n        fluid = _props2.fluid,\n        children = _props2.children,\n        className = _props2.className;\n    var navigation = this.getNavigation();\n    var headerClasses = (0, _classnames2['default'])({\n      'no-nav': !this.props.primaryNav,\n      'long-title': appTitle.length > 20\n    }, 'PnnlAppHeader', className);\n    var parentSiteElement = this.getParentSiteElement();\n\n    if (parentSiteElement) {\n      parentSiteElement = _react2['default'].cloneElement(parentSiteElement, {\n        className: 'parentSite'\n      });\n    }\n\n    var icon = '';\n\n    if (appLogo) {\n      icon = _react2['default'].createElement('img', {\n        src: appLogo,\n        alt: appTitle,\n        className: 'img-responsive'\n      });\n    }\n\n    var title = appTitle ? _react2['default'].createElement('span', null, appTitle) : null;\n\n    if (children) {\n      title = _react2['default'].createElement('span', null, children);\n    }\n\n    return _react2['default'].createElement('header', {\n      className: headerClasses\n    }, _react2['default'].createElement(_Grid2['default'], {\n      fluid: fluid\n    }, _react2['default'].createElement(_Row2['default'], null, parentSiteElement, _react2['default'].createElement(_Link2['default'], {\n      onClick: this.onAppTitleClick,\n      to: '/',\n      className: 'PnnlAppTitle'\n    }, _react2['default'].createElement('h1', null, icon, title, _react2['default'].createElement('span', {\n      className: 'caret'\n    }))))), navigation);\n  };\n\n  return Header;\n}(_react2['default'].Component);\n\nHeader.propTypes = {\n  /**\n   * The navigation bar.  Should be a NavBar component.\n   */\n  primaryNav: _propTypes2['default'].node,\n\n  /**\n   * If this is an application, this is the icon for it. Guidance on creating app icons is included in the Common Design Standards (forge.pnl.gov/standards)\n   */\n  appLogo: _propTypes2['default'].string,\n\n  /**\n   * The title of the site/applcation. If the title is longer than 20 characters, it will be displayed in a smaller type size.\n   */\n  appTitle: _propTypes2['default'].string,\n\n  /**\n   * Whether the container is fluid or using fixed breakpoints.\n   */\n  fluid: _propTypes2['default'].bool,\n\n  /**\n   * A classname used to target styles.  Usually used to adjust the background color of the title area.\n   */\n  className: _propTypes2['default'].string,\n\n  /**\n   * An object with values used to build a label/link for the parent website, e.g. myPNNL. If an image path is provided the label will be used as alt-text. If a linkHref is provided then the text/image will be wrapped in a link.\n   */\n  parentSiteProps: _propTypes2['default'].shape({\n    label: _propTypes2['default'].string.isRequired,\n    imageHref: _propTypes2['default'].string,\n    linkHref: _propTypes2['default'].string\n  })\n};\nHeader.defaultProps = {\n  primaryNav: null,\n  appLogo: null,\n  appTitle: null,\n  fluid: false,\n  className: null,\n  parentSiteProps: null\n};\nexports['default'] = Header;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}