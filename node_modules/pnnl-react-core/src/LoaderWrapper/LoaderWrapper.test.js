import React from 'react';
import { shallow } from 'enzyme';

import LoaderWrapper from './LoaderWrapper';

/*
* During test writing you can selectively run just these tests or skip individual ones while you
* work on others https://facebook.github.io/jest/docs/en/api.html#testskipname-fn
*/
describe('<LoaderWrapper />', () => {
  const child = <p>Hello World</p>;
  const Loader = () => <div>Custom Loader Here</div>;

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('../index.js');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.LoaderWrapper).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(LoaderWrapper).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    it('should not render when no children props are supplied', () => {
      expect(() => shallow(<LoaderWrapper />)).toMatchSnapshot();
    });

    it('should render when children props are supplied and no other props', () => {
      expect(() => shallow(<LoaderWrapper>{child}</LoaderWrapper>)).toMatchSnapshot();
    });

    it('should render when children props are supplied as a prop on the tag', () => {
      expect(() => shallow(<LoaderWrapper>{child}</LoaderWrapper>)).toMatchSnapshot();
    });
  });

  describe('rendering output', () => {
    it('should render the default children when SHOW prop is false', () => {
      const wrapper = shallow(<LoaderWrapper show={false}>{child}</LoaderWrapper>);
      expect(wrapper).toMatchSnapshot();
    });

    it('should not render the default children when SHOW prop is true', () => {
      const wrapper = shallow(<LoaderWrapper show>{child}</LoaderWrapper>);
      expect(wrapper).toMatchSnapshot();
    });

    it('should render the default loader style when SHOW prop is true', () => {
      const wrapper = shallow(<LoaderWrapper show>{child}</LoaderWrapper>);

      expect(wrapper.type()).toEqual('div');
      expect(wrapper.hasClass('pnnl-loader-wrapper')).toBeTruthy();

      const childWrapper = wrapper.children();
      expect(childWrapper.type()).toEqual('h2');
      expect(childWrapper.children()).toHaveLength(3);
      expect(childWrapper.childAt(0).find('Loader')).toHaveLength(1);
      expect(childWrapper.childAt(2).text()).toEqual('Loading...');
      expect(childWrapper.childAt(0).props().color).toEqual('silver');
    });

    it('should render className prop if provided', () => {
      const wrapper1 = shallow(<LoaderWrapper show className="testing">{child}</LoaderWrapper>);
      expect(wrapper1.hasClass('pnnl-loader-wrapper testing')).toBeTruthy();
      const wrapper2 = shallow(<LoaderWrapper show className="testing another">{child}</LoaderWrapper>);
      expect(wrapper2.hasClass('pnnl-loader-wrapper testing another')).toBeTruthy();
    });

    it('should render a custom loading component if provided', () => {
      const wrapper = shallow(<LoaderWrapper show loadingComponent={Loader}>{child}</LoaderWrapper>);

      expect(wrapper.text()).toEqual('<Loader />');
      expect(wrapper.render()[0].name).toEqual('div');
      expect(wrapper.render().text()).toEqual('Custom Loader Here');
    });

    it('should render a custom message if provided', () => {
      const wrapper = shallow(<LoaderWrapper show message="Testing...">{child}</LoaderWrapper>);
      expect(wrapper.children().childAt(2).text()).toEqual('Testing...');
    });
  });
});
