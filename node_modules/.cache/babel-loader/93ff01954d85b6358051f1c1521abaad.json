{"ast":null,"code":"import _defineProperty from \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\"; //import Button from \"@material-ui/core/Button\";\n\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    boxShadow: theme.shadows[10],\n    fontSize: 14\n  }\n}))(Tooltip);\n/**\n * Paste Class\n */\n\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.populateSPDcells = () => {\n      this.setState({\n        grid: [[{\n          readOnly: true,\n          value: \"Wavelength\"\n        }, {\n          readOnly: true,\n          className: \"cell\",\n          value: \"SPD\"\n        }]]\n      }, function () {\n        var i;\n        var spd_length = this.state.wavelength_end - this.state.wavelength_start + 1;\n\n        for (i = 0; i < spd_length; i += parseInt(this.state.step)) {\n          this.state.grid.push([{\n            readOnly: true,\n            value: i + parseInt(this.state.wavelength_start),\n            className: \"cell\"\n          }, {\n            value: \"\"\n          }]);\n        }\n      });\n    };\n\n    this.handleLeave = event => {\n      console.log(this.state);\n      this.populateSPDcells();\n    };\n\n    this.handleCreateTable = event => {\n      this.setState({\n        displayTable: true\n      });\n      this.populateSPDcells();\n    };\n\n    this.handleSPDChange = event => {\n      this.setState({\n        spd_paste: event.target.value\n      }, function () {\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStartChange = event => {\n      this.setState({\n        wavelength_start: event.target.value\n      }, function () {\n        //console.log(\"setState completed\", this.state);\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleEndChange = event => {\n      this.setState({\n        wavelength_end: event.target.value\n      }, function () {\n        //console.log(\"setState completed\", this.state);\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStepChange = event => {\n      this.setState({\n        step: parseInt(event.target.value)\n      }, function () {\n        //console.log(\"setState completed\", this.state);\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.state = {\n      spd_paste: \"\",\n      //the SPD string inputed to the text area\n      spd_array: [],\n      //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false,\n      //Boolean to control the loader\n      data: [],\n      //Data that is returned from the C code\n      wavelength_start: 380,\n      //The starting wavelength with default value of 380\n      wavelength_end: 780,\n      //The ending wavelength with default value of 780\n      step: 1,\n      //The step size with default value of 1\n      disabled: true,\n      //Boolean to control if the button is disabled or not. Default is that it is.\n      displayTable: false,\n      grid: [[{\n        readOnly: true,\n        value: \"Wavelength\"\n      }, {\n        readOnly: true,\n        className: \"cell\",\n        value: \"SPD\"\n      }]]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n    /*\n    var i;\n    for (i = 0; i < 401; i++) {\n      this.state.grid.push([\n        {\n          readOnly: true,\n          value: i + parseInt(this.state.wavelength_start),\n          className: \"cell\"\n        },\n        { value: \"\" }\n      ]);\n    }\n    */\n  }\n\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (false //this.state.wavelength_start !== 380 ||\n    //this.state.wavelength_end !== 780 ||\n    //this.state.step !== 1\n    ) {\n        alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n      } else {\n      this.setState({\n        wavelength_array: []\n      }, function () {\n        var i;\n        var array_i = 0;\n\n        for (i = this.state.wavelength_start; i <= this.state.wavelength_end; i += this.state.step) {\n          console.log(\"i = \".concat(i, \" array_i = \").concat(array_i, \" start = \").concat(this.state.wavelength_start, \" end = \").concat(this.state.wavelength_end));\n          this.state.wavelength_array[array_i] = i;\n          array_i++;\n        } //console.log(this.state.wavelength_array);\n\n      });\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n\n      this.setState({\n        spd_array: this.state.spd_paste.split(\"\\n\")\n      }, function () {\n        console.log(this.state.spd_array);\n\n        if (this.state.spd_array.length === this.state.wavelength_array.length) {\n          this.setState({\n            loading: true\n          }, () => {\n            axios.defaults.headers.common = {};\n            axios.defaults.headers.common.accept = \"application/json\";\n            axios.post(\"/tm30Paste\", {\n              spd: this.state.spd_array,\n              wavelength: this.state.wavelength_array\n            }).then(res => {\n              return res.data;\n            }).then(data => {\n              /**\n               * Set the state that loading is false,\n               * data is the json from the C code\n               * and tableReady is true\n               *\n               * TODO: TableReady is no longer used. Could take out.\n               */\n              this.setState({\n                loading: false,\n                data: data.data,\n                tableReady: true\n              });\n              /**\n               * Used later to store the data in cache\n               * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n               */\n\n              /**\n               * Pushes the data to the Reports page and redirects to that page\n               */\n\n              this.props.history.push({\n                pathname: \"/Report\",\n                state: {\n                  data: this.state.data\n                }\n              });\n            });\n          });\n        } else {\n          alert(\"Error: Length of SPD array does not match length of wavelength array.\");\n        }\n      });\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n\n\n  render() {\n    var loading = this.state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Paste SPD Data\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Start Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 380 nm. Value may not be greater than 400 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleStartChange //onBlur={this.handleLeave}\n      ,\n      defaultValue: 380,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"End Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 780 nm. Value may not be less than 700 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleEndChange,\n      defaultValue: 780,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Interval (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 1 nm. Value may not be greater than 5 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleStepChange //onBlur={this.handleLeave}\n      ,\n      defaultValue: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \" \", \"Calculating Results \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), \" \", React.createElement(LoadingSpinner, {\n      color: \"copper\",\n      size: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }), \" \")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(LightTooltip, {\n      title: \"Runs the calculation when enough data is entered\",\n      placement: \"right-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsSize: \"sm\",\n      onClick: this.handleSubmit,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Calculate\"))), React.createElement(\"div\", {\n      style: {\n        width: \"5%\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Create Table for Wavelengths\",\n      placement: \"right-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsSize: \"sm\",\n      onClick: this.handleCreateTable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Create Table\")))), React.createElement(\"div\", {\n      style: {\n        position: \"inherit\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"SPD Data\"), this.state.displayTable ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(ReactDataSheet, {\n      data: this.state.grid,\n      valueRenderer: cell => cell.value,\n      onCellsChanged: changes => {\n        const grid = this.state.grid.map(row => [...row]);\n        changes.forEach(({\n          cell,\n          row,\n          col,\n          value\n        }) => {\n          grid[row][col] = _objectSpread({}, grid[row][col], {\n            value\n          });\n        });\n        this.setState({\n          grid\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    })));\n  }\n\n}\n/**\n * Export withRouter so we can jump to the Reports page\n */\n\nexport default withRouter(Paste);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx"],"names":["React","Component","Button","withRouter","LoadingSpinner","axios","Tooltip","withStyles","makeStyles","ReactDataSheet","LightTooltip","theme","tooltip","boxShadow","shadows","fontSize","Paste","constructor","props","populateSPDcells","setState","grid","readOnly","value","className","i","spd_length","state","wavelength_end","wavelength_start","parseInt","step","push","handleLeave","event","console","log","handleCreateTable","displayTable","handleSPDChange","spd_paste","target","disabled","handleStartChange","handleEndChange","handleStepChange","spd_array","wavelength_array","loading","data","handleSubmit","bind","alert","array_i","split","length","defaults","headers","common","accept","post","spd","wavelength","then","res","tableReady","history","pathname","render","position","display","width","cell","changes","map","row","forEach","col"],"mappings":"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","sourcesContent":["/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\n//import Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    boxShadow: theme.shadows[10],\n    fontSize: 14\n  }\n}))(Tooltip);\n\n/**\n * Paste Class\n */\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      spd_paste: \"\", //the SPD string inputed to the text area\n      spd_array: [], //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false, //Boolean to control the loader\n      data: [], //Data that is returned from the C code\n      wavelength_start: 380, //The starting wavelength with default value of 380\n      wavelength_end: 780, //The ending wavelength with default value of 780\n      step: 1, //The step size with default value of 1\n      disabled: true, //Boolean to control if the button is disabled or not. Default is that it is.\n      displayTable: false,\n      grid: [\n        [\n          { readOnly: true, value: \"Wavelength\" },\n          { readOnly: true, className: \"cell\", value: \"SPD\" }\n        ]\n      ]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n\n    /*\n    var i;\n    for (i = 0; i < 401; i++) {\n      this.state.grid.push([\n        {\n          readOnly: true,\n          value: i + parseInt(this.state.wavelength_start),\n          className: \"cell\"\n        },\n        { value: \"\" }\n      ]);\n    }\n    */\n  }\n\n  populateSPDcells = () => {\n    this.setState(\n      {\n        grid: [\n          [\n            { readOnly: true, value: \"Wavelength\" },\n            { readOnly: true, className: \"cell\", value: \"SPD\" }\n          ]\n        ]\n      },\n      function() {\n        var i;\n        var spd_length =\n          this.state.wavelength_end - this.state.wavelength_start + 1;\n        for (i = 0; i < spd_length; i += parseInt(this.state.step)) {\n          this.state.grid.push([\n            {\n              readOnly: true,\n              value: i + parseInt(this.state.wavelength_start),\n              className: \"cell\"\n            },\n            { value: \"\" }\n          ]);\n        }\n      }\n    );\n  };\n\n  /**\n   * Start of Handler functions-----------------------------------\n   */\n\n  handleLeave = event => {\n    console.log(this.state);\n    this.populateSPDcells();\n  };\n\n  handleCreateTable = event => {\n    this.setState({\n      displayTable: true\n    });\n    this.populateSPDcells();\n  };\n\n  /**\n   * Function that handles when the SPD paste text area is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleSPDChange = event => {\n    this.setState({ spd_paste: event.target.value }, function() {\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the Start Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStartChange = event => {\n    this.setState({ wavelength_start: event.target.value }, function() {\n      //console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleEndChange = event => {\n    this.setState({ wavelength_end: event.target.value }, function() {\n      //console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStepChange = event => {\n    this.setState({ step: parseInt(event.target.value) }, function() {\n      //console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (\n      false\n      //this.state.wavelength_start !== 380 ||\n      //this.state.wavelength_end !== 780 ||\n      //this.state.step !== 1\n    ) {\n      alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n    } else {\n      this.setState(\n        {\n          wavelength_array: []\n        },\n        function() {\n          var i;\n          var array_i = 0;\n          for (\n            i = this.state.wavelength_start;\n            i <= this.state.wavelength_end;\n            i += this.state.step\n          ) {\n            console.log(\n              `i = ${i} array_i = ${array_i} start = ${this.state.wavelength_start} end = ${this.state.wavelength_end}`\n            );\n            this.state.wavelength_array[array_i] = i;\n            array_i++;\n          }\n          //console.log(this.state.wavelength_array);\n        }\n      );\n\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n      this.setState(\n        { spd_array: this.state.spd_paste.split(\"\\n\") },\n        function() {\n          console.log(this.state.spd_array);\n          if (\n            this.state.spd_array.length === this.state.wavelength_array.length\n          ) {\n            this.setState({ loading: true }, () => {\n              axios.defaults.headers.common = {};\n              axios.defaults.headers.common.accept = \"application/json\";\n              axios\n                .post(\"/tm30Paste\", {\n                  spd: this.state.spd_array,\n                  wavelength: this.state.wavelength_array\n                })\n                .then(res => {\n                  return res.data;\n                })\n                .then(data => {\n                  /**\n                   * Set the state that loading is false,\n                   * data is the json from the C code\n                   * and tableReady is true\n                   *\n                   * TODO: TableReady is no longer used. Could take out.\n                   */\n                  this.setState({\n                    loading: false,\n                    data: data.data,\n                    tableReady: true\n                  });\n                  /**\n                   * Used later to store the data in cache\n                   * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n                   */\n\n                  /**\n                   * Pushes the data to the Reports page and redirects to that page\n                   */\n                  this.props.history.push({\n                    pathname: \"/Report\",\n                    state: {\n                      data: this.state.data\n                    }\n                  });\n                });\n            });\n          } else {\n            alert(\n              \"Error: Length of SPD array does not match length of wavelength array.\"\n            );\n          }\n        }\n      );\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n  render() {\n    var loading = this.state.loading;\n    return (\n      <div>\n        <h2>Paste SPD Data</h2>\n        <form>\n          <div style={{ position: \"inherit\", display: \"inline-block\" }}>\n            <label>\n              Start Wavelength (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 380 nm. Value may not be greater than 400 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleStartChange}\n                  //onBlur={this.handleLeave}\n                  defaultValue={380}\n                ></input>\n              </LightTooltip>\n            </label>\n            <br />\n            <label>\n              End Wavelength (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 780 nm. Value may not be less than 700 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleEndChange}\n                  defaultValue={780}\n                ></input>\n              </LightTooltip>\n            </label>\n            <br />\n            <label>\n              Interval (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 1 nm. Value may not be greater than 5 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleStepChange}\n                  //onBlur={this.handleLeave}\n                  defaultValue={1}\n                ></input>\n              </LightTooltip>\n            </label>\n          </div>\n          <br />\n          {loading ? (\n            <div>\n              <br />\n              <label>\n                {\" \"}\n                Calculating Results <br />{\" \"}\n                <LoadingSpinner color=\"copper\" size={6} />{\" \"}\n              </label>\n            </div>\n          ) : (\n            <div>\n              <LightTooltip\n                title=\"Runs the calculation when enough data is entered\"\n                placement=\"right-start\"\n              >\n                <span>\n                  <Button\n                    bsSize=\"sm\"\n                    onClick={this.handleSubmit}\n                    disabled={this.state.disabled}\n                  >\n                    Calculate\n                  </Button>\n                </span>\n              </LightTooltip>\n\n              <div\n                style={{\n                  width: \"5%\",\n                  display: \"inline-block\"\n                }}\n              />\n\n              <LightTooltip\n                title=\"Create Table for Wavelengths\"\n                placement=\"right-start\"\n              >\n                <span>\n                  <Button bsSize=\"sm\" onClick={this.handleCreateTable}>\n                    Create Table\n                  </Button>\n                </span>\n              </LightTooltip>\n            </div>\n          )}\n          <div style={{ position: \"inherit\" }}>\n            <h3>SPD Data</h3>\n            {/*}\n            <LightTooltip\n              title=\"Wavelength values generated automatically. \n                Power values entered by user.\"\n              placement=\"right-start\"\n            >\n              <textarea onChange={this.handleSPDChange}></textarea>\n            </LightTooltip>\n          */}\n            {/*}\n            <ReactDataSheet\n              data={this.state.grid}\n              valueRenderer={cell => cell.value}\n              onCellsChanged={changes => {\n                const grid = this.state.grid.map(row => [...row]);\n                changes.forEach(({ cell, row, col, value }) => {\n                  grid[row][col] = { ...grid[row][col], value };\n                });\n                this.setState({ grid });\n              }}\n            />\n            */}\n            {this.state.displayTable ? (\n              <div>\n                <ReactDataSheet\n                  data={this.state.grid}\n                  valueRenderer={cell => cell.value}\n                  onCellsChanged={changes => {\n                    const grid = this.state.grid.map(row => [...row]);\n                    changes.forEach(({ cell, row, col, value }) => {\n                      grid[row][col] = { ...grid[row][col], value };\n                    });\n                    this.setState({ grid });\n                  }}\n                />\n              </div>\n            ) : (\n              <div></div>\n            )}\n          </div>\n          <br />\n        </form>\n      </div>\n    );\n  }\n}\n\n/**\n * Export withRouter so we can jump to the Reports page\n */\nexport default withRouter(Paste);\n"]},"metadata":{},"sourceType":"module"}