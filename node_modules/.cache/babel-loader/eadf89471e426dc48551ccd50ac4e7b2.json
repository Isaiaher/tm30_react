{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/Plots/ELFPlot.jsx\";\n\n/**\n * Equal Luminous Flux Plot\n *\n * A component for the Equal Luminous Flux graph based off of the excel calculator.\n * Pretty straightforward graph that creates two lines from the returned Data from the C code.\n * The red line is the normalized_SPD_test data and the black line is the normalized_SPD_ref\n * data. Both can be found in the JSON that is returned from the C code.\n *\n * TODO - Place the legend inside the graph rather than on the outside.\n *\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n/**\n * The ELFPlot Class\n */\n\nexport class ELFPlot extends Component {\n  /**\n   * Constructor that grabs the data passed in the props\n   * The Caption variable is a boolean which determines if it is\n   * used for the Basic page (no caption) or the Graphical page\n   * where it does have a caption\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.spd_test = this.props.test;\n    this.spd_ref = this.props.ref_spd;\n    this.caption = this.props.caption;\n    this.small_style = {\n      position: \"inherit\",\n      display: \"inline-block\"\n    };\n    var i;\n    /**\n     * Creating the wavelength array which is the X-value of the ordered\n     * pair for each line and data set.\n     *\n     * TODO - Will have to change this once we implement Linear interpolation.\n     */\n\n    this.wavelength = this.props.wavelengths;\n    console.log(this.wavelength); //for (i = 0; i < 400; i++) {\n    //  this.wavelength[i] = i + 380;\n    //}\n  }\n  /**\n   * Return method for the ELFPlot\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      style: this.small_style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Plot, {\n      useResizeHandler: true,\n      style: {\n        width: \"100%\"\n      },\n      data: [{\n        name: \"Test\",\n        x: this.wavelength,\n        y: this.spd_test,\n        type: \"scatter\",\n        mode: \"lines+points\",\n        hovertemplate: \"%{y:.4f}\",\n        marker: {\n          color: \"red\"\n        }\n      }, {\n        name: \"Reference\",\n        x: this.wavelength,\n        y: this.spd_ref,\n        type: \"scatter\",\n        mode: \"lines+points\",\n        hovertemplate: \"%{y:.4f}\",\n        marker: {\n          color: \"black\"\n        }\n      }],\n      layout: {\n        //width: 800,\n        height: 400,\n        legend: {\n          xanchor: \"center\",\n          yanchor: \"top\",\n          y: -0.2,\n          x: 0.5,\n          orientation: \"h\"\n        },\n        margin: {\n          l: 60,\n          r: 15,\n          b: 45,\n          t: 10,\n          pad: 4\n        },\n        xaxis: {\n          title: {\n            text: \"Wavelength (nm)\"\n          },\n          tick0: 380,\n          dtick: 50\n        },\n        yaxis: {\n          title: {\n            text: \"Radiant Power (Equal Luminous Flux)\"\n          },\n          tickformat: \"\",\n          showticklabels: false\n        }\n      },\n      config: {\n        displaylogo: false,\n        modeBarButtons: [[\"toImage\"]],\n        responsive: true,\n        toImageButtonOptions: {\n          format: \"png\",\n          // one of png, svg, jpeg, webp\n          filename: \"Equal Luminous Flux\",\n          height: 700,\n          width: 900,\n          scale: 1.5 // Multiply title/legend/axis/canvas sizes by this factor\n\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), this.caption ? React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Spectral Power Distribution Comparison \"), \"Each SPD has been normalized so that the luminance factor (Y) is 100, \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), \" as it is done in IES TM-30 calculations.\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default ELFPlot;","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/Plots/ELFPlot.jsx"],"names":["React","Component","Plot","ELFPlot","constructor","props","spd_test","test","spd_ref","ref_spd","caption","small_style","position","display","i","wavelength","wavelengths","console","log","render","width","name","x","y","type","mode","hovertemplate","marker","color","height","legend","xanchor","yanchor","orientation","margin","l","r","b","t","pad","xaxis","title","text","tick0","dtick","yaxis","tickformat","showticklabels","displaylogo","modeBarButtons","responsive","toImageButtonOptions","format","filename","scale"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAcA;;;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA;;;;AAGA,OAAO,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AACrC;;;;;;;AAOAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgB,KAAKD,KAAL,CAAWE,IAA3B;AACA,SAAKC,OAAL,GAAe,KAAKH,KAAL,CAAWI,OAA1B;AACA,SAAKC,OAAL,GAAe,KAAKL,KAAL,CAAWK,OAA1B;AACA,SAAKC,WAAL,GAAmB;AACjBC,MAAAA,QAAQ,EAAE,SADO;AAEjBC,MAAAA,OAAO,EAAE;AAFQ,KAAnB;AAIA,QAAIC,CAAJ;AACA;;;;;;;AAMA,SAAKC,UAAL,GAAkB,KAAKV,KAAL,CAAWW,WAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,UAAjB,EAjBiB,CAkBjB;AACA;AACA;AACD;AACD;;;;;AAGAI,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAE,KAAKR,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,gBAAgB,EAAE,IADpB;AAEE,MAAA,KAAK,EAAE;AAAES,QAAAA,KAAK,EAAE;AAAT,OAFT;AAGE,MAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,CAAC,EAAE,KAAKP,UAFV;AAGEQ,QAAAA,CAAC,EAAE,KAAKjB,QAHV;AAIEkB,QAAAA,IAAI,EAAE,SAJR;AAKEC,QAAAA,IAAI,EAAE,cALR;AAMEC,QAAAA,aAAa,EAAE,UANjB;AAOEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAPV,OADI,EAUJ;AACEP,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,CAAC,EAAE,KAAKP,UAFV;AAGEQ,QAAAA,CAAC,EAAE,KAAKf,OAHV;AAIEgB,QAAAA,IAAI,EAAE,SAJR;AAKEC,QAAAA,IAAI,EAAE,cALR;AAMEC,QAAAA,aAAa,EAAE,UANjB;AAOEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAPV,OAVI,CAHR;AAuBE,MAAA,MAAM,EAAE;AACN;AACAC,QAAAA,MAAM,EAAE,GAFF;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,EAAE,QADH;AAENC,UAAAA,OAAO,EAAE,KAFH;AAGNT,UAAAA,CAAC,EAAE,CAAC,GAHE;AAIND,UAAAA,CAAC,EAAE,GAJG;AAKNW,UAAAA,WAAW,EAAE;AALP,SAHF;AAUNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAE,EADG;AAENC,UAAAA,CAAC,EAAE,EAFG;AAGNC,UAAAA,CAAC,EAAE,EAHG;AAINC,UAAAA,CAAC,EAAE,EAJG;AAKNC,UAAAA,GAAG,EAAE;AALC,SAVF;AAiBNC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD,WADF;AAILC,UAAAA,KAAK,EAAE,GAJF;AAKLC,UAAAA,KAAK,EAAE;AALF,SAjBD;AAwBNC,QAAAA,KAAK,EAAE;AACLJ,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD,WADF;AAILI,UAAAA,UAAU,EAAE,EAJP;AAKLC,UAAAA,cAAc,EAAE;AALX;AAxBD,OAvBV;AAuDE,MAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE,KADP;AAENC,QAAAA,cAAc,EAAE,CAAC,CAAC,SAAD,CAAD,CAFV;AAGNC,QAAAA,UAAU,EAAE,IAHN;AAINC,QAAAA,oBAAoB,EAAE;AACpBC,UAAAA,MAAM,EAAE,KADY;AACL;AACfC,UAAAA,QAAQ,EAAE,qBAFU;AAGpBxB,UAAAA,MAAM,EAAE,GAHY;AAIpBT,UAAAA,KAAK,EAAE,GAJa;AAKpBkC,UAAAA,KAAK,EAAE,GALa,CAKT;;AALS;AAJhB,OAvDV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAqEG,KAAK5C,OAAL,GACC;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADF,4EAGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHP,8CADD,GAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5EJ,CADF;AAiFD;;AAnHoC;AAsHvC,eAAeP,OAAf","sourcesContent":["/**\n * Equal Luminous Flux Plot\n *\n * A component for the Equal Luminous Flux graph based off of the excel calculator.\n * Pretty straightforward graph that creates two lines from the returned Data from the C code.\n * The red line is the normalized_SPD_test data and the black line is the normalized_SPD_ref\n * data. Both can be found in the JSON that is returned from the C code.\n *\n * TODO - Place the legend inside the graph rather than on the outside.\n *\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n\n/**\n * The ELFPlot Class\n */\nexport class ELFPlot extends Component {\n  /**\n   * Constructor that grabs the data passed in the props\n   * The Caption variable is a boolean which determines if it is\n   * used for the Basic page (no caption) or the Graphical page\n   * where it does have a caption\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.spd_test = this.props.test;\n    this.spd_ref = this.props.ref_spd;\n    this.caption = this.props.caption;\n    this.small_style = {\n      position: \"inherit\",\n      display: \"inline-block\"\n    };\n    var i;\n    /**\n     * Creating the wavelength array which is the X-value of the ordered\n     * pair for each line and data set.\n     *\n     * TODO - Will have to change this once we implement Linear interpolation.\n     */\n    this.wavelength = this.props.wavelengths;\n    console.log(this.wavelength);\n    //for (i = 0; i < 400; i++) {\n    //  this.wavelength[i] = i + 380;\n    //}\n  }\n  /**\n   * Return method for the ELFPlot\n   */\n  render() {\n    return (\n      <div style={this.small_style}>\n        <Plot\n          useResizeHandler={true}\n          style={{ width: \"100%\" }}\n          data={[\n            {\n              name: \"Test\",\n              x: this.wavelength,\n              y: this.spd_test,\n              type: \"scatter\",\n              mode: \"lines+points\",\n              hovertemplate: \"%{y:.4f}\",\n              marker: { color: \"red\" }\n            },\n            {\n              name: \"Reference\",\n              x: this.wavelength,\n              y: this.spd_ref,\n              type: \"scatter\",\n              mode: \"lines+points\",\n              hovertemplate: \"%{y:.4f}\",\n              marker: { color: \"black\" }\n            }\n          ]}\n          layout={{\n            //width: 800,\n            height: 400,\n            legend: {\n              xanchor: \"center\",\n              yanchor: \"top\",\n              y: -0.2,\n              x: 0.5,\n              orientation: \"h\"\n            },\n            margin: {\n              l: 60,\n              r: 15,\n              b: 45,\n              t: 10,\n              pad: 4\n            },\n            xaxis: {\n              title: {\n                text: \"Wavelength (nm)\"\n              },\n              tick0: 380,\n              dtick: 50\n            },\n            yaxis: {\n              title: {\n                text: \"Radiant Power (Equal Luminous Flux)\"\n              },\n              tickformat: \"\",\n              showticklabels: false\n            }\n          }}\n          config={{\n            displaylogo: false,\n            modeBarButtons: [[\"toImage\"]],\n            responsive: true,\n            toImageButtonOptions: {\n              format: \"png\", // one of png, svg, jpeg, webp\n              filename: \"Equal Luminous Flux\",\n              height: 700,\n              width: 900,\n              scale: 1.5 // Multiply title/legend/axis/canvas sizes by this factor\n            }\n          }}\n        />\n        {this.caption ? (\n          <div align=\"center\">\n            <h5>Spectral Power Distribution Comparison </h5>\n            Each SPD has been normalized so that the luminance factor (Y) is\n            100, <br /> as it is done in IES TM-30 calculations.\n          </div>\n        ) : (\n          <div />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ELFPlot;\n"]},"metadata":{},"sourceType":"module"}