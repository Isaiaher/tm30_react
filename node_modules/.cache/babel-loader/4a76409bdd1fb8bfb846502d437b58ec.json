{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/Plots/CIEPlot.jsx\";\n\n/**\n * Chromaticity Comparison (CIE 1931) and (CIE 1976).\n *\n * A component for the Chromaticity Comparison plots in the Graphical Results tab.\n * This component is a little special in the case that it is used for two different\n * plots that are very similar. There is a constant polygon in both of them that use\n * different data. The CIE 1931 uses \"CIE_1931.json\" in the Data folder and the\n * CIE 1976 plot uses \"CIE_1976.json\" for its polygon. You will find a few\n * conditional statements throughout the code to figure out which graph it is because\n * there are a few constants that are different such as the axes and positioning of the\n * legends.\n *\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n/**\n * CIEPlot class\n */\n\nexport class CIEPlot extends Component {\n  /**\n   * Constructor for the Plot.\n   * Getting the props is very important because\n   * this class is used for two different plots.\n   * How the code deciphers the difference is from the\n   * x_label and y_label attributes when callsed.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.spectrum_locus_x = this.props.spectrum_locus_x; //Data passed in from one of the JSON files specified above.\n\n    this.spectrum_locus_y = this.props.spectrum_locus_y; //Data passed in from one of the JSON files specified above.\n\n    this.blackbody_locus_x = this.props.blackbody_locus_x; //Data passed in from one of the JSON files specified above.\n\n    this.blackbody_locus_y = this.props.blackbody_locus_y; //Data passed in from one of the JSON files specified above.\n\n    this.x_label = this.props.x_label; //Passed in from calling the component, label 'x' if you want the (CIE 1931) Plot\n\n    this.y_label = this.props.y_label; //Passed in from calling the component, label 'y' if you want the (CIE 1931) Plot\n\n    this.test_source = this.props.test_source; //The test source point (An ordered pair) can be found in the returned Data from C code\n\n    this.reference_illuminant = this.props.reference_illuminant; //The reference illuminant point (An ordered pair) can be found in the returned Data from C code\n\n    var i;\n    /**\n     * Determining which plot we are calling and setting some constants\n     */\n\n    if (this.x_label === \"x\") {\n      this.x_legend = 0.4;\n      this.y_legend = 0.95;\n      this.year = \"1931\";\n    } else {\n      this.x_legend = 0.6;\n      this.y_legend = 0.1;\n      this.year = \"1976\";\n    }\n    /**\n     * Creating the wavelength array\n     *\n     * TODO - Will have to change with interpolation I think\n     */\n\n\n    this.wavelength = [];\n\n    for (i = 0; i < 400; i++) {\n      this.wavelength[i] = i + 380;\n    }\n  }\n  /**\n   * Render function of the CIEPlot component\n   */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Plot, {\n      data: [{\n        name: \"Spectrum\",\n        x: this.spectrum_locus_x,\n        y: this.spectrum_locus_y,\n        type: \"scatter\",\n        mode: \"lines+points\",\n        marker: {\n          color: \"black\"\n        },\n        showlegend: false\n      }, {\n        name: \"Blackbody\",\n        x: this.blackbody_locus_x,\n        y: this.blackbody_locus_y,\n        type: \"scatter\",\n        mode: \"lines+points\",\n        marker: {\n          color: \"black\"\n        },\n        showlegend: false\n      }, {\n        name: \"Test Source\",\n        x: [this.test_source[0]],\n        y: [this.test_source[1]],\n        type: \"scatter\",\n        mode: \"markers\",\n        marker: {\n          color: \"red\",\n          symbol: \"x-thin-open\",\n          size: 10\n        }\n      }, {\n        name: \"Referance Illuminant\",\n        x: [this.reference_illuminant[0]],\n        y: [this.reference_illuminant[1]],\n        type: \"scatter\",\n        mode: \"markers\",\n        marker: {\n          color: \"black\",\n          symbol: \"square-open\",\n          size: 12\n        }\n      }],\n      layout: {\n        width: 500,\n        height: 400,\n        margin: {\n          l: 60,\n          r: 40,\n          b: 45,\n          t: 10,\n          pad: 4\n        },\n        xaxis: {\n          title: {\n            text: this.x_label\n          }\n        },\n        yaxis: {\n          title: {\n            text: this.y_label\n          },\n          tickformat: \"\"\n        },\n        legend: {\n          x: this.x_legend,\n          y: this.y_legend\n        }\n      },\n      config: {\n        displayModeBar: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Chromaticity Comparison (\", this.year, \") \"), \"The CIE \", this.year, \" Standard 2\\xB0 Colorimetric Observer is used for calculations.\"));\n  }\n\n}\nexport default CIEPlot;","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/Plots/CIEPlot.jsx"],"names":["React","Component","Plot","CIEPlot","constructor","props","spectrum_locus_x","spectrum_locus_y","blackbody_locus_x","blackbody_locus_y","x_label","y_label","test_source","reference_illuminant","i","x_legend","y_legend","year","wavelength","render","position","display","name","x","y","type","mode","marker","color","showlegend","symbol","size","width","height","margin","l","r","b","t","pad","xaxis","title","text","yaxis","tickformat","legend","displayModeBar"],"mappings":"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","sourcesContent":["/**\n * Chromaticity Comparison (CIE 1931) and (CIE 1976).\n *\n * A component for the Chromaticity Comparison plots in the Graphical Results tab.\n * This component is a little special in the case that it is used for two different\n * plots that are very similar. There is a constant polygon in both of them that use\n * different data. The CIE 1931 uses \"CIE_1931.json\" in the Data folder and the\n * CIE 1976 plot uses \"CIE_1976.json\" for its polygon. You will find a few\n * conditional statements throughout the code to figure out which graph it is because\n * there are a few constants that are different such as the axes and positioning of the\n * legends.\n *\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n\n/**\n * CIEPlot class\n */\nexport class CIEPlot extends Component {\n  /**\n   * Constructor for the Plot.\n   * Getting the props is very important because\n   * this class is used for two different plots.\n   * How the code deciphers the difference is from the\n   * x_label and y_label attributes when callsed.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.spectrum_locus_x = this.props.spectrum_locus_x; //Data passed in from one of the JSON files specified above.\n    this.spectrum_locus_y = this.props.spectrum_locus_y; //Data passed in from one of the JSON files specified above.\n    this.blackbody_locus_x = this.props.blackbody_locus_x; //Data passed in from one of the JSON files specified above.\n    this.blackbody_locus_y = this.props.blackbody_locus_y; //Data passed in from one of the JSON files specified above.\n    this.x_label = this.props.x_label; //Passed in from calling the component, label 'x' if you want the (CIE 1931) Plot\n    this.y_label = this.props.y_label; //Passed in from calling the component, label 'y' if you want the (CIE 1931) Plot\n    this.test_source = this.props.test_source; //The test source point (An ordered pair) can be found in the returned Data from C code\n    this.reference_illuminant = this.props.reference_illuminant; //The reference illuminant point (An ordered pair) can be found in the returned Data from C code\n    var i;\n\n    /**\n     * Determining which plot we are calling and setting some constants\n     */\n    if (this.x_label === \"x\") {\n      this.x_legend = 0.4;\n      this.y_legend = 0.95;\n      this.year = \"1931\";\n    } else {\n      this.x_legend = 0.6;\n      this.y_legend = 0.1;\n      this.year = \"1976\";\n    }\n\n    /**\n     * Creating the wavelength array\n     *\n     * TODO - Will have to change with interpolation I think\n     */\n    this.wavelength = [];\n    for (i = 0; i < 400; i++) {\n      this.wavelength[i] = i + 380;\n    }\n  }\n  /**\n   * Render function of the CIEPlot component\n   */\n  render() {\n    return (\n      <div style={{ position: \"inherit\", display: \"inline-block\" }}>\n        <Plot\n          data={[\n            {\n              name: \"Spectrum\",\n              x: this.spectrum_locus_x,\n              y: this.spectrum_locus_y,\n              type: \"scatter\",\n              mode: \"lines+points\",\n              marker: { color: \"black\" },\n              showlegend: false\n            },\n            {\n              name: \"Blackbody\",\n              x: this.blackbody_locus_x,\n              y: this.blackbody_locus_y,\n              type: \"scatter\",\n              mode: \"lines+points\",\n              marker: { color: \"black\" },\n              showlegend: false\n            },\n            {\n              name: \"Test Source\",\n              x: [this.test_source[0]],\n              y: [this.test_source[1]],\n              type: \"scatter\",\n              mode: \"markers\",\n              marker: { color: \"red\", symbol: \"x-thin-open\", size: 10 }\n            },\n            {\n              name: \"Referance Illuminant\",\n              x: [this.reference_illuminant[0]],\n              y: [this.reference_illuminant[1]],\n              type: \"scatter\",\n              mode: \"markers\",\n              marker: { color: \"black\", symbol: \"square-open\", size: 12 }\n            }\n          ]}\n          layout={{\n            width: 500,\n            height: 400,\n            margin: {\n              l: 60,\n              r: 40,\n              b: 45,\n              t: 10,\n              pad: 4\n            },\n            xaxis: {\n              title: {\n                text: this.x_label\n              }\n            },\n            yaxis: {\n              title: {\n                text: this.y_label\n              },\n              tickformat: \"\"\n            },\n            legend: {\n              x: this.x_legend,\n              y: this.y_legend\n            }\n          }}\n          config={{ displayModeBar: false }}\n        />\n        <div align=\"center\">\n          <h5>Chromaticity Comparison ({this.year}) </h5>\n          The CIE {this.year} Standard 2° Colorimetric Observer is used for\n          calculations.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CIEPlot;\n"]},"metadata":{},"sourceType":"module"}