import React from 'react';
import { shallow } from 'enzyme';

import Chip from '../Chip';

/*
* During test writing you can selectively run just these tests or skip individual ones while you
* work on others https://facebook.github.io/jest/docs/en/api.html#testskipname-fn
*/
describe('<Chip />', () => {
  const defaultProps = {
    label: 'Label',
  };

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('../index.js');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.Card).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(Chip).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    it('should log 1 errors when missing required props.', () => {
      console.error = jest.fn();

      shallow(<Chip />);
      expect(console.error).toHaveBeenCalledTimes(1);

      console.error.mockClear();
    });
  });

  test('Chip renders expected output', () => {
    const wrapper = shallow(<Chip {...defaultProps} />);
    expect(wrapper).toMatchSnapshot();
  });

  test('Chip renders with onClick', () => {
    const clickChip = shallow(<Chip onClick={() => {}} label="hasClick" />);
    expect(clickChip).toMatchSnapshot();
  });

  test('Chip renders with onKeyDown', () => {
    const clickChip = shallow(<Chip onKeyDown={() => {}} label="hasKeyDown" />);
    expect(clickChip).toMatchSnapshot();
  });

  test('Chip renders with onKeyDown and onClick', () => {
    const clickChip = shallow(<Chip
      onKeyDown={() => {}}
      onClick={() => {}}
      label="hasKeyDown and hasClick"
    />);
    expect(clickChip).toMatchSnapshot();
  });

  test('Chip renders with onDelete', () => {
    const clickChip = shallow(<Chip onDelete={() => {}} label="hasDelete" />);
    expect(clickChip).toMatchSnapshot();
  });

  test('Chip renders with onKeyDown, onClick, and onDelete', () => {
    const clickChip = shallow(<Chip
      onKeyDown={() => {}}
      onClick={() => {}}
      onDelete={() => {}}
      label="hasKeyDown and hasClick and hasDelete"
    />);
    expect(clickChip).toMatchSnapshot();
  });
});
