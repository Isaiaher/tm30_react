'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactBootstrap = require('react-bootstrap');

var _reactTransitionGroup = require('react-transition-group');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var SidebarWrapper = function (_React$Component) {
  (0, _inherits3['default'])(SidebarWrapper, _React$Component);

  function SidebarWrapper(props) {
    (0, _classCallCheck3['default'])(this, SidebarWrapper);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.state = {
      sidebarOpen: _this.props.sidebarOpen
    };

    _this.toggleSidebarVisibility = _this.toggleSidebarVisibility.bind(_this);
    return _this;
  }

  SidebarWrapper.prototype.toggleSidebarVisibility = function toggleSidebarVisibility() {
    this.setState({
      sidebarOpen: !this.state.sidebarOpen
    });
  };

  SidebarWrapper.prototype.buildElements = function buildElements(isOpen) {
    var _props = this.props,
        align = _props.align,
        children = _props.children,
        sidebarComponent = _props.sidebarComponent,
        collapsible = _props.collapsible,
        toggleLabel = _props.toggleLabel;

    var sidebarElements = [];

    if (collapsible) {
      var toggleIcon = isOpen && align === 'left' || !isOpen && align === 'right' ? 'chevron-up' : 'chevron-down';

      sidebarElements.push(_react2['default'].createElement(
        _reactTransitionGroup.CSSTransition,
        { key: 1, classNames: 'PnnlSidebar', 'in': isOpen, timeout: 400, appear: true },
        sidebarComponent
      ), _react2['default'].createElement(
        'button',
        { key: 2, className: 'PnnlSidebarToggle', onClick: this.toggleSidebarVisibility },
        _react2['default'].createElement(
          'div',
          null,
          _react2['default'].createElement(_Icon2['default'], { icon: toggleIcon }),
          _react2['default'].createElement(
            'small',
            null,
            toggleLabel
          ),
          _react2['default'].createElement(_Icon2['default'], { icon: toggleIcon })
        )
      ));
    } else {
      var newComponent = _react2['default'].cloneElement(sidebarComponent, { key: 1 });
      sidebarElements.push(newComponent);
    }

    sidebarElements.push(_react2['default'].createElement(
      'div',
      { key: 3, className: 'PnnlSidebarNeighbor' },
      children
    ));

    if (align === 'right') {
      sidebarElements.reverse();
    }

    return sidebarElements;
  };

  SidebarWrapper.prototype.render = function render() {
    var _props2 = this.props,
        align = _props2.align,
        fluid = _props2.fluid,
        sidebarComponent = _props2.sidebarComponent;

    var wrapperClassNames = (0, _classnames2['default'])('PnnlSidebarWrapper', align);
    var elements = sidebarComponent ? this.buildElements(this.state.sidebarOpen) : null;

    return _react2['default'].createElement(
      _reactBootstrap.Grid,
      { fluid: fluid },
      _react2['default'].createElement(
        _reactBootstrap.Row,
        { className: wrapperClassNames },
        elements
      )
    );
  };

  return SidebarWrapper;
}(_react2['default'].Component);

SidebarWrapper.propTypes = {
  /**
   * Determines which side the Sidebar will be aligned to.
   */
  align: _propTypes2['default'].oneOf(['left', 'right']),
  /**
   * Whether the Sidebar can be collapsed.
   */
  collapsible: _propTypes2['default'].bool,
  /**
   * Whether the Container should use a fluid layout. You should probably match this to the rest of your application.
   */
  fluid: _propTypes2['default'].bool,
  /**
   * The Sidebar component that will be aligned to the rest of the content.
   * @required
   */
  sidebarComponent: _propTypes2['default'].node.isRequired,
  /**
   * Whether the Sidebar is currently open.
   */
  sidebarOpen: _propTypes2['default'].bool,
  /**
   * The label to be displayed in the toggle button. This should be descriptive enough that the user understands the type of content hidden when the Sidebar is collapsed.
   */
  toggleLabel: _propTypes2['default'].string,
  /**
   * The content to be displayed next to the Sidebar.
   * @required
   */
  children: _propTypes2['default'].node.isRequired
};

SidebarWrapper.defaultProps = {
  align: 'left',
  collapsible: false,
  fluid: false,
  sidebarOpen: true,
  toggleLabel: 'Sidebar'
};

exports['default'] = SidebarWrapper;
module.exports = exports['default'];