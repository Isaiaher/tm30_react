{"ast":null,"code":"import _defineProperty from \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\"; //import Button from \"@material-ui/core/Button\";\n\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    boxShadow: theme.shadows[10],\n    fontSize: 14\n  }\n}))(Tooltip);\n/**\n * Paste Class\n */\n\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleSPDChange = event => {\n      this.setState({\n        spd_paste: event.target.value\n      }, function () {\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStartChange = event => {\n      this.setState({\n        wavelength_start: event.target.value\n      }, function () {\n        console.log(\"setState completed\", this.state);\n\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleEndChange = event => {\n      this.setState({\n        wavelength_end: event.target.value\n      }, function () {\n        console.log(\"setState completed\", this.state);\n\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStepChange = event => {\n      this.setState({\n        step: parseInt(event.target.value)\n      }, function () {\n        console.log(\"setState completed\", this.state);\n\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.state = {\n      spd_paste: \"\",\n      //the SPD string inputed to the text area\n      spd_array: [],\n      //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false,\n      //Boolean to control the loader\n      data: [],\n      //Data that is returned from the C code\n      wavelength_start: 380,\n      //The starting wavelength with default value of 380\n      wavelength_end: 780,\n      //The ending wavelength with default value of 780\n      step: 1,\n      //The step size with default value of 1\n      disabled: true,\n      //Boolean to control if the button is disabled or not. Default is that it is.\n      grid: [[{\n        readOnly: true,\n        value: \"Wavelength\"\n      }, {\n        readOnly: true,\n        className: \"cell\",\n        value: \"SPD\"\n      }]]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n    var i;\n\n    for (i = 0; i < 401; i++) {\n      this.state.grid.push([{\n        value: i + 380,\n        className: \"cell\"\n      }, {\n        value: \"\"\n      }]);\n    }\n  }\n  /**\n   * Start of Handler functions-----------------------------------\n   */\n\n  /**\n   * Function that handles when the SPD paste text area is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n\n\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (false //this.state.wavelength_start !== 380 ||\n    //this.state.wavelength_end !== 780 ||\n    //this.state.step !== 1\n    ) {\n        alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n      } else {\n      this.setState({\n        wavelength_array: []\n      }, function () {\n        var i;\n        var array_i = 0;\n\n        for (i = this.state.wavelength_start; i <= this.state.wavelength_end; i += this.state.step) {\n          console.log(\"i = \".concat(i, \" array_i = \").concat(array_i, \" start = \").concat(this.state.wavelength_start, \" end = \").concat(this.state.wavelength_end));\n          this.state.wavelength_array[array_i] = i;\n          array_i++;\n        } //console.log(this.state.wavelength_array);\n\n      });\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n\n      this.setState({\n        spd_array: this.state.spd_paste.split(\"\\n\")\n      }, function () {\n        console.log(this.state.spd_array);\n\n        if (this.state.spd_array.length === this.state.wavelength_array.length) {\n          this.setState({\n            loading: true\n          }, () => {\n            axios.defaults.headers.common = {};\n            axios.defaults.headers.common.accept = \"application/json\";\n            axios.post(\"/tm30Paste\", {\n              spd: this.state.spd_array,\n              wavelength: this.state.wavelength_array\n            }).then(res => {\n              return res.data;\n            }).then(data => {\n              /**\n               * Set the state that loading is false,\n               * data is the json from the C code\n               * and tableReady is true\n               *\n               * TODO: TableReady is no longer used. Could take out.\n               */\n              this.setState({\n                loading: false,\n                data: data.data,\n                tableReady: true\n              });\n              /**\n               * Used later to store the data in cache\n               * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n               */\n\n              /**\n               * Pushes the data to the Reports page and redirects to that page\n               */\n\n              this.props.history.push({\n                pathname: \"/Report\",\n                state: {\n                  data: this.state.data\n                }\n              });\n            });\n          });\n        } else {\n          alert(\"Error: Length of SPD array does not match length of wavelength array.\");\n        }\n      });\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n\n\n  render() {\n    var loading = this.state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Paste SPD Data\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Start Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 380 nm. Value may not be greater than 400 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleStartChange,\n      defaultValue: 380,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"End Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 780 nm. Value may not be less than 700 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleEndChange,\n      defaultValue: 780,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Interval (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 1 nm. Value may not be greater than 5 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleStepChange,\n      defaultValue: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\",\n        width: \"5%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        position: \"inherit\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"SPD Data\"), React.createElement(ReactDataSheet, {\n      data: this.state.grid,\n      valueRenderer: cell => cell.value,\n      onCellsChanged: changes => {\n        const grid = this.state.grid.map(row => [...row]);\n        changes.forEach(({\n          cell,\n          row,\n          col,\n          value\n        }) => {\n          grid[row][col] = _objectSpread({}, grid[row][col], {\n            value\n          });\n        });\n        this.setState({\n          grid\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \" \", \"Calculating Results \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), \" \", React.createElement(LoadingSpinner, {\n      color: \"copper\",\n      size: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), \" \")) : React.createElement(LightTooltip, {\n      title: \"Runs the calculation when enough data is entered\",\n      placement: \"right-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsSize: \"sm\",\n      onClick: this.handleSubmit,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"Calculate\")))));\n  }\n\n}\n/**\n * Export withRouter so we can jump to the Reports page\n */\n\nexport default withRouter(Paste);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx"],"names":["React","Component","Button","withRouter","LoadingSpinner","axios","Tooltip","withStyles","makeStyles","ReactDataSheet","LightTooltip","theme","tooltip","boxShadow","shadows","fontSize","Paste","constructor","props","handleSPDChange","event","setState","spd_paste","target","value","state","step","wavelength_end","wavelength_start","disabled","handleStartChange","console","log","handleEndChange","handleStepChange","parseInt","spd_array","wavelength_array","loading","data","grid","readOnly","className","handleSubmit","bind","i","push","alert","array_i","split","length","defaults","headers","common","accept","post","spd","wavelength","then","res","tableReady","history","pathname","render","position","display","width","cell","changes","map","row","forEach","col"],"mappings":"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","sourcesContent":["/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\n//import Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    boxShadow: theme.shadows[10],\n    fontSize: 14\n  }\n}))(Tooltip);\n\n/**\n * Paste Class\n */\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      spd_paste: \"\", //the SPD string inputed to the text area\n      spd_array: [], //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false, //Boolean to control the loader\n      data: [], //Data that is returned from the C code\n      wavelength_start: 380, //The starting wavelength with default value of 380\n      wavelength_end: 780, //The ending wavelength with default value of 780\n      step: 1, //The step size with default value of 1\n      disabled: true, //Boolean to control if the button is disabled or not. Default is that it is.\n      grid: [\n        [\n          { readOnly: true, value: \"Wavelength\" },\n          { readOnly: true, className: \"cell\", value: \"SPD\" }\n        ]\n      ]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n\n    var i;\n    for (i = 0; i < 401; i++) {\n      this.state.grid.push([\n        { value: i + 380, className: \"cell\" },\n        { value: \"\" }\n      ]);\n    }\n  }\n\n  /**\n   * Start of Handler functions-----------------------------------\n   */\n\n  /**\n   * Function that handles when the SPD paste text area is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleSPDChange = event => {\n    this.setState({ spd_paste: event.target.value }, function() {\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the Start Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStartChange = event => {\n    this.setState({ wavelength_start: event.target.value }, function() {\n      console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleEndChange = event => {\n    this.setState({ wavelength_end: event.target.value }, function() {\n      console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStepChange = event => {\n    this.setState({ step: parseInt(event.target.value) }, function() {\n      console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (\n      false\n      //this.state.wavelength_start !== 380 ||\n      //this.state.wavelength_end !== 780 ||\n      //this.state.step !== 1\n    ) {\n      alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n    } else {\n      this.setState(\n        {\n          wavelength_array: []\n        },\n        function() {\n          var i;\n          var array_i = 0;\n          for (\n            i = this.state.wavelength_start;\n            i <= this.state.wavelength_end;\n            i += this.state.step\n          ) {\n            console.log(\n              `i = ${i} array_i = ${array_i} start = ${this.state.wavelength_start} end = ${this.state.wavelength_end}`\n            );\n            this.state.wavelength_array[array_i] = i;\n            array_i++;\n          }\n          //console.log(this.state.wavelength_array);\n        }\n      );\n\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n      this.setState(\n        { spd_array: this.state.spd_paste.split(\"\\n\") },\n        function() {\n          console.log(this.state.spd_array);\n          if (\n            this.state.spd_array.length === this.state.wavelength_array.length\n          ) {\n            this.setState({ loading: true }, () => {\n              axios.defaults.headers.common = {};\n              axios.defaults.headers.common.accept = \"application/json\";\n              axios\n                .post(\"/tm30Paste\", {\n                  spd: this.state.spd_array,\n                  wavelength: this.state.wavelength_array\n                })\n                .then(res => {\n                  return res.data;\n                })\n                .then(data => {\n                  /**\n                   * Set the state that loading is false,\n                   * data is the json from the C code\n                   * and tableReady is true\n                   *\n                   * TODO: TableReady is no longer used. Could take out.\n                   */\n                  this.setState({\n                    loading: false,\n                    data: data.data,\n                    tableReady: true\n                  });\n                  /**\n                   * Used later to store the data in cache\n                   * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n                   */\n\n                  /**\n                   * Pushes the data to the Reports page and redirects to that page\n                   */\n                  this.props.history.push({\n                    pathname: \"/Report\",\n                    state: {\n                      data: this.state.data\n                    }\n                  });\n                });\n            });\n          } else {\n            alert(\n              \"Error: Length of SPD array does not match length of wavelength array.\"\n            );\n          }\n        }\n      );\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n  render() {\n    var loading = this.state.loading;\n    return (\n      <div>\n        <h2>Paste SPD Data</h2>\n        <form>\n          <div style={{ position: \"inherit\", display: \"inline-block\" }}>\n            <label>\n              Start Wavelength (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 380 nm. Value may not be greater than 400 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleStartChange}\n                  defaultValue={380}\n                ></input>\n              </LightTooltip>\n            </label>\n            <br />\n            <label>\n              End Wavelength (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 780 nm. Value may not be less than 700 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleEndChange}\n                  defaultValue={780}\n                ></input>\n              </LightTooltip>\n            </label>\n            <br />\n            <label>\n              Interval (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 1 nm. Value may not be greater than 5 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleStepChange}\n                  defaultValue={1}\n                ></input>\n              </LightTooltip>\n            </label>\n          </div>\n          <div\n            style={{\n              position: \"inherit\",\n              display: \"inline-block\",\n              width: \"5%\"\n            }}\n          ></div>\n          <div style={{ position: \"inherit\" }}>\n            <h3>SPD Data</h3>\n            {/*}\n            <LightTooltip\n              title=\"Wavelength values generated automatically. \n                Power values entered by user.\"\n              placement=\"right-start\"\n            >\n              <textarea onChange={this.handleSPDChange}></textarea>\n            </LightTooltip>\n          */}\n            <ReactDataSheet\n              data={this.state.grid}\n              valueRenderer={cell => cell.value}\n              onCellsChanged={changes => {\n                const grid = this.state.grid.map(row => [...row]);\n                changes.forEach(({ cell, row, col, value }) => {\n                  grid[row][col] = { ...grid[row][col], value };\n                });\n                this.setState({ grid });\n              }}\n            />\n          </div>\n          <br />\n          {loading ? (\n            <div>\n              <label>\n                {\" \"}\n                Calculating Results <br />{\" \"}\n                <LoadingSpinner color=\"copper\" size={6} />{\" \"}\n              </label>\n            </div>\n          ) : (\n            <LightTooltip\n              title=\"Runs the calculation when enough data is entered\"\n              placement=\"right-start\"\n            >\n              <span>\n                <Button\n                  bsSize=\"sm\"\n                  onClick={this.handleSubmit}\n                  disabled={this.state.disabled}\n                >\n                  Calculate\n                </Button>\n              </span>\n            </LightTooltip>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n\n/**\n * Export withRouter so we can jump to the Reports page\n */\nexport default withRouter(Paste);\n"]},"metadata":{},"sourceType":"module"}