{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _iconBadges = require('./helpers/icon-badges');\n\nvar _iconBadges2 = _interopRequireDefault(_iconBadges);\n\nvar _iconMasks = require('./helpers/icon-masks');\n\nvar _config = require('../config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/* eslint-disable react/no-array-index-key */\n\n\nvar fetchCache = {};\n\nvar Icon = function (_React$Component) {\n  (0, _inherits3['default'])(Icon, _React$Component);\n\n  function Icon() {\n    var _temp, _this, _ret;\n\n    (0, _classCallCheck3['default'])(this, Icon);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      svg: null\n    }, _this.setStateFromPendingFetch = function (uri) {\n      var cacheVal = fetchCache[uri];\n\n      if (cacheVal && typeof cacheVal.then === 'function') {\n        // we cached a promise of the fetch, so get the value that was (or is currently being) fetched\n        cacheVal.then(function (data) {\n          // remove cached fetch promise\n          delete fetchCache[uri];\n          localStorage.setItem(uri, (0, _stringify2['default'])(data.svg));\n\n          if (_this._isMounted) {\n            _this.setState({\n              svg: data.svg\n            });\n          }\n        })['catch'](function (e) {\n          if (e.name !== 'AbortError') {\n            console.warn('There was an error retrieving icon ' + uri + '. Reason: ' + e.message); // eslint-disable-line no-console\n\n            if (_this._isMounted) {\n              _this.setState({\n                svg: null\n              });\n            }\n          }\n        });\n      } else {\n        // There was a problem if we hit this\n        _this.setState({\n          svg: null\n        });\n      }\n    }, _this.getIcon = function (props) {\n      var icon = props.icon,\n          iconDisplay = props.iconDisplay,\n          badge = props.badge,\n          extension = props.extension;\n      var params = '';\n\n      if (!icon || extension) {\n        return;\n      }\n\n      if (iconDisplay) {\n        params = '?iconDisplay=' + iconDisplay;\n      }\n\n      if (badge) {\n        params = iconDisplay ? '?iconDisplay=' + iconDisplay + '&badge=' + badge : '?badge=' + badge;\n      }\n\n      var uri = _config2['default'].themeCore.svgIcons + '/' + icon + params; // pull from localStorage, if available\n\n      var cached = localStorage.getItem(uri);\n\n      if (cached) {\n        _this.setState({\n          svg: JSON.parse(cached)\n        });\n\n        return;\n      } else if (Object.prototype.hasOwnProperty.call(fetchCache, uri)) {\n        // wait for pending request\n        _this.setStateFromPendingFetch(uri);\n\n        return;\n      }\n\n      fetchCache[uri] = fetch(uri, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        }\n      }).then(function (response) {\n        if (response.status >= 400 && _this._isMounted) {\n          _this.setState({\n            svg: null\n          });\n        }\n\n        return response.json();\n      }); // wait for pending request\n\n      _this.setStateFromPendingFetch(uri);\n    }, _this.getElementAttributes = function (element) {\n      var attributes = {};\n      (0, _keys2['default'])(element).forEach(function (key) {\n        if (key.substring(0, 1) === '@') {\n          // ignore empty\n          if (element[key] !== '') {\n            // rename class attribute to className, for React compatibility\n            var attributeName = key.substring(1) === 'class' ? 'className' : key.substring(1);\n            attributes[attributeName] = element[key];\n          }\n        }\n      });\n      return attributes;\n    }, _this.renderExtensionIcon = function () {\n      var _this$props = _this.props,\n          icon = _this$props.icon,\n          iconDisplay = _this$props.iconDisplay,\n          badge = _this$props.badge,\n          extension = _this$props.extension;\n\n      if (!extension) {\n        return null;\n      }\n\n      var mask = '';\n      var maskVector = '';\n      var maskUrl = '';\n\n      if (badge === 'add' || badge === 'help' || badge === 'minus') {\n        mask = 'circle';\n      } else if (badge === 'checkmark') {\n        mask = 'checkmark';\n      } else if (badge === 'error') {\n        mask = 'octagon';\n      } else if (badge === 'warning') {\n        mask = 'triangle';\n      }\n\n      if (mask !== '') {\n        maskUrl = 'url(#' + _iconMasks.maskIds[mask] + ')';\n        maskVector = _iconMasks.masks[mask];\n      }\n\n      var customIcons = extension(maskUrl);\n      var itemClasses = (0, _classnames2['default'])('PnnlIcon', iconDisplay);\n      return icon ? _react2['default'].createElement('svg', {\n        xmlns: 'http://www.w3.org/2000/svg',\n        width: '100',\n        height: '100',\n        viewBox: '0 0 100 100',\n        className: itemClasses\n      }, _react2['default'].createElement('defs', null, maskVector), customIcons[icon], badge !== null && (0, _keys2['default'])(_iconBadges2['default']).includes(badge) ? _iconBadges2['default'][badge] : null) : null;\n    }, _this.renderChildElements = function (element) {\n      var children = [];\n      (0, _keys2['default'])(element).forEach(function (key, index) {\n        if (key.substring(0, 1) !== '@') {\n          var attributes = _this.getElementAttributes(element[key]);\n\n          switch (key) {\n            case 'rect':\n              children.push(_react2['default'].createElement('rect', (0, _extends3['default'])({}, attributes, {\n                key: index\n              })));\n              break;\n\n            case 'path':\n              children.push(_react2['default'].createElement('path', (0, _extends3['default'])({}, attributes, {\n                key: index\n              })));\n              break;\n\n            case 'circle':\n              children.push(_react2['default'].createElement('circle', (0, _extends3['default'])({}, attributes, {\n                key: index\n              })));\n              break;\n\n            default:\n              break;\n          }\n        }\n      });\n      return children;\n    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);\n  }\n\n  Icon.prototype.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n    this.getIcon(this.props);\n  };\n\n  Icon.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.getIcon(nextProps);\n  };\n\n  Icon.prototype.componentWillUnmount = function componentWillUnmount() {\n    this._isMounted = false;\n  };\n  /*\n  * This is called when there is a pending request for the same Icon and it\n  * hasn't been saved in local storage yet.\n  */\n\n  /*\n  * The icon Api serializes the xml representation of the svg icon to json, when application/json mime type is set on request.\n  * The serialization prefixes element attributes with an @ symbol. This returns the Javascript object properties\n  * that start with an @ symbol.\n  */\n\n  /*\n  * Renders custom svg icon provided by consumer of this component.\n  */\n\n\n  Icon.prototype.render = function render() {\n    var _this2 = this;\n\n    var svg = this.state.svg;\n    var extension = this.props.extension; // Render custom icon if extension provided\n\n    if (extension) {\n      return this.renderExtensionIcon();\n    }\n\n    if (!svg) {\n      return null;\n    }\n\n    var svgAttributes = this.getElementAttributes(svg);\n    var svgGroups = [];\n    var maskAttributes = null; // mask definitions are only added for icons with a badge\n\n    if (Object.prototype.hasOwnProperty.call(svg.defs, 'mask')) {\n      maskAttributes = this.getElementAttributes(svg.defs.mask);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(svg, 'g')) {\n      // If there is only one group child, g is a single object, not an array\n      if (Array.isArray(svg.g)) {\n        svgGroups = svg.g;\n      } else {\n        svgGroups.push(svg.g);\n      }\n    }\n\n    return _react2['default'].createElement('svg', svgAttributes, _react2['default'].createElement('defs', null, maskAttributes ? _react2['default'].createElement('mask', maskAttributes, this.renderChildElements(svg.defs.mask)) : null), svgGroups.map(function (group, index) {\n      var groupAttributes = _this2.getElementAttributes(group);\n\n      var pathElements = [];\n      var circleElements = []; // Expects g element to contain an array of path elements\n\n      if (Object.prototype.hasOwnProperty.call(group, 'path')) {\n        // If there is only one path child, path is a single object, not an array\n        if (Array.isArray(group.path)) {\n          pathElements = group.path;\n        } else {\n          pathElements.push(group.path);\n        }\n      }\n\n      if (Object.prototype.hasOwnProperty.call(group, 'circle')) {\n        // If there is only one circle child, path is a single object, not an array\n        if (Array.isArray(group.circle)) {\n          circleElements = group.circle;\n        } else {\n          circleElements.push(group.circle);\n        }\n      }\n\n      return _react2['default'].createElement('g', (0, _extends3['default'])({}, groupAttributes, {\n        key: index\n      }), pathElements.map(function (p, pathIndex) {\n        var attributes = _this2.getElementAttributes(p);\n\n        return _react2['default'].createElement('path', (0, _extends3['default'])({}, attributes, {\n          key: pathIndex\n        }));\n      }), circleElements.map(function (p, pathIndex) {\n        var attributes = _this2.getElementAttributes(p);\n\n        return _react2['default'].createElement('circle', (0, _extends3['default'])({}, attributes, {\n          key: pathIndex + 20\n        }));\n      }));\n    }));\n  };\n\n  return Icon;\n}(_react2['default'].Component);\n\nIcon.propTypes = {\n  /**\n    * An icon name. See e.g. https://forge.pnl.gov/icons/\n    * */\n  icon: _propTypes2['default'].string.isRequired,\n\n  /**\n     * Icon display options.  These are added as classNames to the resulting HTML. Built-in options are 'solid' or 'outline', and 'color'.\n     */\n  iconDisplay: _propTypes2['default'].string,\n\n  /**\n     * Name of the badge to display in the bottom right corner. Options are 'add', 'checkmark', 'help', 'error', 'minus', 'warning'.\n     */\n  badge: _propTypes2['default'].string,\n\n  /**\n     * A function to expand the default set of icons. Must return an object with SVG contained in a <g> element.\n     */\n  extension: _propTypes2['default'].func\n};\nIcon.defaultProps = {\n  iconDisplay: '',\n  badge: null,\n  extension: null\n};\nexports['default'] = Icon;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}