import React from 'react';
import { shallow } from 'enzyme';

import Facility from './Facility';


describe('<Facility />', () => {
  const defaultProps = {
    facility: {
      id: '3350',
      name: 'Laboratory Support Building',
      abbreviation: 'LSB',
      thumbnailImage: 'https://cdn.pnl.gov/images/locations/1130-thumb.png',
    },
  };

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('..');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.Facility).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(Facility).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    // swallow prop type console errors
    console.error = jest.fn();

    it('should log 1 error when missing required props.', () => {
      expect(() => shallow(<Facility facility={null} />)).toThrowErrorMatchingSnapshot();
    });

    it('should render as NULL when required prop type is UNDEFINED', () => {
      expect(() => shallow(<Facility facility={undefined} />)).toThrowErrorMatchingSnapshot();
    });

    it('should render without an error when supplied default facility prop type', () => {
      // shallow render should not raise an error if valid
      const wrapper = shallow(<Facility {...defaultProps} />);
      expect(wrapper).toMatchSnapshot();
    });

    it('should set onClick prop type when supplied', () => {
      const myCallback = jest.fn();

      const wrapper = shallow(<Facility {...defaultProps} onClickCallback={myCallback} />);

      // expect(wrapper.instance().props.onClickCallback).toEqual(myCallback);
      expect(wrapper).toMatchSnapshot();
    });

    console.error.mockClear();
  });

  describe('rendering output', () => {
    it('should render the default output when supplied default facility prop type', () => {
      const wrapper = shallow(<Facility {...defaultProps} />);
      expect(wrapper).toMatchSnapshot();
    });
  });
});
