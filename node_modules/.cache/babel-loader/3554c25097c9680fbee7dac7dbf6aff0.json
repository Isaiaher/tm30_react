{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/ELFPlot.jsx\";\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nexport class ELFPlot extends Component {\n  constructor(props) {\n    super(props);\n    var lcs = this.props.data;\n    var i;\n    this.x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    this.y = [lcs[0], lcs[1], lcs[2], lcs[3], lcs[4], lcs[5], lcs[6], lcs[7], lcs[8], lcs[9], lcs[10], lcs[11], lcs[12], lcs[13], lcs[14], lcs[15]];\n    this.y_rounded = [];\n\n    for (i = 0; i < 16; i++) {\n      this.y_rounded[i] = \"\".concat(Math.round(this.y[i] * 100) / 100);\n    }\n\n    this.bar_colors = [\"#b45c60\", \"#cb7761\", \"#cb824b\", \"#d7ad67\", \"#ac9a5d\", \"#919E60\", \"#678B5F\", \"#62B08F\", \"#7CBABA\", \"#2C797D\", \"#54778C\", \"#7189B1\", \"#988CA9\", \"#735876\", \"#8F6682\", \"#B97B8E\"];\n    this.trace1 = {\n      x: [1, 2, 3, 4],\n      y: [10, 15, 13, 17],\n      type: \"scatter\"\n    };\n    this.trace2 = {\n      x: [1, 2, 3, 4],\n      y: [16, 5, 11, 9],\n      type: \"scatter\"\n    };\n  }\n\n  render() {\n    return React.createElement(Plot, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"title=\", null, \"data= data=\", [{\n      type: \"scatter\",\n      x: this.trace1,\n      y: this.trace2\n    }]);\n  }\n\n}\nexport default ELFPlot;","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/ELFPlot.jsx"],"names":["React","Component","Plot","ELFPlot","constructor","props","lcs","data","i","x","y","y_rounded","Math","round","bar_colors","trace1","type","trace2","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,OAAO,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AACrCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,QAAIC,GAAG,GAAG,KAAKD,KAAL,CAAWE,IAArB;AACA,QAAIC,CAAJ;AAEA,SAAKC,CAAL,GAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,EAAhD,EAAoD,EAApD,CAAT;AACA,SAAKC,CAAL,GAAS,CACPJ,GAAG,CAAC,CAAD,CADI,EAEPA,GAAG,CAAC,CAAD,CAFI,EAGPA,GAAG,CAAC,CAAD,CAHI,EAIPA,GAAG,CAAC,CAAD,CAJI,EAKPA,GAAG,CAAC,CAAD,CALI,EAMPA,GAAG,CAAC,CAAD,CANI,EAOPA,GAAG,CAAC,CAAD,CAPI,EAQPA,GAAG,CAAC,CAAD,CARI,EASPA,GAAG,CAAC,CAAD,CATI,EAUPA,GAAG,CAAC,CAAD,CAVI,EAWPA,GAAG,CAAC,EAAD,CAXI,EAYPA,GAAG,CAAC,EAAD,CAZI,EAaPA,GAAG,CAAC,EAAD,CAbI,EAcPA,GAAG,CAAC,EAAD,CAdI,EAePA,GAAG,CAAC,EAAD,CAfI,EAgBPA,GAAG,CAAC,EAAD,CAhBI,CAAT;AAmBA,SAAKK,SAAL,GAAiB,EAAjB;;AAEA,SAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvB,WAAKG,SAAL,CAAeH,CAAf,cAAuBI,IAAI,CAACC,KAAL,CAAW,KAAKH,CAAL,CAAOF,CAAP,IAAY,GAAvB,IAA8B,GAArD;AACD;;AAED,SAAKM,UAAL,GAAkB,CAChB,SADgB,EAEhB,SAFgB,EAGhB,SAHgB,EAIhB,SAJgB,EAKhB,SALgB,EAMhB,SANgB,EAOhB,SAPgB,EAQhB,SARgB,EAShB,SATgB,EAUhB,SAVgB,EAWhB,SAXgB,EAYhB,SAZgB,EAahB,SAbgB,EAchB,SAdgB,EAehB,SAfgB,EAgBhB,SAhBgB,CAAlB;AAkBA,SAAKC,MAAL,GAAc;AACZN,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADS;AAEZC,MAAAA,CAAC,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAFS;AAGZM,MAAAA,IAAI,EAAE;AAHM,KAAd;AAMA,SAAKC,MAAL,GAAc;AACZR,MAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADS;AAEZC,MAAAA,CAAC,EAAE,CAAC,EAAD,EAAK,CAAL,EAAQ,EAAR,EAAY,CAAZ,CAFS;AAGZM,MAAAA,IAAI,EAAE;AAHM,KAAd;AAKD;;AACDE,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACS,IADT,iBAGG,CACC;AACEF,MAAAA,IAAI,EAAE,SADR;AAEEP,MAAAA,CAAC,EAAE,KAAKM,MAFV;AAGEL,MAAAA,CAAC,EAAE,KAAKO;AAHV,KADD,CAHH,CADF;AAaD;;AA5EoC;AA+EvC,eAAed,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nexport class ELFPlot extends Component {\n  constructor(props) {\n    super(props);\n    var lcs = this.props.data;\n    var i;\n\n    this.x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n    this.y = [\n      lcs[0],\n      lcs[1],\n      lcs[2],\n      lcs[3],\n      lcs[4],\n      lcs[5],\n      lcs[6],\n      lcs[7],\n      lcs[8],\n      lcs[9],\n      lcs[10],\n      lcs[11],\n      lcs[12],\n      lcs[13],\n      lcs[14],\n      lcs[15]\n    ];\n\n    this.y_rounded = [];\n\n    for (i = 0; i < 16; i++) {\n      this.y_rounded[i] = `${Math.round(this.y[i] * 100) / 100}`;\n    }\n\n    this.bar_colors = [\n      \"#b45c60\",\n      \"#cb7761\",\n      \"#cb824b\",\n      \"#d7ad67\",\n      \"#ac9a5d\",\n      \"#919E60\",\n      \"#678B5F\",\n      \"#62B08F\",\n      \"#7CBABA\",\n      \"#2C797D\",\n      \"#54778C\",\n      \"#7189B1\",\n      \"#988CA9\",\n      \"#735876\",\n      \"#8F6682\",\n      \"#B97B8E\"\n    ];\n    this.trace1 = {\n      x: [1, 2, 3, 4],\n      y: [10, 15, 13, 17],\n      type: \"scatter\"\n    };\n\n    this.trace2 = {\n      x: [1, 2, 3, 4],\n      y: [16, 5, 11, 9],\n      type: \"scatter\"\n    };\n  }\n  render() {\n    return (\n      <Plot>\n        title={null}\n        data= data=\n        {[\n          {\n            type: \"scatter\",\n            x: this.trace1,\n            y: this.trace2\n          }\n        ]}\n      </Plot>\n    );\n  }\n}\n\nexport default ELFPlot;\n"]},"metadata":{},"sourceType":"module"}