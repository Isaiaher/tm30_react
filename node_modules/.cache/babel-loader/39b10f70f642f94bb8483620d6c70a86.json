{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/CVGPlot.jsx\";\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nexport class CVGPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.xtest = this.props.xtest;\n    this.xtest.push(this.xtest[0]);\n    this.ytest = this.props.ytest;\n    this.ytest.push(this.ytest[0]);\n    this.xref = this.props.xref;\n    this.xref.push(this.xref[0]);\n    this.yref = this.props.yref;\n    this.yref.push(this.yref[0]); //console.log(this.xref);\n    //console.log(this.yref);\n    //image_filename = 'my-image.png'\n    //encoded_image = base64.b64encode(open(image_filename, 'rb').read())\n\n    const colors = [\"#b45c60\", \"#cb7761\", \"#cb824b\", \"#d7ad67\", \"#ac9a5d\", \"#919E60\", \"#678B5F\", \"#62B08F\", \"#7CBABA\", \"#2C797D\", \"#54778C\", \"#7189B1\", \"#988CA9\", \"#735876\", \"#8F6682\", \"#B97B8E\"];\n    var i;\n    this.arrows = [];\n    var i_arrow;\n\n    for (i = 0; i < 16; i++) {\n      i_arrow = {\n        x: this.xtest[i],\n        y: this.ytest[i],\n        xref: \"x\",\n        yref: \"y\",\n        text: \"\",\n        showarrow: true,\n        arrowhead: 2,\n        axref: \"x\",\n        ayref: \"y\",\n        ax: this.xref[i],\n        ay: this.yref[i],\n        arrowcolor: colors[i]\n      };\n      this.arrows.push(i_arrow);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Plot, {\n      data: [{\n        name: \"Test\",\n        x: this.xtest,\n        y: this.ytest,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"red\"\n        }\n      }, {\n        name: \"Reference\",\n        x: this.xref,\n        y: this.yref,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"black\"\n        }\n      }],\n      layout: {\n        width: 500,\n        height: 500,\n        margin: {\n          l: 60,\n          r: 10,\n          b: 45,\n          t: 10,\n          pad: 4\n        },\n        xaxis: {\n          //visible: false,\n          range: [-1.5, 1.5],\n          title: {\n            text: \"\" //showticklabels: false\n\n          }\n        },\n        yaxis: {\n          //visible: false,\n          range: [-2, 2],\n          title: {\n            text: \"\"\n          },\n          tickformat: \"\" //showticklabels: false\n\n        },\n        images: [{\n          source: \"http://localhost:8000/CVGbackground.png\",\n          xref: \"x\",\n          yref: \"y\",\n          x: -1.5,\n          y: 1.5,\n          sizex: 3,\n          sizey: 6,\n          sizing: \"contain\",\n          layer: \"below\"\n        }],\n        annotations: [{\n          x: this.xtest[0],\n          y: this.ytest[0],\n          xref: \"x\",\n          yref: \"y\",\n          text: \"\",\n          showarrow: true,\n          arrowhead: 2,\n          axref: \"x\",\n          ayref: \"y\",\n          ax: this.xref[0],\n          ay: this.yref[0],\n          arrowcolor: \"black\"\n        }]\n      },\n      config: {\n        displayModeBar: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default CVGPlot;","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/CVGPlot.jsx"],"names":["React","Component","Plot","CVGPlot","constructor","props","xtest","push","ytest","xref","yref","colors","i","arrows","i_arrow","x","y","text","showarrow","arrowhead","axref","ayref","ax","ay","arrowcolor","render","name","type","line","shape","smoothing","mode","connectgaps","marker","color","width","height","margin","l","r","b","t","pad","xaxis","range","title","yaxis","tickformat","images","source","sizex","sizey","sizing","layer","annotations","displayModeBar"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nexport class CVGPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.xtest = this.props.xtest;\n    this.xtest.push(this.xtest[0]);\n    this.ytest = this.props.ytest;\n    this.ytest.push(this.ytest[0]);\n\n    this.xref = this.props.xref;\n    this.xref.push(this.xref[0]);\n    this.yref = this.props.yref;\n    this.yref.push(this.yref[0]);\n    //console.log(this.xref);\n    //console.log(this.yref);\n\n    //image_filename = 'my-image.png'\n    //encoded_image = base64.b64encode(open(image_filename, 'rb').read())\n\n    const colors = [\n      \"#b45c60\",\n      \"#cb7761\",\n      \"#cb824b\",\n      \"#d7ad67\",\n      \"#ac9a5d\",\n      \"#919E60\",\n      \"#678B5F\",\n      \"#62B08F\",\n      \"#7CBABA\",\n      \"#2C797D\",\n      \"#54778C\",\n      \"#7189B1\",\n      \"#988CA9\",\n      \"#735876\",\n      \"#8F6682\",\n      \"#B97B8E\"\n    ];\n\n    var i;\n    this.arrows = [];\n    var i_arrow;\n    for (i = 0; i < 16; i++) {\n      i_arrow = {\n        x: this.xtest[i],\n        y: this.ytest[i],\n        xref: \"x\",\n        yref: \"y\",\n        text: \"\",\n        showarrow: true,\n        arrowhead: 2,\n        axref: \"x\",\n        ayref: \"y\",\n        ax: this.xref[i],\n        ay: this.yref[i],\n        arrowcolor: colors[i]\n      };\n      this.arrows.push(i_arrow);\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Plot\n          data={[\n            {\n              name: \"Test\",\n              x: this.xtest,\n              y: this.ytest,\n              type: \"scatter\",\n              line: { shape: \"spline\", smoothing: 1.3 },\n              mode: \"lines+points\",\n              connectgaps: true,\n              marker: { color: \"red\" }\n            },\n            {\n              name: \"Reference\",\n              x: this.xref,\n              y: this.yref,\n              type: \"scatter\",\n              line: { shape: \"spline\", smoothing: 1.3 },\n              mode: \"lines+points\",\n              connectgaps: true,\n              marker: { color: \"black\" }\n            }\n          ]}\n          layout={{\n            width: 500,\n            height: 500,\n            margin: {\n              l: 60,\n              r: 10,\n              b: 45,\n              t: 10,\n              pad: 4\n            },\n            xaxis: {\n              //visible: false,\n              range: [-1.5, 1.5],\n              title: {\n                text: \"\"\n              }\n              //showticklabels: false\n            },\n            yaxis: {\n              //visible: false,\n              range: [-2, 2],\n              title: {\n                text: \"\"\n              },\n              tickformat: \"\"\n              //showticklabels: false\n            },\n            images: [\n              {\n                source: \"http://localhost:8000/CVGbackground.png\",\n                xref: \"x\",\n                yref: \"y\",\n                x: -1.5,\n                y: 1.5,\n                sizex: 3,\n                sizey: 6,\n                sizing: \"contain\",\n                layer: \"below\"\n              }\n            ],\n            annotations: [\n              {\n                x: this.xtest[0],\n                y: this.ytest[0],\n                xref: \"x\",\n                yref: \"y\",\n                text: \"\",\n                showarrow: true,\n                arrowhead: 2,\n                axref: \"x\",\n                ayref: \"y\",\n                ax: this.xref[0],\n                ay: this.yref[0],\n                arrowcolor: \"black\"\n              }\n            ]\n          }}\n          config={{ displayModeBar: false }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CVGPlot;\n"]},"metadata":{},"sourceType":"module"}