{"ast":null,"code":"// Inject fetch polyfill if fetch is unsuported by the user's browser\nif (!window.fetch) {\n  const fetch = require('whatwg-fetch');\n} // eslint-disable-line\n\n/**\r\n * Represents a the base FETCH configuration settings common to most GET requests.\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch for more options.\r\n * @param {string} method - The HTTP method used to communicate to the API being requested.\r\n * @param {string} credentials - This will send the authorization credentials for the user requesting the resource.\r\n * @param {Object} headers - This HTTP Headers object that you want to send along with the request.\r\n * */\n\n\nconst baseOptions = {\n  method: 'GET',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n/**\r\n * This method is used to resolve the first promise that the FETCH method returns. Common things\r\n * that this method is used for: resolving successful/bad requests, resolving HTTP Status Codes, raising custom errors.\r\n * @param {Object} response - An HTTP response object. Could be undefined or null if the request was aborted for any reason.\r\n * @return {Object} - The Promise object for the HTTP call\r\n * */\n\nfunction statusHelper(response) {\n  if (response) {\n    if (response.status >= 200 && response.status < 300) {\n      return Promise.resolve(response);\n    }\n\n    return Promise.reject(new Error(response.statusText));\n  }\n\n  return Promise.reject(new Error('Unable to complete data request.'));\n}\n/**\r\n * This is a wrapper function around the FETCH Promise. If additional processing is needed for the HTTP response, it should be done here.\r\n * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n * @param {Object} options - The FETCH method HTTP options.\r\n * @return {void} - No return value\r\n * */\n\n\nfunction callFetch(url, options) {\n  return fetch(url, options).then(statusHelper).then(response => response.json()).catch(error => {\n    throw error;\n  }).then(data => data);\n}\n/**\r\n * This is a collection of shortcut methods you can use to call HTTP endpoints. By default you can supply the basic method options\r\n * and get basic operations for each type. This should be sufficient for most calls. If you need to supply overridden options or\r\n * you would like to change the base options, each convienence method has a overridden options parameter for you to use.\r\n *\r\n * There is also a convience method built into this object to do query string construction if you need it.\r\n * */\n\n\nconst api = {\n  /**\r\n   * This is a basic GET method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\n  GET(url, overriddenOptions = {}) {\n    return callFetch(url, Object.assign({}, baseOptions, overriddenOptions));\n  },\n\n  /**\r\n   * This is a basic POST method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\n  POST(url, payload, overriddenOptions = {}) {\n    return callFetch(url, Object.assign({}, baseOptions, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    }, overriddenOptions));\n  },\n\n  /**\r\n   * This is a basic PUT method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\n  PUT(url, payload, overriddenOptions = {}) {\n    return callFetch(url, Object.assign({}, baseOptions, {\n      method: 'PUT',\n      body: JSON.stringify(payload)\n    }, overriddenOptions));\n  },\n\n  /**\r\n   * This is a basic PATCH method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\n  PATCH(url, payload, overriddenOptions = {}) {\n    return callFetch(url, Object.assign({}, baseOptions, {\n      method: 'PATCH',\n      body: JSON.stringify(payload)\n    }, overriddenOptions));\n  },\n\n  /**\r\n   * This is a basic DELETE method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\n  DELETE(url, overriddenOptions = {}) {\n    return callFetch(url, Object.assign({}, baseOptions, {\n      method: 'DELETE'\n    }, overriddenOptions));\n  },\n\n  /**\r\n   * This method is used to construct a query string property for an URL. It takes in an a object of values and turns it into a query string.\r\n   * @param {Object} obj - A one-level deep object that you want to turn into a query string. The key names will become the exact query string parameter names.\r\n   * @return {string} - The query string portion of the URL made from the object that is passed in.\r\n   * */\n  toQueryString(obj) {\n    const parts = [];\n    Object.keys(obj).forEach(key => {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        parts.push(\"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(obj[key])));\n      }\n    });\n    return parts.length > 0 ? parts.join('&') : '';\n  }\n\n};\nexport default api;","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Documents/ies_tm30_web_app/src/lib/restApiHelper.js"],"names":["window","fetch","require","baseOptions","method","credentials","headers","statusHelper","response","status","Promise","resolve","reject","Error","statusText","callFetch","url","options","then","json","catch","error","data","api","GET","overriddenOptions","Object","assign","POST","payload","body","JSON","stringify","PUT","PATCH","DELETE","toQueryString","obj","parts","keys","forEach","key","prototype","hasOwnProperty","call","push","encodeURIComponent","length","join"],"mappings":"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","sourcesContent":["// Inject fetch polyfill if fetch is unsuported by the user's browser\r\nif (!window.fetch) { const fetch = require('whatwg-fetch'); }  // eslint-disable-line\r\n\r\n/**\r\n * Represents a the base FETCH configuration settings common to most GET requests.\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch for more options.\r\n * @param {string} method - The HTTP method used to communicate to the API being requested.\r\n * @param {string} credentials - This will send the authorization credentials for the user requesting the resource.\r\n * @param {Object} headers - This HTTP Headers object that you want to send along with the request.\r\n * */\r\nconst baseOptions = {\r\n  method: 'GET',\r\n  credentials: 'include',\r\n  headers: { 'Content-Type': 'application/json' },\r\n};\r\n\r\n/**\r\n * This method is used to resolve the first promise that the FETCH method returns. Common things\r\n * that this method is used for: resolving successful/bad requests, resolving HTTP Status Codes, raising custom errors.\r\n * @param {Object} response - An HTTP response object. Could be undefined or null if the request was aborted for any reason.\r\n * @return {Object} - The Promise object for the HTTP call\r\n * */\r\nfunction statusHelper(response) {\r\n  if (response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return Promise.resolve(response);\r\n    }\r\n    return Promise.reject(new Error(response.statusText));\r\n  }\r\n\r\n  return Promise.reject(new Error('Unable to complete data request.'));\r\n}\r\n\r\n/**\r\n * This is a wrapper function around the FETCH Promise. If additional processing is needed for the HTTP response, it should be done here.\r\n * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n * @param {Object} options - The FETCH method HTTP options.\r\n * @return {void} - No return value\r\n * */\r\nfunction callFetch(url, options) {\r\n  return fetch(url, options)\r\n    .then(statusHelper)\r\n    .then(response => response.json())\r\n    .catch((error) => {\r\n      throw error;\r\n    })\r\n    .then(data => data);\r\n}\r\n\r\n/**\r\n * This is a collection of shortcut methods you can use to call HTTP endpoints. By default you can supply the basic method options\r\n * and get basic operations for each type. This should be sufficient for most calls. If you need to supply overridden options or\r\n * you would like to change the base options, each convienence method has a overridden options parameter for you to use.\r\n *\r\n * There is also a convience method built into this object to do query string construction if you need it.\r\n * */\r\nconst api = {\r\n  /**\r\n   * This is a basic GET method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\r\n  GET(url, overriddenOptions = {}) {\r\n    return callFetch(url, Object.assign({}, baseOptions, overriddenOptions));\r\n  },\r\n\r\n  /**\r\n   * This is a basic POST method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\r\n  POST(url, payload, overriddenOptions = {}) {\r\n    return callFetch(url, Object.assign({}, baseOptions, { method: 'POST', body: JSON.stringify(payload) }, overriddenOptions));\r\n  },\r\n\r\n  /**\r\n   * This is a basic PUT method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\r\n  PUT(url, payload, overriddenOptions = {}) {\r\n    return callFetch(url, Object.assign({}, baseOptions, { method: 'PUT', body: JSON.stringify(payload) }, overriddenOptions));\r\n  },\r\n\r\n  /**\r\n   * This is a basic PATCH method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\r\n  PATCH(url, payload, overriddenOptions = {}) {\r\n    return callFetch(url, Object.assign({}, baseOptions, { method: 'PATCH', body: JSON.stringify(payload) }, overriddenOptions));\r\n  },\r\n\r\n  /**\r\n   * This is a basic DELETE method call. It inherits the base options from this library and can be overridden to suit your needs.\r\n   * @param {string} url - The URL used in the method request. Use this in combination with the toQueryString method.\r\n   * @param {Object} payload - Used as the body payload for the method. It will be wrapped in a JSON.stringify() call.\r\n   * @param {Object} [overriddenOptions] - Optional. Used to override the base options for the method. Any options passed in will override the defaults.\r\n   * @return {Object} - The response object from the HTTP call. It will be in JSON format if successful.\r\n   * */\r\n  DELETE(url, overriddenOptions = {}) {\r\n    return callFetch(url, Object.assign({}, baseOptions, { method: 'DELETE' }, overriddenOptions));\r\n  },\r\n\r\n  /**\r\n   * This method is used to construct a query string property for an URL. It takes in an a object of values and turns it into a query string.\r\n   * @param {Object} obj - A one-level deep object that you want to turn into a query string. The key names will become the exact query string parameter names.\r\n   * @return {string} - The query string portion of the URL made from the object that is passed in.\r\n   * */\r\n  toQueryString(obj) {\r\n    const parts = [];\r\n    Object.keys(obj).forEach((key) => {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        parts.push(`${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`);\r\n      }\r\n    });\r\n    return parts.length > 0 ? parts.join('&') : '';\r\n  }\r\n};\r\n\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}