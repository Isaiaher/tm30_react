import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import elementType from 'prop-types-extra/lib/elementType';

import Loader from '../Loader';

class LoaderWrapper extends React.Component {
  render() {
    const {
      show,
      children,
      className,
      loadingComponent: Loading,
      message,
    } = this.props;

    if (!show) {
      return children;
    }

    if (Loading) {
      return (<Loading />);
    }

    const _className = classnames('pnnl-loader-wrapper', className);

    return (
      <div className={_className}>
        <h2><Loader show color="silver" /> {message}</h2>
      </div>
    );
  }
}

LoaderWrapper.propTypes = {
  /**
     * Set the visibility of the wrapper. When `show` is false, it will display the children component(s)
     */
  show: PropTypes.bool,

  /**
     * Used to add additional CSS classes to the root of the progress bar wrapper.
     * */
  className: PropTypes.string,

  /**
     * A `<Loader/>` component to used for the display when `show` is true.
     */
  loadingComponent: elementType,

  /**
     * A loading message used by the component to display while it is being shown. Does not apply if a `loading` element is provided.
     */
  message: PropTypes.string,

  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node,
  ]).isRequired,
};

LoaderWrapper.defaultProps = {
  show: false,
  message: 'Loading...',
  className: null,
  loadingComponent: null,
};

export default LoaderWrapper;
