{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx\";\n\n/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\n/**\n * Paste Class\n */\n\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleSPDChange = event => {\n      this.setState({\n        spd_paste: event.target.value\n      }, function () {\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStartChange = event => {\n      this.setState({\n        wavelength_start: event.target.value\n      }, function () {\n        console.log(\"setState completed\", this.state);\n\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleEndChange = event => {\n      this.setState({\n        wavelength_end: event.target.value\n      }, function () {\n        console.log(\"setState completed\", this.state);\n\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStepChange = event => {\n      this.setState({\n        step: event.target.value\n      }, function () {\n        console.log(\"setState completed\", this.state);\n\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.state = {\n      spd_paste: \"\",\n      //the SPD string inputed to the text area\n      spd_array: [],\n      //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false,\n      //Boolean to control the loader\n      data: [],\n      //Data that is returned from the C code\n      wavelength_start: 380,\n      //The starting wavelength with default value of 380\n      wavelength_end: 780,\n      //The ending wavelength with default value of 780\n      step: 1,\n      //The step size with default value of 1\n      disabled: true //Boolean to control if the button is disabled or not. Default is that it is.\n\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n  }\n  /**\n   * Start of Handler functions-----------------------------------\n   */\n\n  /**\n   * Function that handles when the SPD paste text area is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n\n\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (false //this.state.wavelength_start !== 380 ||\n    //this.state.wavelength_end !== 780 ||\n    //this.state.step !== 1\n    ) {\n        alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n      } else {\n      this.setState({\n        wavelength_array: []\n      }, function () {\n        var i;\n        var array_i = 0;\n\n        for (i = this.state.wavelength_start; i <= this.state.wavelength_end; i += this.state.step) {\n          this.state.wavelength_array[array_i] = i;\n          array_i++;\n        }\n\n        console.log(this.state.wavelength_array);\n      });\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n\n      this.setState({\n        spd_array: this.state.spd_paste.split(\"\\n\")\n      }, function () {\n        console.log(this.state.spd_array.length, \" \", this.state.wavelength_array.length);\n\n        if (this.state.spd_array.length === this.state.wavelength_array.length) {\n          this.setState({\n            loading: true\n          }, () => {\n            axios.defaults.headers.common = {};\n            axios.defaults.headers.common.accept = \"application/json\";\n            axios.post(\"/tm30Paste\", {\n              spd: this.state.spd_array,\n              wavelength: this.state.wavelength_array\n            }).then(res => {\n              return res.data;\n            }).then(data => {\n              /**\n               * Set the state that loading is false,\n               * data is the json from the C code\n               * and tableReady is true\n               *\n               * TODO: TableReady is no longer used. Could take out.\n               */\n              this.setState({\n                loading: false,\n                data: data.data,\n                tableReady: true\n              });\n              /**\n               * Used later to store the data in cache\n               * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n               */\n\n              /**\n               * Pushes the data to the Reports page and redirects to that page\n               */\n\n              this.props.history.push({\n                pathname: \"/Report\",\n                state: {\n                  data: this.state.data\n                }\n              });\n            });\n          });\n        } else {\n          alert(\"SPD size does not match interval size\");\n        }\n      });\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n\n\n  render() {\n    var loading = this.state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Option C\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Start Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.handleStartChange,\n      defaultValue: 380,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"End Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.handleEndChange,\n      defaultValue: 780,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Interval (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.handleStepChange,\n      defaultValue: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\",\n        width: \"5%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Paste in your SPD\"), React.createElement(\"textarea\", {\n      rows: \"5\",\n      cols: \"50\",\n      onChange: this.handleSPDChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \" \", \"Calculating Results \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), \" \", React.createElement(LoadingSpinner, {\n      color: \"copper\",\n      size: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), \" \")) : React.createElement(Button, {\n      bsSize: \"sm\",\n      onClick: this.handleSubmit,\n      disabled: this.state.disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Calculate\")));\n  }\n\n}\n/**\n * Export withRouter so we can jump to the Reports page\n */\n\nexport default withRouter(Paste);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx"],"names":["React","Component","Button","withRouter","LoadingSpinner","axios","Paste","constructor","props","handleSPDChange","event","setState","spd_paste","target","value","state","step","wavelength_end","wavelength_start","disabled","handleStartChange","console","log","handleEndChange","handleStepChange","spd_array","wavelength_array","loading","data","handleSubmit","bind","alert","i","array_i","split","length","defaults","headers","common","accept","post","spd","wavelength","then","res","tableReady","history","push","pathname","render","position","display","width"],"mappings":"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","sourcesContent":["/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\n\n/**\n * Paste Class\n */\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      spd_paste: \"\", //the SPD string inputed to the text area\n      spd_array: [], //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false, //Boolean to control the loader\n      data: [], //Data that is returned from the C code\n      wavelength_start: 380, //The starting wavelength with default value of 380\n      wavelength_end: 780, //The ending wavelength with default value of 780\n      step: 1, //The step size with default value of 1\n      disabled: true //Boolean to control if the button is disabled or not. Default is that it is.\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n  }\n\n  /**\n   * Start of Handler functions-----------------------------------\n   */\n\n  /**\n   * Function that handles when the SPD paste text area is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleSPDChange = event => {\n    this.setState({ spd_paste: event.target.value }, function() {\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the Start Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStartChange = event => {\n    this.setState({ wavelength_start: event.target.value }, function() {\n      console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleEndChange = event => {\n    this.setState({ wavelength_end: event.target.value }, function() {\n      console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStepChange = event => {\n    this.setState({ step: event.target.value }, function() {\n      console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (\n      false\n      //this.state.wavelength_start !== 380 ||\n      //this.state.wavelength_end !== 780 ||\n      //this.state.step !== 1\n    ) {\n      alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n    } else {\n      this.setState(\n        {\n          wavelength_array: []\n        },\n        function() {\n          var i;\n          var array_i = 0;\n          for (\n            i = this.state.wavelength_start;\n            i <= this.state.wavelength_end;\n            i += this.state.step\n          ) {\n            this.state.wavelength_array[array_i] = i;\n            array_i++;\n          }\n          console.log(this.state.wavelength_array);\n        }\n      );\n\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n      this.setState(\n        { spd_array: this.state.spd_paste.split(\"\\n\") },\n        function() {\n          console.log(\n            this.state.spd_array.length,\n            \" \",\n            this.state.wavelength_array.length\n          );\n          if (\n            this.state.spd_array.length === this.state.wavelength_array.length\n          ) {\n            this.setState({ loading: true }, () => {\n              axios.defaults.headers.common = {};\n              axios.defaults.headers.common.accept = \"application/json\";\n              axios\n                .post(\"/tm30Paste\", {\n                  spd: this.state.spd_array,\n                  wavelength: this.state.wavelength_array\n                })\n                .then(res => {\n                  return res.data;\n                })\n                .then(data => {\n                  /**\n                   * Set the state that loading is false,\n                   * data is the json from the C code\n                   * and tableReady is true\n                   *\n                   * TODO: TableReady is no longer used. Could take out.\n                   */\n                  this.setState({\n                    loading: false,\n                    data: data.data,\n                    tableReady: true\n                  });\n                  /**\n                   * Used later to store the data in cache\n                   * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n                   */\n\n                  /**\n                   * Pushes the data to the Reports page and redirects to that page\n                   */\n                  this.props.history.push({\n                    pathname: \"/Report\",\n                    state: {\n                      data: this.state.data\n                    }\n                  });\n                });\n            });\n          } else {\n            alert(\"SPD size does not match interval size\");\n          }\n        }\n      );\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n  render() {\n    var loading = this.state.loading;\n    return (\n      <div>\n        <h2>Option C</h2>\n        <form>\n          <div style={{ position: \"inherit\", display: \"inline-block\" }}>\n            <label>\n              Start Wavelength (nm):\n              <br />\n              <input\n                onChange={this.handleStartChange}\n                defaultValue={380}\n              ></input>\n            </label>\n            <br />\n            <label>\n              End Wavelength (nm):\n              <br />\n              <input onChange={this.handleEndChange} defaultValue={780}></input>\n            </label>\n            <br />\n            <label>\n              Interval (nm):\n              <br />\n              <input onChange={this.handleStepChange} defaultValue={1}></input>\n            </label>\n          </div>\n          <div\n            style={{\n              position: \"inherit\",\n              display: \"inline-block\",\n              width: \"5%\"\n            }}\n          ></div>\n          <div style={{ position: \"inherit\", display: \"inline-block\" }}>\n            <h3>Paste in your SPD</h3>\n            <textarea\n              rows=\"5\"\n              cols=\"50\"\n              onChange={this.handleSPDChange}\n            ></textarea>\n          </div>\n          <br />\n          {loading ? (\n            <div>\n              <label>\n                {\" \"}\n                Calculating Results <br />{\" \"}\n                <LoadingSpinner color=\"copper\" size={6} />{\" \"}\n              </label>\n            </div>\n          ) : (\n            <Button\n              bsSize=\"sm\"\n              onClick={this.handleSubmit}\n              disabled={this.state.disabled}\n            >\n              Calculate\n            </Button>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n\n/**\n * Export withRouter so we can jump to the Reports page\n */\nexport default withRouter(Paste);\n"]},"metadata":{},"sourceType":"module"}