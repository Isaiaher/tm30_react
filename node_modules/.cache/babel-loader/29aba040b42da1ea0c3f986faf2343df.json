{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/Plots/CVGPlot.jsx\";\n\n/**\n * Color Vector Graph\n *\n * A component for the Color Vector Graph specified in the Excel calculator.\n * This graph is fairly extensive and has a lot of moving parts.\n *\n * In it's basic form it is a scatter plot that creates a circular ploygon with the data\n * from (path_x Test, path_y Test) points and (path_x Ref, path_y Ref) points to create two\n * different circles.\n *\n * We then create different color vectors pointing from each Reference point to the Test Point.\n * The Colors are just for aesthetic purposes and are not a standard. However, they are the same\n * colors in the same odrder as the ones from \"Numerical Results\" when we colors the huebins.\n *\n * From there we create 5 White Reference circles that are -20%, -10%, 0%, +10%, and +20% of\n * the unit circle.\n *\n * Then we overlay the Huebin lines by using some simple geometry and play the huebin labels\n * a little further out than the white reference cirlces\n *\n * Finally, we position the numerical data in all four corners of the graph\n *\n * DONE - Create the ability to turn off the Huebin Labels, Huebin Dividers, and Chroma Isolines. All seperate functionality, mix and match.\n * DONE (Cont.) - Make the options stored in redux store\n * TODO - Put the options putton within the graph on the pop up bar.\n *\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport gear from \"pnnl-react-core/lib/Icon\";\n/**\n * CVG Plot Class\n */\n\nexport class CVGPlot extends Component {\n  /**\n   * Very extensive Constructor method. A lot of data is being used in the\n   * graph and some of it has to be rounded, other has to be calculated such\n   * as the huebin lines and the white reference circles.\n   * IMPORTANT - there is a prop called \"small\". It is a boolean to differentiate\n   * the \"Basic Results\" page CVG graph from the \"Graphical Results\" CVG graph.\n   * The Basic Results CVG graph is larger thus it is not needed to specify what\n   * small is, however, you need to specify small as {true} in the Graphical Results page.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.clearChromaIsolines = () => {\n      console.log(\"Clearing isolines\");\n      this.minus_20p_x = []; // -20% Ref Circle\n\n      this.minus_20p_y = [];\n      this.minus_10p_x = []; // -10% Ref Circle\n\n      this.minus_10p_y = [];\n      this.even_x = []; // 0% Ref Circle\n\n      this.even_y = [];\n      this.plus_10p_x = []; // +10% Ref Circle\n\n      this.plus_10p_y = [];\n      this.plus_20p_x = []; // +20% Ref Circle\n\n      this.plus_20p_y = [];\n      this.chroma_isolines_labels = [];\n    };\n\n    this.createBinLines = () => {\n      this.bin_lines = [{\n        x: [-1.5, 1.5],\n        y: [0, 0],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [-1.39, 1.39],\n        y: [-0.57, 0.57],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [-1.06, 1.06],\n        y: [-1.06, 1.06],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [-0.57, 0.57],\n        y: [-1.39, 1.39],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [0, 0],\n        y: [-1.5, 1.5],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [0.57, -0.57],\n        y: [-1.39, 1.39],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [1.06, -1.06],\n        y: [-1.06, 1.06],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [1.39, -1.39],\n        y: [-0.57, 0.57],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: {\n          color: \"grey\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }];\n    };\n\n    this.createBinNumbers = () => {\n      this.bin_numbers = [];\n      var theta = 11.5;\n      var i;\n\n      for (i = 1; i <= 16; i++) {\n        var x = 1.35 * Math.cos(theta * Math.PI / 180);\n        var y = 1.35 * Math.sin(theta * Math.PI / 180);\n        theta += 22.5;\n        this.bin_numbers[i - 1] = {\n          x: x,\n          y: y,\n          xref: \"x\",\n          yref: \"y\",\n          text: \"\".concat(i),\n          font: {\n            size: 12,\n            color: \"grey\"\n          },\n          ax: 0,\n          ay: 0\n        };\n      }\n    };\n\n    this.createChromaIsolines = () => {\n      var theta;\n      var i;\n\n      for (theta = 1; theta <= 361; theta++) {\n        // -20% Ref Circle\n        this.minus_20p_x[theta] = 0.8 * Math.cos(theta * Math.PI / 180);\n        this.minus_20p_y[theta] = 0.8 * Math.sin(theta * Math.PI / 180); // -10% Ref Circle\n\n        this.minus_10p_x[theta] = 0.9 * Math.cos(theta * Math.PI / 180);\n        this.minus_10p_y[theta] = 0.9 * Math.sin(theta * Math.PI / 180); // 0% Ref Circle\n\n        this.even_x[theta] = Math.cos(theta * Math.PI / 180);\n        this.even_y[theta] = Math.sin(theta * Math.PI / 180); // +10% Ref Circle\n\n        this.plus_10p_x[theta] = 1.1 * Math.cos(theta * Math.PI / 180);\n        this.plus_10p_y[theta] = 1.1 * Math.sin(theta * Math.PI / 180); //+20% Ref Circle\n\n        this.plus_20p_x[theta] = 1.2 * Math.cos(theta * Math.PI / 180);\n        this.plus_20p_y[theta] = 1.2 * Math.sin(theta * Math.PI / 180);\n      }\n\n      this.chroma_isolines_labels = [{\n        x: -0.15,\n        y: -0.7,\n        xref: \"x\",\n        yref: \"y\",\n        text: \"-20%\",\n        font: {\n          size: 11,\n          color: \"white\"\n        },\n        ax: 0,\n        ay: 0\n      }, {\n        x: -0.25,\n        y: -1.11,\n        xref: \"x\",\n        yref: \"y\",\n        text: \"+20%\",\n        font: {\n          size: 11,\n          color: \"white\"\n        },\n        ax: 0,\n        ay: 0\n      }];\n    };\n\n    this.state = {};\n    this.xtest = this.props.xtest; //x tests values\n\n    this.xtest.push(this.xtest[0]); //Make it completely round\n\n    this.ytest = this.props.ytest; //y tests values\n\n    this.ytest.push(this.ytest[0]); //Make it completely round\n\n    this.xref = this.props.xref; //x Ref values\n\n    this.xref.push(this.xref[0]); //Make it completely round\n\n    this.yref = this.props.yref; //x Ref values\n\n    this.yref.push(this.yref[0]); //Make it completely round\n\n    /**\n     * Rounding the information on the graph\n     */\n\n    this.rf = Math.round(this.props.rf);\n    this.rg = Math.round(this.props.rg);\n    this.cct = Math.round(this.props.cct);\n    this.duv = Math.round(this.props.duv * 10000) / 10000;\n    this.small_bool = this.props.small;\n    /**\n     * Determine if we are dealing with with the small version (Graphical Page)\n     * or the Bigger (Basic Results) Plot\n     */\n\n    if (this.small_bool) {\n      this.arrow_size = 2;\n      this.x_size = 325;\n      this.y_size = 325;\n      this.rg_label = [1.25, 1.2];\n      this.rf_label = [-1.25, 1.2];\n      this.duv_label = [1.1, -1.25];\n      this.cct_label = [-1.1, -1.25];\n      this.style = {\n        width: 325,\n        height: 325\n      };\n      this.small_style = {\n        position: \"inherit\",\n        display: \"inline-block\",\n        padding: \"50 50 50 50\"\n      };\n    } else if (this.props.active === \"Intermediate\") {\n      this.arrow_size = 3;\n      this.style = {\n        width: \"100%\"\n      };\n      this.x_size = 650;\n      this.y_size = 650;\n      this.rg_label = [1.35, 1.3];\n      this.rf_label = [-1.35, 1.3];\n      this.duv_label = [1.2, -1.25];\n      this.cct_label = [-1.2, -1.25];\n    } else {\n      this.arrow_size = 3;\n      this.style = {\n        width: \"100%\"\n      };\n      this.x_size = 800;\n      this.y_size = 800;\n      this.rg_label = [1.35, 1.3];\n      this.rf_label = [-1.35, 1.3];\n      this.duv_label = [1.2, -1.25];\n      this.cct_label = [-1.2, -1.25];\n    }\n    /**\n     * Setting up the Reference Circles\n     */\n\n\n    this.minus_20p_x = []; // -20% Ref Circle\n\n    this.minus_20p_y = [];\n    this.minus_10p_x = []; // -10% Ref Circle\n\n    this.minus_10p_y = [];\n    this.even_x = []; // 0% Ref Circle\n\n    this.even_y = [];\n    this.plus_10p_x = []; // +10% Ref Circle\n\n    this.plus_10p_y = [];\n    this.plus_20p_x = []; // +20% Ref Circle\n\n    this.plus_20p_y = [];\n    this.bin_lines = [];\n    this.chroma_isolines_labels = [];\n    this.black_x = [];\n    this.black_y = [];\n    this.icon = {\n      width: 1000,\n      path: \"m833 5l-17 108v41l-130-65 130-66c0 0 0 38 0 39 0-1 36-14 39-25 4-15-6-22-16-30-15-12-39-16-56-20-90-22-187-23-279-23-261 0-341 34-353 59 3 60 228 110 228 110-140-8-351-35-351-116 0-120 293-142 474-142 155 0 477 22 477 142 0 50-74 79-163 96z m-374 94c-58-5-99-21-99-40 0-24 65-43 144-43 79 0 143 19 143 43 0 19-42 34-98 40v216h87l-132 135-133-135h88v-216z m167 515h-136v1c16 16 31 34 46 52l84 109v54h-230v-71h124v-1c-16-17-28-32-44-51l-89-114v-51h245v72z\",\n      ascent: 850,\n      descent: -150\n    };\n    this.colors = [\"#e41a1c\", \"#377eb8\", \"#4daf4a\"];\n\n    var _theta;\n\n    for (_theta = 1; _theta <= 361; _theta++) {\n      this.black_x[_theta] = Math.cos(_theta * Math.PI / 180);\n      this.black_y[_theta] = Math.sin(_theta * Math.PI / 180);\n    }\n\n    var _i;\n\n    for (_i = 0; _i < 16; _i++) {\n      var distance = Math.sqrt(Math.pow(this.xref[_i] - this.xtest[_i], 2) + Math.pow(this.yref[_i] - this.ytest[_i], 2));\n\n      if (distance.toFixed(3) <= 0.029) {\n        if (this.xref[_i] > this.xtest[_i]) {\n          this.xref[_i] = this.xtest[_i] + 0.04;\n          this.yref[_i] = this.ytest[_i] + 0.04;\n        } else {\n          this.xref[_i] = this.xtest[_i] - 0.04;\n          this.yref[_i] = this.ytest[_i] - 0.04;\n        }\n      }\n    }\n    /**\n     * An array of the vector colors\n     */\n\n\n    const colors = [\"#e32f32\", \"#e54f4f\", \"#fa843b\", \"#feb73c\", \"#cbcb50\", \"#7fb951\", \"#44c00b\", \"#109c7b\", //8\n    \"#22bbaf\", //9\n    \"#13a2bb\", //10\n    \"#0f82c0\", //11\n    \"#3c62a8\", //12\n    \"#6d67ac\", //13\n    \"#6a4e84\", //14\n    \"#9d69a0\", //15\n    \"#a65081\" //16\n    ];\n    /**\n     * Setting up the vector arrays\n     */\n\n    this.arrows = [];\n    var i_arrow;\n\n    for (_i = 0; _i < 16; _i++) {\n      i_arrow = {\n        x: this.xtest[_i],\n        y: this.ytest[_i],\n        xref: \"x\",\n        yref: \"y\",\n        text: \"\",\n        showarrow: true,\n        arrowhead: 2,\n        arrowwidth: this.arrow_size,\n        axref: \"x\",\n        ayref: \"y\",\n        ax: this.xref[_i],\n        ay: this.yref[_i],\n        arrowcolor: colors[_i]\n      };\n      this.arrows.push(i_arrow);\n    }\n  }\n\n  /**\n   * Render function for the CVGPlot\n   */\n  render() {\n    if (this.props.bin_labels) {\n      this.createBinLines();\n    } else {\n      this.bin_lines = [];\n    }\n\n    if (this.props.bin_dividers) {\n      this.createBinNumbers();\n    } else {\n      this.bin_numbers = [];\n    }\n\n    if (this.props.chroma_isolines) {\n      console.log(\"chroma_isoline: \", this.props.chroma_isolines);\n      this.createChromaIsolines();\n    } else {\n      console.log(\"chroma_isoline: \", this.props.chroma_isolines);\n      this.clearChromaIsolines();\n    }\n\n    return React.createElement(\"div\", {\n      style: this.small_style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(Plot, {\n      useResizeHandler: true,\n      style: this.style,\n      data: [...this.bin_lines, {\n        x: [0],\n        y: [0],\n        type: \"scatter\",\n        mode: \"markers+lines\",\n        marker: {\n          size: 22,\n          width: 50,\n          color: \"white\",\n          symbol: \"circle\",\n          opacity: 0.8\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [0],\n        y: [0],\n        type: \"scatter\",\n        mode: \"markers+lines\",\n        marker: {\n          size: 30,\n          width: 50,\n          color: \"white\",\n          symbol: \"circle\",\n          opacity: 0.7\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        x: [0],\n        y: [0],\n        type: \"scatter\",\n        mode: \"markers\",\n        marker: {\n          size: 8,\n          width: 50,\n          color: \"grey\",\n          symbol: \"cross-thin-open\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        name: \"-20%\",\n        x: this.minus_20p_x,\n        y: this.minus_20p_y,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"white\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        name: \"-10%\",\n        x: this.minus_10p_x,\n        y: this.minus_10p_y,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"white\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        name: \"0%\",\n        x: this.black_x,\n        y: this.black_y,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"black\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        name: \"10%\",\n        x: this.plus_10p_x,\n        y: this.plus_10p_y,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"white\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        name: \"20%\",\n        x: this.plus_20p_x,\n        y: this.plus_20p_y,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"white\"\n        },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }, {\n        name: \"Test\",\n        x: this.xtest,\n        y: this.ytest,\n        type: \"scatter\",\n        line: {\n          shape: \"spline\",\n          smoothing: 1.3\n        },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: {\n          color: \"red\"\n        }\n      }, {\n        /*\n        name: \"Reference\",\n        x: this.xref,\n        y: this.yref,\n        type: \"scatter\",\n        line: { shape: \"spline\", smoothing: 1.3 },\n        mode: \"lines+points\",\n        connectgaps: true,\n        marker: { color: \"black\" }\n        */\n      }],\n      layout: {\n        showlegend: false,\n        autosize: true,\n        //width: this.x_size,\n        height: this.y_size,\n        margin: {\n          t: 0,\n          l: 0,\n          b: 0,\n          r: 0\n        },\n        xaxis: {\n          visible: false,\n          range: [-1.5, 1.5],\n          title: {\n            text: \"\"\n          }\n        },\n        yaxis: {\n          visible: false,\n          range: [-1.5, 1.5],\n          title: {\n            text: \"\"\n          },\n          tickformat: \"\"\n        },\n        images: [{\n          source: \"https://i.imgur.com/QkpOGSJ.png\",\n          xref: \"x\",\n          yref: \"y\",\n          x: -1.5,\n          y: 1.5,\n          sizex: 3,\n          sizey: 3,\n          sizing: \"stretch\",\n          layer: \"below\"\n        }],\n        annotations: [...this.arrows, {\n          x: this.rf_label[0],\n          y: this.rf_label[1],\n          xref: \"x\",\n          yref: \"y\",\n          text: \"<b>\".concat(this.rf, \"</b><br /><i>R</i><sub>f</sub>\"),\n          font: {\n            size: 20,\n            color: \"black\"\n          },\n          align: \"left\",\n          ax: 0,\n          ay: 0\n        }, {\n          x: this.rg_label[0],\n          y: this.rg_label[1],\n          xref: \"x\",\n          yref: \"y\",\n          text: \"<b>\".concat(this.rg, \"</b><br /><i>R</i><sub>g</sub>\"),\n          font: {\n            size: 20,\n            color: \"black\"\n          },\n          align: \"right\",\n          ax: 0,\n          ay: 0\n        }, {\n          x: this.duv_label[0],\n          y: this.duv_label[1],\n          xref: \"x\",\n          yref: \"y\",\n          text: \"<i>D</i><sub>uv</sub><br /><b>\".concat(this.duv, \"</b><br />\"),\n          font: {\n            size: 20,\n            color: \"black\"\n          },\n          align: \"right\",\n          ax: 0,\n          ay: 0\n        }, {\n          x: this.cct_label[0],\n          y: this.cct_label[1],\n          xref: \"x\",\n          yref: \"y\",\n          text: \"CCT<br><b>\".concat(this.cct, \" K</b>\"),\n          font: {\n            size: 20,\n            color: \"black\"\n          },\n          align: \"left\",\n          ax: 0,\n          ay: 0\n        }, ...this.chroma_isolines_labels, ...this.bin_numbers]\n      },\n      config: {\n        displaylogo: false,\n        modeBarButtons: [[\"toImage\"], [{\n          name: \"color toggler\",\n          icon: gear,\n          click: function (gd) {\n            console.log(\"New Icon Clicked\");\n          }\n        }]],\n        responsive: true,\n        toImageButtonOptions: {\n          format: \"png\",\n          // one of png, svg, jpeg, webp\n          filename: \"Color Vector Graph\",\n          height: 900,\n          width: 900,\n          scale: 1.5 // Multiply title/legend/axis/canvas sizes by this factor\n\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }), this.small_bool ? React.createElement(\"div\", {\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, \"Color Vector Graphic\"), \"The Color Vector Graphic (CVG) shows a normalized version of the\", \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }), \"average change in (a', b') coordinates of CAM02-UCS for the CES\", \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }), \"within each hue-angle bin. Alternative versions of the CVG are\", \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }), \"available in the CVG sheet. Elements of this graphic can be turned\", \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }), \"on or off using the menu on the Main sheet (requires recalculation).\", \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }), \"[Background is for visual orientation only]\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  bin_labels: state.dataReducers.bin_labels,\n  bin_dividers: state.dataReducers.bin_dividers,\n  chroma_isolines: state.dataReducers.chroma_isolines\n});\n\nexport default connect(mapStateToProps, {})(CVGPlot);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Report/Plots/CVGPlot.jsx"],"names":["React","Component","Plot","connect","gear","CVGPlot","constructor","props","clearChromaIsolines","console","log","minus_20p_x","minus_20p_y","minus_10p_x","minus_10p_y","even_x","even_y","plus_10p_x","plus_10p_y","plus_20p_x","plus_20p_y","chroma_isolines_labels","createBinLines","bin_lines","x","y","mode","name","line","dash","width","marker","color","showlegend","hoverinfo","createBinNumbers","bin_numbers","theta","i","Math","cos","PI","sin","xref","yref","text","font","size","ax","ay","createChromaIsolines","state","xtest","push","ytest","rf","round","rg","cct","duv","small_bool","small","arrow_size","x_size","y_size","rg_label","rf_label","duv_label","cct_label","style","height","small_style","position","display","padding","active","black_x","black_y","icon","path","ascent","descent","colors","distance","sqrt","pow","toFixed","arrows","i_arrow","showarrow","arrowhead","arrowwidth","axref","ayref","arrowcolor","render","bin_labels","bin_dividers","chroma_isolines","type","symbol","opacity","shape","smoothing","connectgaps","autosize","margin","t","l","b","r","xaxis","visible","range","title","yaxis","tickformat","images","source","sizex","sizey","sizing","layer","annotations","align","displaylogo","modeBarButtons","click","gd","responsive","toImageButtonOptions","format","filename","scale","mapStateToProps","dataReducers"],"mappings":"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","sourcesContent":["/**\n * Color Vector Graph\n *\n * A component for the Color Vector Graph specified in the Excel calculator.\n * This graph is fairly extensive and has a lot of moving parts.\n *\n * In it's basic form it is a scatter plot that creates a circular ploygon with the data\n * from (path_x Test, path_y Test) points and (path_x Ref, path_y Ref) points to create two\n * different circles.\n *\n * We then create different color vectors pointing from each Reference point to the Test Point.\n * The Colors are just for aesthetic purposes and are not a standard. However, they are the same\n * colors in the same odrder as the ones from \"Numerical Results\" when we colors the huebins.\n *\n * From there we create 5 White Reference circles that are -20%, -10%, 0%, +10%, and +20% of\n * the unit circle.\n *\n * Then we overlay the Huebin lines by using some simple geometry and play the huebin labels\n * a little further out than the white reference cirlces\n *\n * Finally, we position the numerical data in all four corners of the graph\n *\n * DONE - Create the ability to turn off the Huebin Labels, Huebin Dividers, and Chroma Isolines. All seperate functionality, mix and match.\n * DONE (Cont.) - Make the options stored in redux store\n * TODO - Put the options putton within the graph on the pop up bar.\n *\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport gear from \"pnnl-react-core/lib/Icon\";\n/**\n * CVG Plot Class\n */\nexport class CVGPlot extends Component {\n  /**\n   * Very extensive Constructor method. A lot of data is being used in the\n   * graph and some of it has to be rounded, other has to be calculated such\n   * as the huebin lines and the white reference circles.\n   * IMPORTANT - there is a prop called \"small\". It is a boolean to differentiate\n   * the \"Basic Results\" page CVG graph from the \"Graphical Results\" CVG graph.\n   * The Basic Results CVG graph is larger thus it is not needed to specify what\n   * small is, however, you need to specify small as {true} in the Graphical Results page.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.xtest = this.props.xtest; //x tests values\n    this.xtest.push(this.xtest[0]); //Make it completely round\n    this.ytest = this.props.ytest; //y tests values\n    this.ytest.push(this.ytest[0]); //Make it completely round\n\n    this.xref = this.props.xref; //x Ref values\n    this.xref.push(this.xref[0]); //Make it completely round\n    this.yref = this.props.yref; //x Ref values\n    this.yref.push(this.yref[0]); //Make it completely round\n\n    /**\n     * Rounding the information on the graph\n     */\n    this.rf = Math.round(this.props.rf);\n    this.rg = Math.round(this.props.rg);\n    this.cct = Math.round(this.props.cct);\n    this.duv = Math.round(this.props.duv * 10000) / 10000;\n    this.small_bool = this.props.small;\n    /**\n     * Determine if we are dealing with with the small version (Graphical Page)\n     * or the Bigger (Basic Results) Plot\n     */\n    if (this.small_bool) {\n      this.arrow_size = 2;\n      this.x_size = 325;\n      this.y_size = 325;\n      this.rg_label = [1.25, 1.2];\n      this.rf_label = [-1.25, 1.2];\n      this.duv_label = [1.1, -1.25];\n      this.cct_label = [-1.1, -1.25];\n      this.style = { width: 325, height: 325 };\n      this.small_style = {\n        position: \"inherit\",\n        display: \"inline-block\",\n        padding: \"50 50 50 50\"\n      };\n    } else if (this.props.active === \"Intermediate\") {\n      this.arrow_size = 3;\n      this.style = { width: \"100%\" };\n      this.x_size = 650;\n      this.y_size = 650;\n      this.rg_label = [1.35, 1.3];\n      this.rf_label = [-1.35, 1.3];\n      this.duv_label = [1.2, -1.25];\n      this.cct_label = [-1.2, -1.25];\n    } else {\n      this.arrow_size = 3;\n      this.style = { width: \"100%\" };\n      this.x_size = 800;\n      this.y_size = 800;\n      this.rg_label = [1.35, 1.3];\n      this.rf_label = [-1.35, 1.3];\n      this.duv_label = [1.2, -1.25];\n      this.cct_label = [-1.2, -1.25];\n    }\n    /**\n     * Setting up the Reference Circles\n     */\n    this.minus_20p_x = []; // -20% Ref Circle\n    this.minus_20p_y = [];\n    this.minus_10p_x = []; // -10% Ref Circle\n    this.minus_10p_y = [];\n    this.even_x = []; // 0% Ref Circle\n    this.even_y = [];\n    this.plus_10p_x = []; // +10% Ref Circle\n    this.plus_10p_y = [];\n    this.plus_20p_x = []; // +20% Ref Circle\n    this.plus_20p_y = [];\n    this.bin_lines = [];\n    this.chroma_isolines_labels = [];\n    this.black_x = [];\n    this.black_y = [];\n\n    this.icon = {\n      width: 1000,\n      path:\n        \"m833 5l-17 108v41l-130-65 130-66c0 0 0 38 0 39 0-1 36-14 39-25 4-15-6-22-16-30-15-12-39-16-56-20-90-22-187-23-279-23-261 0-341 34-353 59 3 60 228 110 228 110-140-8-351-35-351-116 0-120 293-142 474-142 155 0 477 22 477 142 0 50-74 79-163 96z m-374 94c-58-5-99-21-99-40 0-24 65-43 144-43 79 0 143 19 143 43 0 19-42 34-98 40v216h87l-132 135-133-135h88v-216z m167 515h-136v1c16 16 31 34 46 52l84 109v54h-230v-71h124v-1c-16-17-28-32-44-51l-89-114v-51h245v72z\",\n      ascent: 850,\n      descent: -150\n    };\n\n    this.colors = [\"#e41a1c\", \"#377eb8\", \"#4daf4a\"];\n\n    var theta;\n    for (theta = 1; theta <= 361; theta++) {\n      this.black_x[theta] = Math.cos((theta * Math.PI) / 180);\n      this.black_y[theta] = Math.sin((theta * Math.PI) / 180);\n    }\n    var i;\n    for (i = 0; i < 16; i++) {\n      var distance = Math.sqrt(\n        Math.pow(this.xref[i] - this.xtest[i], 2) +\n          Math.pow(this.yref[i] - this.ytest[i], 2)\n      );\n      if (distance.toFixed(3) <= 0.029) {\n        if (this.xref[i] > this.xtest[i]) {\n          this.xref[i] = this.xtest[i] + 0.04;\n          this.yref[i] = this.ytest[i] + 0.04;\n        } else {\n          this.xref[i] = this.xtest[i] - 0.04;\n          this.yref[i] = this.ytest[i] - 0.04;\n        }\n      }\n    }\n\n    /**\n     * An array of the vector colors\n     */\n    const colors = [\n      \"#e32f32\",\n      \"#e54f4f\",\n      \"#fa843b\",\n      \"#feb73c\",\n      \"#cbcb50\",\n      \"#7fb951\",\n      \"#44c00b\",\n      \"#109c7b\", //8\n      \"#22bbaf\", //9\n      \"#13a2bb\", //10\n      \"#0f82c0\", //11\n      \"#3c62a8\", //12\n      \"#6d67ac\", //13\n      \"#6a4e84\", //14\n      \"#9d69a0\", //15\n      \"#a65081\" //16\n    ];\n    /**\n     * Setting up the vector arrays\n     */\n    this.arrows = [];\n    var i_arrow;\n    for (i = 0; i < 16; i++) {\n      i_arrow = {\n        x: this.xtest[i],\n        y: this.ytest[i],\n        xref: \"x\",\n        yref: \"y\",\n        text: \"\",\n        showarrow: true,\n        arrowhead: 2,\n        arrowwidth: this.arrow_size,\n        axref: \"x\",\n        ayref: \"y\",\n        ax: this.xref[i],\n        ay: this.yref[i],\n        arrowcolor: colors[i]\n      };\n      this.arrows.push(i_arrow);\n    }\n  }\n\n  clearChromaIsolines = () => {\n    console.log(\"Clearing isolines\");\n    this.minus_20p_x = []; // -20% Ref Circle\n    this.minus_20p_y = [];\n    this.minus_10p_x = []; // -10% Ref Circle\n    this.minus_10p_y = [];\n    this.even_x = []; // 0% Ref Circle\n    this.even_y = [];\n    this.plus_10p_x = []; // +10% Ref Circle\n    this.plus_10p_y = [];\n    this.plus_20p_x = []; // +20% Ref Circle\n    this.plus_20p_y = [];\n    this.chroma_isolines_labels = [];\n  };\n\n  /**\n   * Setting up the bin lines\n   */\n  createBinLines = () => {\n    this.bin_lines = [\n      {\n        x: [-1.5, 1.5],\n        y: [0, 0],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [-1.39, 1.39],\n        y: [-0.57, 0.57],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [-1.06, 1.06],\n        y: [-1.06, 1.06],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [-0.57, 0.57],\n        y: [-1.39, 1.39],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [0, 0],\n        y: [-1.5, 1.5],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [0.57, -0.57],\n        y: [-1.39, 1.39],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [1.06, -1.06],\n        y: [-1.06, 1.06],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      },\n      {\n        x: [1.39, -1.39],\n        y: [-0.57, 0.57],\n        mode: \"lines\",\n        name: \"Solid\",\n        line: {\n          dash: \"5px\",\n          width: 1\n        },\n        marker: { color: \"grey\" },\n        showlegend: false,\n        hoverinfo: \"skip\"\n      }\n    ];\n  };\n  /**\n   * Setting up the Bin Numbers\n   */\n  createBinNumbers = () => {\n    this.bin_numbers = [];\n    var theta = 11.5;\n    var i;\n    for (i = 1; i <= 16; i++) {\n      var x = 1.35 * Math.cos((theta * Math.PI) / 180);\n      var y = 1.35 * Math.sin((theta * Math.PI) / 180);\n      theta += 22.5;\n      this.bin_numbers[i - 1] = {\n        x: x,\n        y: y,\n        xref: \"x\",\n        yref: \"y\",\n        text: `${i}`,\n        font: {\n          size: 12,\n          color: \"grey\"\n        },\n        ax: 0,\n        ay: 0\n      };\n    }\n  };\n\n  createChromaIsolines = () => {\n    var theta;\n    var i;\n    for (theta = 1; theta <= 361; theta++) {\n      // -20% Ref Circle\n      this.minus_20p_x[theta] = 0.8 * Math.cos((theta * Math.PI) / 180);\n      this.minus_20p_y[theta] = 0.8 * Math.sin((theta * Math.PI) / 180);\n\n      // -10% Ref Circle\n      this.minus_10p_x[theta] = 0.9 * Math.cos((theta * Math.PI) / 180);\n      this.minus_10p_y[theta] = 0.9 * Math.sin((theta * Math.PI) / 180);\n\n      // 0% Ref Circle\n      this.even_x[theta] = Math.cos((theta * Math.PI) / 180);\n      this.even_y[theta] = Math.sin((theta * Math.PI) / 180);\n\n      // +10% Ref Circle\n      this.plus_10p_x[theta] = 1.1 * Math.cos((theta * Math.PI) / 180);\n      this.plus_10p_y[theta] = 1.1 * Math.sin((theta * Math.PI) / 180);\n\n      //+20% Ref Circle\n      this.plus_20p_x[theta] = 1.2 * Math.cos((theta * Math.PI) / 180);\n      this.plus_20p_y[theta] = 1.2 * Math.sin((theta * Math.PI) / 180);\n    }\n    this.chroma_isolines_labels = [\n      {\n        x: -0.15,\n        y: -0.7,\n        xref: \"x\",\n        yref: \"y\",\n        text: `-20%`,\n        font: {\n          size: 11,\n          color: \"white\"\n        },\n        ax: 0,\n        ay: 0\n      },\n      {\n        x: -0.25,\n        y: -1.11,\n        xref: \"x\",\n        yref: \"y\",\n        text: `+20%`,\n        font: {\n          size: 11,\n          color: \"white\"\n        },\n        ax: 0,\n        ay: 0\n      }\n    ];\n  };\n  /**\n   * Render function for the CVGPlot\n   */\n  render() {\n    if (this.props.bin_labels) {\n      this.createBinLines();\n    } else {\n      this.bin_lines = [];\n    }\n    if (this.props.bin_dividers) {\n      this.createBinNumbers();\n    } else {\n      this.bin_numbers = [];\n    }\n    if (this.props.chroma_isolines) {\n      console.log(\"chroma_isoline: \", this.props.chroma_isolines);\n      this.createChromaIsolines();\n    } else {\n      console.log(\"chroma_isoline: \", this.props.chroma_isolines);\n      this.clearChromaIsolines();\n    }\n    return (\n      <div style={this.small_style}>\n        <div align=\"center\">\n          <Plot\n            useResizeHandler={true}\n            style={this.style}\n            data={[\n              ...this.bin_lines,\n              {\n                x: [0],\n                y: [0],\n                type: \"scatter\",\n                mode: \"markers+lines\",\n                marker: {\n                  size: 22,\n                  width: 50,\n                  color: \"white\",\n                  symbol: \"circle\",\n                  opacity: 0.8\n                },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                x: [0],\n                y: [0],\n                type: \"scatter\",\n                mode: \"markers+lines\",\n                marker: {\n                  size: 30,\n                  width: 50,\n                  color: \"white\",\n                  symbol: \"circle\",\n                  opacity: 0.7\n                },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                x: [0],\n                y: [0],\n                type: \"scatter\",\n                mode: \"markers\",\n                marker: {\n                  size: 8,\n                  width: 50,\n                  color: \"grey\",\n                  symbol: \"cross-thin-open\"\n                },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                name: \"-20%\",\n                x: this.minus_20p_x,\n                y: this.minus_20p_y,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"white\" },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                name: \"-10%\",\n                x: this.minus_10p_x,\n                y: this.minus_10p_y,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"white\" },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                name: \"0%\",\n                x: this.black_x,\n                y: this.black_y,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"black\" },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                name: \"10%\",\n                x: this.plus_10p_x,\n                y: this.plus_10p_y,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"white\" },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                name: \"20%\",\n                x: this.plus_20p_x,\n                y: this.plus_20p_y,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"white\" },\n                showlegend: false,\n                hoverinfo: \"skip\"\n              },\n              {\n                name: \"Test\",\n                x: this.xtest,\n                y: this.ytest,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"red\" }\n              },\n              {\n                /*\n                name: \"Reference\",\n                x: this.xref,\n                y: this.yref,\n                type: \"scatter\",\n                line: { shape: \"spline\", smoothing: 1.3 },\n                mode: \"lines+points\",\n                connectgaps: true,\n                marker: { color: \"black\" }\n                */\n              }\n            ]}\n            layout={{\n              showlegend: false,\n              autosize: true,\n              //width: this.x_size,\n              height: this.y_size,\n\n              margin: {\n                t: 0,\n                l: 0,\n                b: 0,\n                r: 0\n              },\n              xaxis: {\n                visible: false,\n                range: [-1.5, 1.5],\n                title: {\n                  text: \"\"\n                }\n              },\n              yaxis: {\n                visible: false,\n                range: [-1.5, 1.5],\n                title: {\n                  text: \"\"\n                },\n                tickformat: \"\"\n              },\n              images: [\n                {\n                  source: \"https://i.imgur.com/QkpOGSJ.png\",\n                  xref: \"x\",\n                  yref: \"y\",\n                  x: -1.5,\n                  y: 1.5,\n                  sizex: 3,\n                  sizey: 3,\n                  sizing: \"stretch\",\n                  layer: \"below\"\n                }\n              ],\n              annotations: [\n                ...this.arrows,\n                {\n                  x: this.rf_label[0],\n                  y: this.rf_label[1],\n                  xref: \"x\",\n                  yref: \"y\",\n                  text: `<b>${this.rf}</b><br /><i>R</i><sub>f</sub>`,\n                  font: {\n                    size: 20,\n                    color: \"black\"\n                  },\n                  align: \"left\",\n                  ax: 0,\n                  ay: 0\n                },\n                {\n                  x: this.rg_label[0],\n                  y: this.rg_label[1],\n                  xref: \"x\",\n                  yref: \"y\",\n                  text: `<b>${this.rg}</b><br /><i>R</i><sub>g</sub>`,\n                  font: {\n                    size: 20,\n                    color: \"black\"\n                  },\n                  align: \"right\",\n                  ax: 0,\n                  ay: 0\n                },\n                {\n                  x: this.duv_label[0],\n                  y: this.duv_label[1],\n                  xref: \"x\",\n                  yref: \"y\",\n                  text: `<i>D</i><sub>uv</sub><br /><b>${this.duv}</b><br />`,\n                  font: {\n                    size: 20,\n                    color: \"black\"\n                  },\n                  align: \"right\",\n                  ax: 0,\n                  ay: 0\n                },\n                {\n                  x: this.cct_label[0],\n                  y: this.cct_label[1],\n                  xref: \"x\",\n                  yref: \"y\",\n                  text: `CCT<br><b>${this.cct} K</b>`,\n                  font: {\n                    size: 20,\n                    color: \"black\"\n                  },\n                  align: \"left\",\n                  ax: 0,\n                  ay: 0\n                },\n                ...this.chroma_isolines_labels,\n                ...this.bin_numbers\n              ]\n            }}\n            config={{\n              displaylogo: false,\n              modeBarButtons: [\n                [\"toImage\"],\n\n                [\n                  {\n                    name: \"color toggler\",\n                    icon: gear,\n                    click: function(gd) {\n                      console.log(\"New Icon Clicked\");\n                    }\n                  }\n                ]\n              ],\n              responsive: true,\n              toImageButtonOptions: {\n                format: \"png\", // one of png, svg, jpeg, webp\n                filename: \"Color Vector Graph\",\n                height: 900,\n                width: 900,\n                scale: 1.5 // Multiply title/legend/axis/canvas sizes by this factor\n              }\n            }}\n          />\n        </div>\n        <br />\n        {this.small_bool ? (\n          <div align=\"center\">\n            <h5>Color Vector Graphic</h5>\n            The Color Vector Graphic (CVG) shows a normalized version of the{\" \"}\n            <br />\n            average change in (a', b') coordinates of CAM02-UCS for the CES{\" \"}\n            <br />\n            within each hue-angle bin. Alternative versions of the CVG are{\" \"}\n            <br />\n            available in the CVG sheet. Elements of this graphic can be turned{\" \"}\n            <br />\n            on or off using the menu on the Main sheet (requires recalculation).{\" \"}\n            <br />\n            [Background is for visual orientation only]\n          </div>\n        ) : (\n          <div />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  bin_labels: state.dataReducers.bin_labels,\n  bin_dividers: state.dataReducers.bin_dividers,\n  chroma_isolines: state.dataReducers.chroma_isolines\n});\n\nexport default connect(mapStateToProps, {})(CVGPlot);\n"]},"metadata":{},"sourceType":"module"}