'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Panel = require('react-bootstrap/lib/Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Card = function (_React$Component) {
  (0, _inherits3['default'])(Card, _React$Component);

  function Card(props) {
    (0, _classCallCheck3['default'])(this, Card);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.setViewState = function (collapsed) {
      var onToggleCollapse = _this.props.onToggleCollapse;

      var newState = {
        collapsed: collapsed
      };
      _this.setState(newState);
      if (onToggleCollapse) {
        onToggleCollapse(newState);
      }
    };

    _this.getHeader = function () {
      var _this$props = _this.props,
          header = _this$props.header,
          collapsible = _this$props.collapsible;

      var headerContent = null;
      if (typeof header === 'string') {
        headerContent = _react2['default'].createElement(
          _react2['default'].Fragment,
          null,
          header,
          collapsible && _react2['default'].createElement(
            'span',
            { className: 'arrow' },
            _react2['default'].createElement(_Icon2['default'], { icon: 'chevron-up' })
          )
        );
      } else {
        headerContent = header;
      }
      var intContent = _react2['default'].createElement(
        _Panel2['default'].Title,
        { toggle: collapsible, componentClass: 'h1' },
        headerContent
      );
      return _react2['default'].createElement(
        _Panel2['default'].Heading,
        null,
        intContent
      );
    };

    _this.getFooter = function () {
      var footer = _this.props.footer;


      return _react2['default'].createElement(
        _Panel2['default'].Footer,
        null,
        footer
      );
    };

    _this.getMainContent = function () {
      var _this$props2 = _this.props,
          collapsible = _this$props2.collapsible,
          altContent = _this$props2.altContent,
          children = _this$props2.children;
      var collapsed = _this.state.collapsed;

      var mainContent = _react2['default'].createElement(
        _Panel2['default'].Body,
        null,
        children
      );
      if (collapsible) {
        var altContentNode = '';
        if (altContent && collapsed) {
          altContentNode = _react2['default'].createElement(
            'div',
            { className: 'PnnlCard-alt' },
            altContent
          );
        }
        mainContent = _react2['default'].createElement(
          _react2['default'].Fragment,
          null,
          altContentNode,
          _react2['default'].createElement(
            _Panel2['default'].Collapse,
            null,
            _react2['default'].createElement(
              _Panel2['default'].Body,
              null,
              children
            )
          )
        );
      }
      return mainContent;
    };

    _this.collapseCard = function () {
      _this.setViewState(true);
    };

    _this.expandCard = function () {
      _this.setViewState(false);
    };

    _this.toggleCollapse = function () {
      _this.setViewState(!_this.state.collapsed);
    };

    _this.state = {
      collapsed: props.collapsed
    };
    return _this;
  }

  Card.prototype.render = function render() {
    var _props = this.props,
        header = _props.header,
        footer = _props.footer,
        className = _props.className,
        style = _props.style;

    var headerContent = '';
    if (header) {
      headerContent = this.getHeader();
    }
    var mainContent = this.getMainContent();
    var footerContent = '';
    if (footer) {
      footerContent = this.getFooter();
    }

    return _react2['default'].createElement(
      _Panel2['default'],
      {
        bsClass: 'PnnlCard',
        className: className,
        style: style,
        onToggle: this.setViewState,
        defaultExpanded: !this.state.collapsed
      },
      headerContent,
      mainContent,
      footerContent
    );
  };

  return Card;
}(_react2['default'].Component);

Card.propTypes = {
  /**
    * Header to be displayed at the top of the card. If not provided then no header will be rendered.
    * */
  header: _propTypes2['default'].oneOfType([_propTypes2['default'].node, _propTypes2['default'].string]),
  /**
    * Footer to be displayed at the bottom of the card. If not provided then no footer will be rendered.
    * */
  footer: _propTypes2['default'].oneOfType([_propTypes2['default'].node, _propTypes2['default'].string]),
  /**
    * Should the card be collapsed on initial render?  False by default.
    * */
  collapsed: _propTypes2['default'].bool,
  /**
    * Should the card be collapsible by clicking on the header?  False by default.
    * */
  collapsible: _propTypes2['default'].bool,
  /**
    * Function to be called when the card is collapsed/expanded.  Can be used to change out the header content that will be displayed in the collapsed state.
    * */
  onToggleCollapse: _propTypes2['default'].func,
  /**
    * Content that will be displayed when the card is collapsed.  This can provide users a hint at what the collapsed card contains.  The alternative content should be informative, not interactive, and must not contain items that are unavailable in the main content of the card.
    * */
  altContent: _propTypes2['default'].node
};

Card.defaultProps = {
  collapsible: false,
  collapsed: false,
  header: null,
  footer: null,
  onToggleCollapse: null,
  altContent: null
};

exports['default'] = Card;
module.exports = exports['default'];