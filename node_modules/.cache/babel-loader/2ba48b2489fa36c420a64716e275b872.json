{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _prefixer = require('../__helpers/prefixer');\n\nvar _prefixer2 = _interopRequireDefault(_prefixer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar Loader = function (_React$Component) {\n  (0, _inherits3['default'])(Loader, _React$Component);\n\n  function Loader() {\n    (0, _classCallCheck3['default'])(this, Loader);\n    return (0, _possibleConstructorReturn3['default'])(this, _React$Component.apply(this, arguments));\n  }\n\n  Loader.prototype.calculateRatio = function calculateRatio(value) {\n    if (value < this.props.min) return 0;\n    if (value > this.props.max) return 1;\n    return (value - this.props.min) / (this.props.max - this.props.min);\n  };\n\n  Loader.prototype.circularStyle = function circularStyle() {\n    var _stroke = void 0;\n\n    if (this.props.mode !== 'indeterminate') {\n      _stroke = {\n        strokeDasharray: 2 * Math.PI * 25 * this.calculateRatio(this.props.value) + ', 400'\n      };\n    } else if (typeof window !== 'undefined') {\n      if (window.navigator.userAgent.match(/Trident\\/7\\./)) {\n        // Used for matching IE11. It does not support animation of the stroke-dasharray CSS prop\n        _stroke = {\n          strokeDasharray: '100'\n        };\n      }\n    }\n\n    return _stroke;\n  };\n\n  Loader.prototype.linearStyle = function linearStyle() {\n    if (this.props.mode !== 'indeterminate') {\n      return {\n        buffer: (0, _prefixer2['default'])({\n          transform: 'scaleX(' + this.calculateRatio(this.props.buffer) + ')'\n        }),\n        value: (0, _prefixer2['default'])({\n          transform: 'scaleX(' + this.calculateRatio(this.props.value) + ')'\n        })\n      };\n    }\n\n    return {};\n  };\n\n  Loader.prototype.renderCircular = function renderCircular() {\n    return _react2['default'].createElement('svg', {\n      className: 'circle',\n      viewBox: '0 0 60 60'\n    }, _react2['default'].createElement('circle', {\n      className: 'path',\n      style: this.circularStyle(),\n      cx: '30',\n      cy: '30',\n      r: '25'\n    }));\n  };\n\n  Loader.prototype.renderLinear = function renderLinear() {\n    var _linearStyle = this.linearStyle(),\n        buffer = _linearStyle.buffer,\n        value = _linearStyle.value;\n\n    return _react2['default'].createElement('div', null, _react2['default'].createElement('span', {\n      'data-ref': 'buffer',\n      className: 'buffer',\n      style: buffer\n    }), _react2['default'].createElement('span', {\n      'data-ref': 'value',\n      className: 'value',\n      style: value\n    }));\n  };\n\n  Loader.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        disabled = _props.disabled,\n        max = _props.max,\n        min = _props.min,\n        mode = _props.mode,\n        show = _props.show,\n        size = _props.size,\n        style = _props.style,\n        type = _props.type,\n        value = _props.value;\n    var _props2 = this.props,\n        multicolor = _props2.multicolor,\n        color = _props2.color;\n\n    if (!show) {\n      return null;\n    }\n\n    multicolor = color || type === 'linear' ? false : multicolor;\n    color = color ? color + '-path' : null;\n\n    var _className = (0, _classnames2['default'])('pnnl-loader', type, mode, {\n      multicolor: multicolor\n    }, color, className);\n\n    var circularStyle = size && type === 'circular' ? {\n      width: size + 'em',\n      height: size + 'em'\n    } : null;\n\n    var _style = (0, _assign2['default'])({}, circularStyle, style);\n\n    return _react2['default'].createElement('div', {\n      disabled: disabled,\n      'data-react-core': 'loader',\n      'aria-valuenow': value,\n      'aria-valuemin': min,\n      'aria-valuemax': max,\n      className: _className,\n      style: _style\n    }, type === 'circular' ? this.renderCircular() : this.renderLinear());\n  };\n\n  return Loader;\n}(_react2['default'].Component);\n\nLoader.propTypes = {\n  /**\n     * Used to style the buffer element in the linear progress.\n     * */\n  buffer: _propTypes2['default'].number,\n\n  /**\n     * Used to add additional CSS classes to the root of the progress bar.\n     * */\n  className: _propTypes2['default'].string,\n\n  /**\n     * Used as a style shortcut for the progress bar with branded colors.\n     * */\n  color: _propTypes2['default'].oneOf(['white', 'silver', 'copper', 'bronze', 'gold', 'platinum', 'onyx', 'emerald', 'sapphire', 'ruby', 'mercury', 'topaz', 'amethyst', 'garnet', 'emsl-green']),\n\n  /**\n     * If true, component will be disabled but still shown on the screen.\n     * @default false\n     * */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n     * Maximum value permitted. Useful for setting custom scales that don't align to a 0 to 100 scale.\n     * */\n  max: _propTypes2['default'].number,\n\n  /**\n     * Minimum value permitted. Useful for setting custom scales that don't align to a 0 to 100 scale.\n     * */\n  min: _propTypes2['default'].number,\n\n  /**\n     * Mode of the progress bar.\n     * */\n  mode: _propTypes2['default'].oneOf(['determinate', 'indeterminate']),\n\n  /**\n     * If true, the circular progress bar will be changing its color. If a color value is provided as well, multicolor will be ignored.\n     * */\n  multicolor: _propTypes2['default'].bool,\n\n  /**\n     * If false, component will return null and will not present any markup. It is recommended to conditionally require this component\n     * in a parent container instead to avoid the unnecessary lifecycle calls of this component.\n     * */\n  show: _propTypes2['default'].bool,\n\n  /**\n     * Used to set the relative size of a circular progress bar in `em` sizing. This will allow a circular progress bar to grow to the same size of its\n     * neighbor content or be overridden with a custom scaling factor.\n     * */\n  size: _propTypes2['default'].number,\n\n  /**\n     * Pass-through style props object.\n     * */\n  style: _propTypes2['default'].object,\n  // eslint-disable-line react/forbid-prop-types\n\n  /**\n     * The type of the progress bar.\n     * */\n  type: _propTypes2['default'].oneOf(['linear', 'circular']),\n\n  /**\n     * Used to show the current value of the progress bar.\n     * */\n  value: _propTypes2['default'].number\n};\nLoader.defaultProps = {\n  buffer: 0,\n  max: 100,\n  min: 0,\n  mode: 'indeterminate',\n  multicolor: false,\n  show: true,\n  size: 1,\n  type: 'circular',\n  value: 0,\n  className: null,\n  color: null,\n  disabled: false,\n  style: {}\n};\nexports['default'] = Loader;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}