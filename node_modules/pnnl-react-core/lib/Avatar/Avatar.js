'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Avatar = function Avatar(props) {
  var src = props.src,
      className = props.className,
      size = props.size,
      children = props.children,
      other = (0, _objectWithoutProperties3['default'])(props, ['src', 'className', 'size', 'children']);


  var avatarClasses = (0, _classnames2['default'])(className, ['PnnlAvatar-' + size], 'PnnlAvatar');

  if (src) {
    return _react2['default'].createElement(_Image2['default'], {
      src: src,
      className: avatarClasses,
      alt: 'Avatar'
    });
  }

  return _react2['default'].createElement(
    'div',
    (0, _extends3['default'])({}, other, {
      className: avatarClasses
    }),
    _react2['default'].createElement(
      'span',
      null,
      children
    )
  );
};

Avatar.propTypes = {
  /**
   * Can be used, for instance, to render a letter inside the avatar.
   */
  children: _propTypes2['default'].node,
  /**
   * The css class name of the root `div` or `img` element. Can be one of our standard color names to set the background color, or "text-*" with a color to specify the icon/text color.
   */
  className: _propTypes2['default'].string,
  /**
   * This is the size of the avatar. Our breakpoints are consistent with Boostrap grid breakpoints. 'md' is the default, and is used for the Person component, 'lg' is used in the PnnlProfileCard, 'sm' is intended for use in typeahead results and other menus, and 'xs' for instances that are space constrained. These translate into a className, and the actual sizes are defined in pnnl-theme-core.
   */
  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg']),
  /**
   * If passed in, this component will render an img element. Otherwise, a div will be rendered.
   */
  src: _propTypes2['default'].string
};

Avatar.defaultProps = {
  children: null,
  className: null,
  size: 'md',
  src: null
};

exports['default'] = Avatar;
module.exports = exports['default'];