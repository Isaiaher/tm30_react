{"ast":null,"code":"var _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Examples.jsx\";\n\n/**\n * Examples.\n *\n * A component for the drop down menu of all the different examples.\n * Takes the headers (names) of each example from the \"ExampleHeaders.json\" file.\n * Makes an api call to the server using the \"ExamplesSpds.json\" data.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport data from \"../../../../Data/ExamplesSpds.json\";\nimport exampleHeaders from \"../../../../Data/ExampleHeaders.json\";\n/**\n * Examples Class\n */\n\nclass Examples extends React.Component {\n  /**\n   * Constructor method that creates the state and \"examples\" array\n   * which holds all the examples names, imported from \"ExampleHeaders.json\"\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      example_number: \"\",\n      loading: false,\n      data: [],\n      tableReady: false,\n      disabled: true\n    };\n    var i;\n    var header_length = exampleHeaders.headers.length;\n    this.examples = [];\n    /**\n     * Push all the example names into \"this.examples\"\n     */\n\n    for (i = 0; i < header_length; i++) {\n      this.examples.push(exampleHeaders.headers[i][\"Example\"]);\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /**\n   * Handler function to perform the necessary steps to make the API command.\n   * The function is called when 'Calculate' button under the examples is clicked\n   * @param {*} event\n   */\n\n\n  handleSubmit(event) {\n    var wavelength = [];\n\n    if (this.state.example_number !== \"\") {\n      var exSpd = []; //The example SPD being grabbed from the \"ExamplesSpds.json\" file\n\n      var i;\n\n      for (i = 0; i < 401; i++) {\n        exSpd.push(data.data[i][this.state.example_number]);\n      }\n\n      event.preventDefault();\n      /**\n       * Set the loading state to true to enable the spinner icon\n       */\n\n      this.setState({\n        loading: true\n      }, () => {\n        axios.defaults.headers.common = {};\n        axios.defaults.headers.common.accept = \"application/json\";\n        /**\n         * Call to the API with the Example SPD Information.\n         */\n\n        axios.post(\"/tm30Paste\", {\n          spd: exSpd,\n          wavelength: this.state.wavelength_array\n        }).then(res => {\n          return res.data;\n        }).then(data => {\n          /**\n           * Set the state that loading is now false (No Spinner),\n           * data is now the JSON from the TM30 Web C program,\n           * and table ready is true\n           * TODO: TableReady isn't really needed anymore due to not having a table on the Calculator page.\n           */\n          this.setState({\n            loading: false,\n            data: data.data,\n            tableReady: true\n          });\n          /**\n           * Redux command that we can use later to cache the data\n           * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n           */\n\n          /**\n           * Pushes the data to the Reports page and redirects to that page\n           */\n\n          this.props.history.push({\n            pathname: \"/Report\",\n            state: {\n              data: this.state.data\n            }\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Function that handles a change in the drop down menu.\n   * Basically the only functionality is that if the value is not equal to \"\" (Choose Example)\n   * then the button is disabled. Doesn't allow the user to send empty data or invalid data.\n   * @param {*} event   //The event of changeing the drop down menu\n   */\n\n\n  handleChange(event) {\n    if (event.target.value === \"\") {\n      this.setState({\n        example_number: event.target.value,\n        disabled: true\n      });\n    } else {\n      this.setState({\n        example_number: event.target.value,\n        disabled: false\n      });\n    }\n  }\n  /**\n   * Render the component\n   */\n\n\n  render() {\n    const loading = this.state.loading; //If the loading spinner should be visible\n\n    /**\n     * Mapping the example names stored in \"this.example\" to be actual drop-down menu items\n     */\n\n    let optionItems = this.examples.map(example => React.createElement(\"option\", {\n      key: example,\n      value: example,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, example));\n    /**\n     * Return of the render\n     */\n\n    return (\n      /**\n       * Start of the form with a submission handler from above\n       */\n      React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        value: this.state.example_number,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Choose an Example\"), optionItems), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), loading ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \" \", \"Calculating Results \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), \" \", React.createElement(LoadingSpinner, {\n        color: \"copper\",\n        size: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), \" \")) : React.createElement(Button, {\n        bsSize: \"sm\",\n        type: \"submit\",\n        disabled: this.state.disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Calculate\"))\n    );\n  }\n\n}\n/**\n * Export withRouter to be able to jump to the Reports page with the JSON Data\n */\n\n\nexport default withRouter(Examples);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Examples.jsx"],"names":["React","Button","axios","withRouter","LoadingSpinner","data","exampleHeaders","Examples","Component","constructor","props","state","example_number","loading","tableReady","disabled","i","header_length","headers","length","examples","push","handleSubmit","bind","handleChange","event","wavelength","exSpd","preventDefault","setState","defaults","common","accept","post","spd","wavelength_array","then","res","history","pathname","target","value","render","optionItems","map","example"],"mappings":"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","sourcesContent":["/**\n * Examples.\n *\n * A component for the drop down menu of all the different examples.\n * Takes the headers (names) of each example from the \"ExampleHeaders.json\" file.\n * Makes an api call to the server using the \"ExamplesSpds.json\" data.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport data from \"../../../../Data/ExamplesSpds.json\";\nimport exampleHeaders from \"../../../../Data/ExampleHeaders.json\";\n\n/**\n * Examples Class\n */\nclass Examples extends React.Component {\n  /**\n   * Constructor method that creates the state and \"examples\" array\n   * which holds all the examples names, imported from \"ExampleHeaders.json\"\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      example_number: \"\",\n      loading: false,\n      data: [],\n      tableReady: false,\n      disabled: true\n    };\n    var i;\n    var header_length = exampleHeaders.headers.length;\n    this.examples = [];\n    /**\n     * Push all the example names into \"this.examples\"\n     */\n    for (i = 0; i < header_length; i++) {\n      this.examples.push(exampleHeaders.headers[i][\"Example\"]);\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /**\n   * Handler function to perform the necessary steps to make the API command.\n   * The function is called when 'Calculate' button under the examples is clicked\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    var wavelength = [];\n    if (this.state.example_number !== \"\") {\n      var exSpd = []; //The example SPD being grabbed from the \"ExamplesSpds.json\" file\n      var i;\n      for (i = 0; i < 401; i++) {\n        exSpd.push(data.data[i][this.state.example_number]);\n      }\n      event.preventDefault();\n      /**\n       * Set the loading state to true to enable the spinner icon\n       */\n      this.setState({ loading: true }, () => {\n        axios.defaults.headers.common = {};\n        axios.defaults.headers.common.accept = \"application/json\";\n        /**\n         * Call to the API with the Example SPD Information.\n         */\n        axios\n          .post(\"/tm30Paste\", {\n            spd: exSpd,\n            wavelength: this.state.wavelength_array\n          })\n          .then(res => {\n            return res.data;\n          })\n          .then(data => {\n            /**\n             * Set the state that loading is now false (No Spinner),\n             * data is now the JSON from the TM30 Web C program,\n             * and table ready is true\n             * TODO: TableReady isn't really needed anymore due to not having a table on the Calculator page.\n             */\n            this.setState({\n              loading: false,\n              data: data.data,\n              tableReady: true\n            });\n\n            /**\n             * Redux command that we can use later to cache the data\n             * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n             */\n\n            /**\n             * Pushes the data to the Reports page and redirects to that page\n             */\n            this.props.history.push({\n              pathname: \"/Report\",\n              state: {\n                data: this.state.data\n              }\n            });\n          });\n      });\n    }\n  }\n  /**\n   * Function that handles a change in the drop down menu.\n   * Basically the only functionality is that if the value is not equal to \"\" (Choose Example)\n   * then the button is disabled. Doesn't allow the user to send empty data or invalid data.\n   * @param {*} event   //The event of changeing the drop down menu\n   */\n  handleChange(event) {\n    if (event.target.value === \"\") {\n      this.setState({ example_number: event.target.value, disabled: true });\n    } else {\n      this.setState({ example_number: event.target.value, disabled: false });\n    }\n  }\n  /**\n   * Render the component\n   */\n  render() {\n    const loading = this.state.loading; //If the loading spinner should be visible\n    /**\n     * Mapping the example names stored in \"this.example\" to be actual drop-down menu items\n     */\n    let optionItems = this.examples.map(example => (\n      <option key={example} value={example}>\n        {example}\n      </option>\n    ));\n    /**\n     * Return of the render\n     */\n    return (\n      /**\n       * Start of the form with a submission handler from above\n       */\n      <form onSubmit={this.handleSubmit}>\n        <select value={this.state.example_number} onChange={this.handleChange}>\n          <option value=\"\">Choose an Example</option>\n          {optionItems}\n        </select>\n        <br />\n        {loading ? (\n          <div>\n            <label>\n              {\" \"}\n              Calculating Results <br />{\" \"}\n              <LoadingSpinner color=\"copper\" size={6} />{\" \"}\n            </label>\n          </div>\n        ) : (\n          <Button bsSize=\"sm\" type=\"submit\" disabled={this.state.disabled}>\n            Calculate\n          </Button>\n        )}\n      </form>\n    );\n  }\n}\n/**\n * Export withRouter to be able to jump to the Reports page with the JSON Data\n */\nexport default withRouter(Examples);\n"]},"metadata":{},"sourceType":"module"}