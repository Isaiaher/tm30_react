'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Panel = require('react-bootstrap/lib/Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _SidebarHeader = require('../SidebarHeader');

var _SidebarHeader2 = _interopRequireDefault(_SidebarHeader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var SidebarPanel = function (_React$Component) {
  (0, _inherits3['default'])(SidebarPanel, _React$Component);

  function SidebarPanel(props) {
    (0, _classCallCheck3['default'])(this, SidebarPanel);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.state = {
      open: _this.props.open
    };

    _this.togglePanelVisibility = _this.togglePanelVisibility.bind(_this);
    _this.buildHeader = _this.buildHeader.bind(_this);
    return _this;
  }

  SidebarPanel.prototype.togglePanelVisibility = function togglePanelVisibility() {
    this.setState({
      open: !this.state.open
    });
  };

  SidebarPanel.prototype.buildHeader = function buildHeader(isOpen) {
    var _props = this.props,
        header = _props.header,
        collapsible = _props.collapsible,
        validationState = _props.validationState;

    if (typeof header === 'string') {
      return _react2['default'].createElement(_SidebarHeader2['default'], { open: isOpen, validationState: validationState, title: header, collapsible: collapsible });
    }

    return header;
  };

  SidebarPanel.prototype.render = function render() {
    var _props2 = this.props,
        children = _props2.children,
        collapsible = _props2.collapsible;

    var headerElement = this.buildHeader(this.state.open);

    return _react2['default'].createElement(
      _Panel2['default'],
      { expanded: this.state.open, onToggle: this.togglePanelVisibility },
      headerElement,
      _react2['default'].createElement(
        _Panel2['default'].Body,
        { collapsible: collapsible },
        children
      )
    );
  };

  return SidebarPanel;
}(_react2['default'].Component);

SidebarPanel.propTypes = {
  /**
   * Whether the SidebarPanel can be collapsed by triggering a connected SidebarHeader.
   */
  collapsible: _propTypes2['default'].bool,
  /**
   * Either a pre-built SidebarHeader component, or a title to be used in a default SidebarHeader. Unless you have additional Actions to be contained in a custom SidebarHeader, the default should do what you want.
   * @required
   */
  header: _propTypes2['default'].oneOfType([_propTypes2['default'].node, _propTypes2['default'].string]).isRequired,
  /**
   * Whether the SidebarPanel is open, or not.
   */
  open: _propTypes2['default'].bool,
  /**
   * If the SidebarPanel has validation, display an icon summarizing the validation state. Adds a span and Icon before the title.
   */
  validationState: _propTypes2['default'].oneOf(['success', 'error', 'incomplete', 'warning']),
  /**
   * The content to be displayed after the SidebarHeader.  Often a combination of SidebarItem, Timeline, or other form inputs.
   * @required
   */
  children: _propTypes2['default'].node.isRequired
};

SidebarPanel.defaultProps = {
  collapsible: false,
  open: true,
  validationState: null
};

exports['default'] = SidebarPanel;
module.exports = exports['default'];