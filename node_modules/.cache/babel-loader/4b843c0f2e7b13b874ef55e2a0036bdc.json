{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getScrollLeft = getScrollLeft;\nexports.getArrowSpacing = getArrowSpacing;\nexports[\"default\"] = positions;\nexports.minArrowPadding = void 0;\n\nvar _getDirection = _interopRequireDefault(require(\"./getDirection\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar minArrowPadding = 5;\nexports.minArrowPadding = minArrowPadding;\nvar bodyPadding = 10;\nvar noArrowDistance = 3;\n/**\n * cross browser scroll positions\n */\n\nfunction getScrollTop() {\n  return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n}\n\nfunction getScrollLeft() {\n  return window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\n}\n/**\n * Sets tip max width safely for mobile\n */\n\n\nfunction getTipMaxWidth() {\n  return typeof document !== 'undefined' ? document.documentElement.clientWidth - bodyPadding * 2 : 1000;\n}\n/**\n * Parses align mode from direction if specified with hyphen, defaulting to middle if not -\n * e.g. 'left-start' is mode 'start' and 'left' would be the default of 'middle'\n */\n\n\nfunction parseAlignMode(direction) {\n  var directionArray = direction.split('-');\n\n  if (directionArray.length > 1) {\n    return directionArray[1];\n  }\n\n  return 'middle';\n}\n\nfunction getArrowSpacing(props) {\n  var defaultArrowSpacing = props.arrow ? props.arrowSize : noArrowDistance;\n  return typeof props.distance === 'number' ? props.distance : defaultArrowSpacing;\n}\n/**\n * Gets wrapper's left position for top/bottom tooltips as well as needed width restriction\n */\n\n\nfunction getUpDownPosition(tip, target, state, direction, alignMode, props) {\n  var left = -10000000;\n  var top;\n  var transform = state.showTip ? undefined : 'translateX(-10000000px)';\n  var arrowSpacing = getArrowSpacing(props);\n\n  if (tip) {\n    // get wrapper left position\n    var scrollLeft = getScrollLeft();\n    var targetRect = target.getBoundingClientRect();\n    var targetLeft = targetRect.left + scrollLeft;\n    var halfTargetWidth = Math.round(target.offsetWidth / 2);\n    var tipWidth = Math.min(getTipMaxWidth(), tip.offsetWidth);\n    var arrowCenter = targetLeft + halfTargetWidth;\n    var arrowLeft = arrowCenter - props.arrowSize;\n    var arrowRight = arrowCenter + props.arrowSize;\n\n    if (alignMode === 'start') {\n      left = props.arrow ? Math.min(arrowLeft, targetLeft) : targetLeft;\n    } else if (alignMode === 'end') {\n      var rightWithArrow = Math.max(arrowRight, targetLeft + target.offsetWidth);\n      var rightEdge = props.arrow ? rightWithArrow : targetLeft + target.offsetWidth;\n      left = Math.max(rightEdge - tipWidth, bodyPadding + scrollLeft);\n    } else {\n      var centeredLeft = targetLeft + halfTargetWidth - Math.round(tipWidth / 2);\n      var availableSpaceOnLeft = bodyPadding + scrollLeft;\n      left = Math.max(centeredLeft, availableSpaceOnLeft);\n    } // check for right overhang\n\n\n    var rightOfTip = left + tipWidth;\n    var rightOfScreen = scrollLeft + document.documentElement.clientWidth - bodyPadding;\n    var rightOverhang = rightOfTip - rightOfScreen;\n\n    if (rightOverhang > 0) {\n      left -= rightOverhang;\n    }\n\n    if (direction === 'up') {\n      top = targetRect.top + getScrollTop() - (tip.offsetHeight + arrowSpacing);\n    } else {\n      top = targetRect.bottom + getScrollTop() + arrowSpacing;\n    }\n  }\n\n  return {\n    left: left,\n    top: top,\n    transform: transform\n  };\n}\n/**\n * gets top position for left/right arrows\n */\n\n\nfunction getLeftRightPosition(tip, target, state, direction, alignMode, props) {\n  var left = -10000000;\n  var top = 0;\n  var transform = state.showTip ? undefined : 'translateX(-10000000px)';\n  var arrowSpacing = getArrowSpacing(props);\n  var arrowPadding = props.arrow ? minArrowPadding : 0;\n\n  if (tip) {\n    var scrollTop = getScrollTop();\n    var scrollLeft = getScrollLeft();\n    var targetRect = target.getBoundingClientRect();\n    var targetTop = targetRect.top + scrollTop;\n    var halfTargetHeight = Math.round(target.offsetHeight / 2);\n    var arrowTop = targetTop + halfTargetHeight - props.arrowSize;\n    var arrowBottom = targetRect.top + scrollTop + halfTargetHeight + props.arrowSize; // TODO: handle close to edges better\n\n    if (alignMode === 'start') {\n      top = props.arrow ? Math.min(targetTop, arrowTop) : targetTop;\n    } else if (alignMode === 'end') {\n      var topForBottomAlign = targetRect.bottom + scrollTop - tip.offsetHeight;\n      top = props.arrow ? Math.max(topForBottomAlign, arrowBottom - tip.offsetHeight) : topForBottomAlign;\n    } else {\n      // default to middle, but don't go below body\n      var centeredTop = Math.max(targetTop + halfTargetHeight - Math.round(tip.offsetHeight / 2), bodyPadding + scrollTop); // make sure it doesn't go below the arrow\n\n      top = Math.min(centeredTop, arrowTop - arrowPadding);\n    } // check for bottom overhang\n\n\n    var bottomOverhang = top - scrollTop + tip.offsetHeight + bodyPadding - window.innerHeight;\n\n    if (bottomOverhang > 0) {\n      // try to add the body padding below the tip, but don't offset too far from the arrow\n      top = Math.max(top - bottomOverhang, arrowBottom + arrowPadding - tip.offsetHeight);\n    }\n\n    if (direction === 'right') {\n      left = targetRect.right + arrowSpacing + scrollLeft;\n    } else {\n      left = targetRect.left - arrowSpacing - tip.offsetWidth + scrollLeft;\n    }\n  }\n\n  return {\n    left: left,\n    top: top,\n    transform: transform\n  };\n}\n/**\n * sets the Arrow styles based on direction\n */\n\n\nfunction getArrowStyles(target, tip, direction, state, props) {\n  if (!target || !props.arrow) {\n    return {\n      top: '0',\n      left: '-10000000px'\n    };\n  }\n\n  var targetRect = target.getBoundingClientRect();\n  var halfTargetHeight = Math.round(target.offsetHeight / 2);\n  var halfTargetWidth = Math.round(target.offsetWidth / 2);\n  var scrollTop = getScrollTop();\n  var scrollLeft = getScrollLeft();\n  var arrowSpacing = getArrowSpacing(props);\n  var borderStyles = {};\n\n  switch (direction) {\n    case 'right':\n      borderStyles.borderTop = \"\".concat(props.arrowSize, \"px solid transparent\");\n      borderStyles.borderBottom = \"\".concat(props.arrowSize, \"px solid transparent\");\n\n      if (props.background) {\n        borderStyles.borderRight = \"\".concat(props.arrowSize, \"px solid \").concat(props.background);\n      } else {\n        borderStyles.borderRightWidth = \"\".concat(props.arrowSize, \"px\");\n        borderStyles.borderRightStyle = 'solid';\n      }\n\n      return _objectSpread({}, borderStyles, {\n        top: state.showTip && tip ? targetRect.top + scrollTop + halfTargetHeight - props.arrowSize : '-10000000px',\n        left: targetRect.right + scrollLeft + arrowSpacing - props.arrowSize\n      });\n\n    case 'left':\n      borderStyles.borderTop = \"\".concat(props.arrowSize, \"px solid transparent\");\n      borderStyles.borderBottom = \"\".concat(props.arrowSize, \"px solid transparent\");\n\n      if (props.background) {\n        borderStyles.borderLeft = \"\".concat(props.arrowSize, \"px solid \").concat(props.background);\n      } else {\n        borderStyles.borderLeftWidth = \"\".concat(props.arrowSize, \"px\");\n        borderStyles.borderLeftStyle = 'solid';\n      }\n\n      return _objectSpread({}, borderStyles, {\n        top: state.showTip && tip ? targetRect.top + scrollTop + halfTargetHeight - props.arrowSize : '-10000000px',\n        left: targetRect.left + scrollLeft - arrowSpacing - 1\n      });\n\n    case 'up':\n      borderStyles.borderLeft = \"\".concat(props.arrowSize, \"px solid transparent\");\n      borderStyles.borderRight = \"\".concat(props.arrowSize, \"px solid transparent\"); // if color is styled with css, we need everything except border-color, if styled with props, we add entire border rule\n\n      if (props.background) {\n        borderStyles.borderTop = \"\".concat(props.arrowSize, \"px solid \").concat(props.background);\n      } else {\n        borderStyles.borderTopWidth = \"\".concat(props.arrowSize, \"px\");\n        borderStyles.borderTopStyle = 'solid';\n      }\n\n      return _objectSpread({}, borderStyles, {\n        left: state.showTip && tip ? targetRect.left + scrollLeft + halfTargetWidth - props.arrowSize : '-10000000px',\n        top: targetRect.top + scrollTop - arrowSpacing\n      });\n\n    case 'down':\n    default:\n      borderStyles.borderLeft = \"\".concat(props.arrowSize, \"px solid transparent\");\n      borderStyles.borderRight = \"\".concat(props.arrowSize, \"px solid transparent\");\n\n      if (props.background) {\n        borderStyles.borderBottom = \"10px solid \".concat(props.background);\n      } else {\n        borderStyles.borderBottomWidth = \"\".concat(props.arrowSize, \"px\");\n        borderStyles.borderBottomStyle = 'solid';\n      }\n\n      return _objectSpread({}, borderStyles, {\n        left: state.showTip && tip ? targetRect.left + scrollLeft + halfTargetWidth - props.arrowSize : '-10000000px',\n        top: targetRect.bottom + scrollTop + arrowSpacing - props.arrowSize\n      });\n  }\n}\n/**\n * Returns the positions style rules\n */\n\n\nfunction positions(direction, forceDirection, tip, target, state, props) {\n  var alignMode = parseAlignMode(direction);\n  var trimmedDirection = direction.split('-')[0];\n  var realDirection = trimmedDirection;\n\n  if (!forceDirection && tip) {\n    var testArrowStyles = props.arrow && getArrowStyles(target, tip, trimmedDirection, state, props);\n    realDirection = (0, _getDirection[\"default\"])(trimmedDirection, tip, target, props, bodyPadding, testArrowStyles);\n  }\n\n  var maxWidth = getTipMaxWidth(); // force the tip to display the width we measured everything at when visible\n\n  var width;\n\n  if (tip) {\n    // adding the exact width on the first render forces a bogus line break, so add 1px the first time\n    var spacer = tip.style.width ? 0 : 1;\n    width = Math.min(tip.offsetWidth, maxWidth) + spacer;\n  }\n\n  var tipPosition = realDirection === 'up' || realDirection === 'down' ? getUpDownPosition(tip, target, state, realDirection, alignMode, props) : getLeftRightPosition(tip, target, state, realDirection, alignMode, props);\n  return {\n    tip: _objectSpread({}, tipPosition, {\n      maxWidth: maxWidth,\n      width: width\n    }),\n    arrow: getArrowStyles(target, tip, realDirection, state, props),\n    realDirection: realDirection\n  };\n}","map":null,"metadata":{},"sourceType":"script"}