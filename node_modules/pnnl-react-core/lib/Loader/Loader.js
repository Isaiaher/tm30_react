'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _prefixer = require('../__helpers/prefixer');

var _prefixer2 = _interopRequireDefault(_prefixer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Loader = function (_React$Component) {
  (0, _inherits3['default'])(Loader, _React$Component);

  function Loader() {
    (0, _classCallCheck3['default'])(this, Loader);
    return (0, _possibleConstructorReturn3['default'])(this, _React$Component.apply(this, arguments));
  }

  Loader.prototype.calculateRatio = function calculateRatio(value) {
    if (value < this.props.min) return 0;
    if (value > this.props.max) return 1;
    return (value - this.props.min) / (this.props.max - this.props.min);
  };

  Loader.prototype.circularStyle = function circularStyle() {
    var _stroke = void 0;

    if (this.props.mode !== 'indeterminate') {
      _stroke = { strokeDasharray: 2 * Math.PI * 25 * this.calculateRatio(this.props.value) + ', 400' };
    } else if (typeof window !== 'undefined') {
      if (window.navigator.userAgent.match(/Trident\/7\./)) {
        // Used for matching IE11. It does not support animation of the stroke-dasharray CSS prop
        _stroke = { strokeDasharray: '100' };
      }
    }
    return _stroke;
  };

  Loader.prototype.linearStyle = function linearStyle() {
    if (this.props.mode !== 'indeterminate') {
      return {
        buffer: (0, _prefixer2['default'])({ transform: 'scaleX(' + this.calculateRatio(this.props.buffer) + ')' }),
        value: (0, _prefixer2['default'])({ transform: 'scaleX(' + this.calculateRatio(this.props.value) + ')' })
      };
    }
    return {};
  };

  Loader.prototype.renderCircular = function renderCircular() {
    return _react2['default'].createElement(
      'svg',
      { className: 'circle', viewBox: '0 0 60 60' },
      _react2['default'].createElement('circle', { className: 'path', style: this.circularStyle(), cx: '30', cy: '30', r: '25' })
    );
  };

  Loader.prototype.renderLinear = function renderLinear() {
    var _linearStyle = this.linearStyle(),
        buffer = _linearStyle.buffer,
        value = _linearStyle.value;

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement('span', { 'data-ref': 'buffer', className: 'buffer', style: buffer }),
      _react2['default'].createElement('span', { 'data-ref': 'value', className: 'value', style: value })
    );
  };

  Loader.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        disabled = _props.disabled,
        max = _props.max,
        min = _props.min,
        mode = _props.mode,
        show = _props.show,
        size = _props.size,
        style = _props.style,
        type = _props.type,
        value = _props.value;
    var _props2 = this.props,
        multicolor = _props2.multicolor,
        color = _props2.color;


    if (!show) {
      return null;
    }

    multicolor = color || type === 'linear' ? false : multicolor;
    color = color ? color + '-path' : null;

    var _className = (0, _classnames2['default'])('pnnl-loader', type, mode, { multicolor: multicolor }, color, className);
    var circularStyle = size && type === 'circular' ? { width: size + 'em', height: size + 'em' } : null;
    var _style = (0, _assign2['default'])({}, circularStyle, style);

    return _react2['default'].createElement(
      'div',
      {
        disabled: disabled,
        'data-react-core': 'loader',
        'aria-valuenow': value,
        'aria-valuemin': min,
        'aria-valuemax': max,
        className: _className,
        style: _style
      },
      type === 'circular' ? this.renderCircular() : this.renderLinear()
    );
  };

  return Loader;
}(_react2['default'].Component);

Loader.propTypes = {
  /**
     * Used to style the buffer element in the linear progress.
     * */
  buffer: _propTypes2['default'].number,
  /**
     * Used to add additional CSS classes to the root of the progress bar.
     * */
  className: _propTypes2['default'].string,
  /**
     * Used as a style shortcut for the progress bar with branded colors.
     * */
  color: _propTypes2['default'].oneOf(['white', 'silver', 'copper', 'bronze', 'gold', 'platinum', 'onyx', 'emerald', 'sapphire', 'ruby', 'mercury', 'topaz', 'amethyst', 'garnet', 'emsl-green']),
  /**
     * If true, component will be disabled but still shown on the screen.
     * @default false
     * */
  disabled: _propTypes2['default'].bool,
  /**
     * Maximum value permitted. Useful for setting custom scales that don't align to a 0 to 100 scale.
     * */
  max: _propTypes2['default'].number,
  /**
     * Minimum value permitted. Useful for setting custom scales that don't align to a 0 to 100 scale.
     * */
  min: _propTypes2['default'].number,
  /**
     * Mode of the progress bar.
     * */
  mode: _propTypes2['default'].oneOf(['determinate', 'indeterminate']),
  /**
     * If true, the circular progress bar will be changing its color. If a color value is provided as well, multicolor will be ignored.
     * */
  multicolor: _propTypes2['default'].bool,
  /**
     * If false, component will return null and will not present any markup. It is recommended to conditionally require this component
     * in a parent container instead to avoid the unnecessary lifecycle calls of this component.
     * */
  show: _propTypes2['default'].bool,
  /**
     * Used to set the relative size of a circular progress bar in `em` sizing. This will allow a circular progress bar to grow to the same size of its
     * neighbor content or be overridden with a custom scaling factor.
     * */
  size: _propTypes2['default'].number,
  /**
     * Pass-through style props object.
     * */
  style: _propTypes2['default'].object, // eslint-disable-line react/forbid-prop-types
  /**
     * The type of the progress bar.
     * */
  type: _propTypes2['default'].oneOf(['linear', 'circular']),
  /**
     * Used to show the current value of the progress bar.
     * */
  value: _propTypes2['default'].number
};

Loader.defaultProps = {
  buffer: 0,
  max: 100,
  min: 0,
  mode: 'indeterminate',
  multicolor: false,
  show: true,
  size: 1,
  type: 'circular',
  value: 0,
  className: null,
  color: null,
  disabled: false,
  style: {}
};

exports['default'] = Loader;
module.exports = exports['default'];