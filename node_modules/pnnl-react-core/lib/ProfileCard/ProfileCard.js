'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _phoneParser = require('../__helpers/phoneParser');

var _phoneParser2 = _interopRequireDefault(_phoneParser);

var _Avatar = require('../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _departments = require('../__helpers/departments');

var _departments2 = _interopRequireDefault(_departments);

var _Image = require('../Image');

var _Image2 = _interopRequireDefault(_Image);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var ProfileCard = function ProfileCard(_ref) {
  var isCompact = _ref.isCompact,
      isInsidePopover = _ref.isInsidePopover,
      onCloseCallback = _ref.onCloseCallback,
      person = _ref.person;
  var id = person.id,
      firstName = person.firstName,
      lastName = person.lastName,
      title = person.title,
      phoneNumber = person.phoneNumber,
      emailAddress = person.emailAddress,
      mailstop = person.mailstop,
      portraitLink = person.portraitLink;
  // Person may not have an assigned facility and or space (eg. works from home)

  var _person$facility = person.facility;
  _person$facility = _person$facility === undefined ? {} : _person$facility;
  var _person$facility$abbr = _person$facility.abbreviation,
      abbreviation = _person$facility$abbr === undefined ? null : _person$facility$abbr;
  var _person$space = person.space;
  _person$space = _person$space === undefined ? {} : _person$space;
  var _person$space$locatio = _person$space.locationId,
      locationId = _person$space$locatio === undefined ? null : _person$space$locatio,
      _person$space$name = _person$space.name,
      locationName = _person$space$name === undefined ? null : _person$space$name;
  var _person$department = person.department;
  _person$department = _person$department === undefined ? {} : _person$department;
  var _person$department$id = _person$department.id,
      departmentId = _person$department$id === undefined ? null : _person$department$id,
      _person$department$co = _person$department.code,
      code = _person$department$co === undefined ? null : _person$department$co,
      _person$department$na = _person$department.name,
      departmentName = _person$department$na === undefined ? null : _person$department$na;


  var deptColor = code ? (0, _departments2['default'])(code) : 'platinum-50';
  var profileClasses = (0, _classnames2['default'])('PnnlProfileCard', { isCompact: isCompact }, deptColor);

  var closeButton = isInsidePopover ? _react2['default'].createElement(
    'button',
    { className: 'close', onClick: onCloseCallback || null },
    '\xD7'
  ) : null;
  var name = firstName + ' ' + lastName;

  var avatarText = firstName.slice(0, 1);
  avatarText = avatarText.concat(lastName.slice(0, 1));
  var avatarComponent = portraitLink !== undefined ? _react2['default'].createElement(_Avatar2['default'], { src: portraitLink, size: 'lg' }) : _react2['default'].createElement(
    _Avatar2['default'],
    { size: 'lg' },
    avatarText
  );

  // Only allow the IM link if the person has a PNNL email address
  var pnnlIM = emailAddress && emailAddress.indexOf('@pnnl.gov') !== -1;

  return _react2['default'].createElement(
    'div',
    { className: profileClasses, key: id },
    _react2['default'].createElement(
      'div',
      null,
      closeButton
    ),
    _react2['default'].createElement(
      'section',
      { className: 'person' },
      avatarComponent,
      firstName && lastName ? _react2['default'].createElement(
        'h1',
        null,
        name
      ) : null,
      title ? _react2['default'].createElement(
        'small',
        { className: 'jobTitle' },
        title
      ) : null
    ),
    _react2['default'].createElement(
      'ul',
      { className: 'contacts' },
      pnnlIM && _react2['default'].createElement(
        'li',
        { className: 'lync' },
        _react2['default'].createElement(_Icon2['default'], { icon: 'comment', iconDisplay: 'outline' }),
        _react2['default'].createElement(
          'a',
          { href: 'sip:' + emailAddress.toLowerCase() },
          'Instant Message'
        )
      ),
      phoneNumber && _react2['default'].createElement(
        'li',
        { className: 'phone' },
        _react2['default'].createElement(_Icon2['default'], { icon: 'phone', iconDisplay: 'outline' }),
        _react2['default'].createElement(
          'a',
          { href: 'tel:' + (0, _phoneParser2['default'])(phoneNumber, '+1xxxxxxxxxx') },
          (0, _phoneParser2['default'])(phoneNumber, '(xxx) xxx-xxxx')
        )
      ),
      emailAddress && _react2['default'].createElement(
        'li',
        { className: 'email' },
        _react2['default'].createElement(_Icon2['default'], { icon: 'email', iconDisplay: 'outline' }),
        _react2['default'].createElement(
          'a',
          { href: 'mailto:' + emailAddress.toLowerCase() },
          emailAddress.toLowerCase()
        )
      ),
      locationId && _react2['default'].createElement(
        'li',
        { className: 'location' },
        _react2['default'].createElement(_Icon2['default'], { icon: 'location', iconDisplay: 'outline' }),
        _react2['default'].createElement(
          'a',
          { href: _config2['default'].mitLocation(locationId), target: '_blank' },
          abbreviation ? _react2['default'].createElement(
            'span',
            { className: 'facility_abbreviation' },
            abbreviation,
            ' '
          ) : null,
          locationName ? _react2['default'].createElement(
            'span',
            { className: 'facility_location' },
            locationName
          ) : null,
          mailstop ? _react2['default'].createElement(
            'span',
            { className: 'mailstop' },
            'MSIN ' + mailstop
          ) : null,
          locationId ? _react2['default'].createElement(_Image2['default'], { src: _config2['default'].opwhse.locationImage(locationId), alt: locationName }) : null
        )
      ),
      departmentId && _react2['default'].createElement(
        'li',
        { className: 'department' },
        _react2['default'].createElement(
          _Avatar2['default'],
          { size: 'xs', className: deptColor },
          _react2['default'].createElement(_Icon2['default'], { icon: 'org' })
        ),
        _react2['default'].createElement(
          'a',
          { href: _config2['default'].deptLocation(departmentId), target: '_blank' },
          departmentName
        )
      )
    )
  );
}; /* eslint react/jsx-no-bind: 0 */


ProfileCard.propTypes = {
  /**
    * A Person object for the person you want to create the card for.
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/people/{hid}/?expand=space,facility,department
    * @required
    * */
  person: _propTypes2['default'].shape({
    id: _propTypes2['default'].string,
    firstName: _propTypes2['default'].string,
    lastName: _propTypes2['default'].string,
    title: _propTypes2['default'].string,
    phoneNumber: _propTypes2['default'].string,
    emailAddress: _propTypes2['default'].string,
    mailstop: _propTypes2['default'].string,
    mapLink: _propTypes2['default'].string,
    portraitLink: _propTypes2['default'].string,
    facility: _propTypes2['default'].shape({
      abbreviation: _propTypes2['default'].string
    }),
    space: _propTypes2['default'].shape({
      locationId: _propTypes2['default'].string,
      name: _propTypes2['default'].string
    }),
    department: _propTypes2['default'].shape({
      id: _propTypes2['default'].string,
      code: _propTypes2['default'].string,
      name: _propTypes2['default'].string
    })
  }).isRequired,

  /**
    * Callback you want to run when the close button is `clicked`.
    *
    * Only applies when `isInsidePopover` property is `true`
    * */
  onCloseCallback: _propTypes2['default'].func,

  /**
    * Whether or not the contact card is in a compact format.
    * */
  isCompact: _propTypes2['default'].bool,

  /**
    * Whether or not the contact card is included in a Popover.
    * */
  isInsidePopover: _propTypes2['default'].bool
};

ProfileCard.defaultProps = {
  onCloseCallback: undefined,
  isCompact: false,
  isInsidePopover: false
};

exports['default'] = ProfileCard;
module.exports = exports['default'];