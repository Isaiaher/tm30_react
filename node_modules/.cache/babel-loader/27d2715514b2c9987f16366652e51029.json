{"ast":null,"code":"import _defineProperty from \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Examples.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Examples.\n *\n * A component for the drop down menu of all the different examples.\n * Takes the headers (names) of each example from the \"ExampleHeaders.json\" file.\n * Makes an api call to the server using the \"ExamplesSpds.json\" data.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport data from \"../../../../Data/ExamplesSpds.json\";\nimport exampleHeaders from \"../../../../Data/ExampleHeaders.json\";\nimport Grid from \"react-bootstrap/es/Grid\";\nimport Col from \"react-bootstrap/es/Col\";\nimport Row from \"react-bootstrap/es/Row\";\nimport ReactDataSheet from \"react-datasheet\";\nimport SPDxWavelength from \"../../Report/Plots/SPDxWavelength\"; //Redux\n\nimport { setSPDxWavelength } from \"../../../../actions/dataActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n/**\n * Examples Class\n */\n\nclass Examples extends React.Component {\n  /**\n   * Constructor method that creates the state and \"examples\" array\n   * which holds all the examples names, imported from \"ExampleHeaders.json\"\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.populateSPDcells = () => {\n      var grid_items = [];\n      var wavelength_temp = [];\n      var spd_temp = [];\n      var i;\n\n      for (i = 0; i < 401; i++) {\n        grid_items.push([{\n          readOnly: true,\n          value: i + 380,\n          className: \"cell\"\n        }, {\n          value: data.data[i][this.state.example_number]\n        }]);\n        wavelength_temp[i] = i + 380;\n        spd_temp[i] = data.data[i][this.state.example_number];\n      }\n\n      this.props.setSPDxWavelength(spd_temp, wavelength_temp);\n      this.setState({\n        grid: [[{\n          readOnly: true,\n          value: \"Wavelength\"\n        }, {\n          readOnly: true,\n          className: \"cell\",\n          value: \"SPD\"\n        }], ...grid_items]\n      });\n    };\n\n    this.state = {\n      example_number: \"\",\n      loading: false,\n      data: [],\n      tableReady: false,\n      disabled: true,\n      name: \"\",\n      grid: [[{\n        readOnly: true,\n        value: \"Wavelength\"\n      }, {\n        readOnly: true,\n        className: \"cell\",\n        value: \"SPD\"\n      }]]\n    };\n\n    var _i;\n\n    var header_length = exampleHeaders.headers.length;\n    this.examples = [];\n    /**\n     * Push all the example names into \"this.examples\"\n     */\n\n    for (_i = 0; _i < header_length; _i++) {\n      this.examples.push(exampleHeaders.headers[_i][\"Example\"]);\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /**\n   * Handler function to perform the necessary steps to make the API command.\n   * The function is called when 'Calculate' button under the examples is clicked\n   * @param {*} event\n   */\n\n\n  handleSubmit(event) {\n    var wavelength = [];\n\n    if (this.state.example_number !== \"\") {\n      var exSpd = []; //The example SPD being grabbed from the \"ExamplesSpds.json\" file\n\n      var i;\n\n      for (i = 0; i < 401; i++) {\n        exSpd.push(data.data[i][this.state.example_number]);\n        wavelength.push(380 + i);\n      }\n\n      event.preventDefault();\n      /**\n       * Set the loading state to true to enable the spinner icon\n       */\n\n      this.setState({\n        loading: true\n      }, () => {\n        axios.defaults.headers.common = {};\n        axios.defaults.headers.common.accept = \"application/json\";\n        /**\n         * Call to the API with the Example SPD Information.\n         */\n\n        axios.post(\"http://localhost:5000/api/tm30Paste\", {\n          spd: exSpd,\n          wavelength: wavelength\n        }).then(res => {\n          return res.data;\n        }).then(data => {\n          /**\n           * Set the state that loading is now false (No Spinner),\n           * data is now the JSON from the TM30 Web C program,\n           * and table ready is true\n           * TODO: TableReady isn't really needed anymore due to not having a table on the Calculator page.\n           */\n          this.setState({\n            loading: false,\n            data: data.data,\n            tableReady: true\n          });\n          /**\n           * Redux command that we can use later to cache the data\n           * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n           */\n\n          /**\n           * Pushes the data to the Reports page and redirects to that page\n           */\n\n          this.props.history.push({\n            pathname: \"/Report\",\n            state: {\n              data: this.state.data,\n              name: this.state.name\n            }\n          });\n        });\n      });\n    }\n  }\n\n  /**\n   * Function that handles a change in the drop down menu.\n   * Basically the only functionality is that if the value is not equal to \"\" (Choose Example)\n   * then the button is disabled. Doesn't allow the user to send empty data or invalid data.\n   * @param {*} event   //The event of changeing the drop down menu\n   */\n  handleChange(event) {\n    if (event.target.value === \"\") {\n      this.setState({\n        example_number: event.target.value,\n        disabled: true,\n        tableReady: false\n      });\n    } else {\n      var example = event.target.value;\n      this.setState({\n        example_number: example,\n        disabled: false,\n        tableReady: true,\n        //name: example.substr(example.indexOf(\" \") + 1)\n        name: example\n      }, () => {\n        this.populateSPDcells();\n      });\n    }\n  }\n  /**\n   * Render the component\n   */\n\n\n  render() {\n    const loading = this.state.loading; //If the loading spinner should be visible\n\n    /**\n     * Mapping the example names stored in \"this.example\" to be actual drop-down menu items\n     */\n\n    let optionItems = this.examples.map(example => React.createElement(\"option\", {\n      key: example,\n      value: example,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, example));\n    /**\n     * Return of the render\n     */\n\n    return (\n      /**\n       * Start of the form with a submission handler from above\n       */\n      React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        value: this.state.example_number,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Choose an Example\"), optionItems), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), loading ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \" \", \"Calculating Results \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), \" \", React.createElement(LoadingSpinner, {\n        color: \"copper\",\n        size: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), \" \")) : React.createElement(Button, {\n        bsSize: \"sm\",\n        type: \"submit\",\n        disabled: this.state.disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Calculate\"), this.state.tableReady ? React.createElement(\"div\", {\n        style: {\n          width: \"80%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(SPDxWavelength, {\n        spd: this.props.SPDxWavelength.spd,\n        wavelength: this.props.SPDxWavelength.wavelengths,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(ReactDataSheet, {\n        data: this.state.grid,\n        valueRenderer: cell => cell.value,\n        onCellsChanged: changes => {\n          const grid = this.state.grid.map(row => [...row]);\n          changes.forEach(({\n            cell,\n            row,\n            col,\n            value\n          }) => {\n            grid[row][col] = _objectSpread({}, grid[row][col], {\n              value\n            });\n          });\n          this.setState({\n            grid\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      })))))\n    );\n  }\n\n}\n\nExamples.propTypes = {\n  setSPDxWavelength: PropTypes.func.isRequired //data: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  SPDxWavelength: {\n    spd: state.dataReducers.spd,\n    wavelengths: state.dataReducers.wavelengths\n  }\n});\n/**\n * Export withRouter to be able to jump to the Reports page with the JSON Data\n */\n\n\nexport default connect(mapStateToProps, {\n  setSPDxWavelength\n})(Examples); //export default withRouter(Examples);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Examples.jsx"],"names":["React","Button","axios","withRouter","LoadingSpinner","data","exampleHeaders","Grid","Col","Row","ReactDataSheet","SPDxWavelength","setSPDxWavelength","PropTypes","connect","Examples","Component","constructor","props","populateSPDcells","grid_items","wavelength_temp","spd_temp","i","push","readOnly","value","className","state","example_number","setState","grid","loading","tableReady","disabled","name","header_length","headers","length","examples","handleSubmit","bind","handleChange","event","wavelength","exSpd","preventDefault","defaults","common","accept","post","spd","then","res","history","pathname","target","example","render","optionItems","map","width","wavelengths","cell","changes","row","forEach","col","propTypes","func","isRequired","mapStateToProps","dataReducers"],"mappings":"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","sourcesContent":["/**\n * Examples.\n *\n * A component for the drop down menu of all the different examples.\n * Takes the headers (names) of each example from the \"ExampleHeaders.json\" file.\n * Makes an api call to the server using the \"ExamplesSpds.json\" data.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\nimport axios from \"axios\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport data from \"../../../../Data/ExamplesSpds.json\";\nimport exampleHeaders from \"../../../../Data/ExampleHeaders.json\";\nimport Grid from \"react-bootstrap/es/Grid\";\nimport Col from \"react-bootstrap/es/Col\";\nimport Row from \"react-bootstrap/es/Row\";\nimport ReactDataSheet from \"react-datasheet\";\nimport SPDxWavelength from \"../../Report/Plots/SPDxWavelength\";\n//Redux\nimport { setSPDxWavelength } from \"../../../../actions/dataActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n/**\n * Examples Class\n */\nclass Examples extends React.Component {\n  /**\n   * Constructor method that creates the state and \"examples\" array\n   * which holds all the examples names, imported from \"ExampleHeaders.json\"\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      example_number: \"\",\n      loading: false,\n      data: [],\n      tableReady: false,\n      disabled: true,\n      name: \"\",\n      grid: [\n        [\n          { readOnly: true, value: \"Wavelength\" },\n          { readOnly: true, className: \"cell\", value: \"SPD\" }\n        ]\n      ]\n    };\n    var i;\n    var header_length = exampleHeaders.headers.length;\n    this.examples = [];\n    /**\n     * Push all the example names into \"this.examples\"\n     */\n    for (i = 0; i < header_length; i++) {\n      this.examples.push(exampleHeaders.headers[i][\"Example\"]);\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /**\n   * Handler function to perform the necessary steps to make the API command.\n   * The function is called when 'Calculate' button under the examples is clicked\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    var wavelength = [];\n    if (this.state.example_number !== \"\") {\n      var exSpd = []; //The example SPD being grabbed from the \"ExamplesSpds.json\" file\n      var i;\n      for (i = 0; i < 401; i++) {\n        exSpd.push(data.data[i][this.state.example_number]);\n        wavelength.push(380 + i);\n      }\n      event.preventDefault();\n      /**\n       * Set the loading state to true to enable the spinner icon\n       */\n      this.setState({ loading: true }, () => {\n        axios.defaults.headers.common = {};\n        axios.defaults.headers.common.accept = \"application/json\";\n        /**\n         * Call to the API with the Example SPD Information.\n         */\n        axios\n          .post(\"http://localhost:5000/api/tm30Paste\", {\n            spd: exSpd,\n            wavelength: wavelength\n          })\n          .then(res => {\n            return res.data;\n          })\n          .then(data => {\n            /**\n             * Set the state that loading is now false (No Spinner),\n             * data is now the JSON from the TM30 Web C program,\n             * and table ready is true\n             * TODO: TableReady isn't really needed anymore due to not having a table on the Calculator page.\n             */\n            this.setState({\n              loading: false,\n              data: data.data,\n              tableReady: true\n            });\n\n            /**\n             * Redux command that we can use later to cache the data\n             * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n             */\n\n            /**\n             * Pushes the data to the Reports page and redirects to that page\n             */\n            this.props.history.push({\n              pathname: \"/Report\",\n              state: {\n                data: this.state.data,\n                name: this.state.name\n              }\n            });\n          });\n      });\n    }\n  }\n\n  populateSPDcells = () => {\n    var grid_items = [];\n    var wavelength_temp = [];\n    var spd_temp = [];\n    var i;\n    for (i = 0; i < 401; i++) {\n      grid_items.push([\n        {\n          readOnly: true,\n          value: i + 380,\n          className: \"cell\"\n        },\n        { value: data.data[i][this.state.example_number] }\n      ]);\n      wavelength_temp[i] = i + 380;\n      spd_temp[i] = data.data[i][this.state.example_number];\n    }\n    this.props.setSPDxWavelength(spd_temp, wavelength_temp);\n    this.setState({\n      grid: [\n        [\n          { readOnly: true, value: \"Wavelength\" },\n          { readOnly: true, className: \"cell\", value: \"SPD\" }\n        ],\n        ...grid_items\n      ]\n    });\n  };\n\n  /**\n   * Function that handles a change in the drop down menu.\n   * Basically the only functionality is that if the value is not equal to \"\" (Choose Example)\n   * then the button is disabled. Doesn't allow the user to send empty data or invalid data.\n   * @param {*} event   //The event of changeing the drop down menu\n   */\n  handleChange(event) {\n    if (event.target.value === \"\") {\n      this.setState({\n        example_number: event.target.value,\n        disabled: true,\n        tableReady: false\n      });\n    } else {\n      var example = event.target.value;\n      this.setState(\n        {\n          example_number: example,\n          disabled: false,\n          tableReady: true,\n          //name: example.substr(example.indexOf(\" \") + 1)\n          name: example\n        },\n        () => {\n          this.populateSPDcells();\n        }\n      );\n    }\n  }\n  /**\n   * Render the component\n   */\n  render() {\n    const loading = this.state.loading; //If the loading spinner should be visible\n    /**\n     * Mapping the example names stored in \"this.example\" to be actual drop-down menu items\n     */\n    let optionItems = this.examples.map(example => (\n      <option key={example} value={example}>\n        {example}\n      </option>\n    ));\n    /**\n     * Return of the render\n     */\n    return (\n      /**\n       * Start of the form with a submission handler from above\n       */\n      <Grid>\n        <Row>\n          <Col xs={4}>\n            <form onSubmit={this.handleSubmit}>\n              <select\n                value={this.state.example_number}\n                onChange={this.handleChange}\n              >\n                <option value=\"\">Choose an Example</option>\n                {optionItems}\n              </select>\n              <br />\n              {loading ? (\n                <div>\n                  <label>\n                    {\" \"}\n                    Calculating Results <br />{\" \"}\n                    <LoadingSpinner color=\"copper\" size={6} />{\" \"}\n                  </label>\n                </div>\n              ) : (\n                <Button\n                  bsSize=\"sm\"\n                  type=\"submit\"\n                  disabled={this.state.disabled}\n                >\n                  Calculate\n                </Button>\n              )}\n              {this.state.tableReady ? (\n                <div\n                  style={{\n                    width: \"80%\"\n                  }}\n                >\n                  <br />\n                  <SPDxWavelength\n                    spd={this.props.SPDxWavelength.spd}\n                    wavelength={this.props.SPDxWavelength.wavelengths}\n                  />\n                  <br />\n                  <ReactDataSheet\n                    data={this.state.grid}\n                    valueRenderer={cell => cell.value}\n                    onCellsChanged={changes => {\n                      const grid = this.state.grid.map(row => [...row]);\n                      changes.forEach(({ cell, row, col, value }) => {\n                        grid[row][col] = { ...grid[row][col], value };\n                      });\n                      this.setState({ grid });\n                    }}\n                  />\n                </div>\n              ) : (\n                <div />\n              )}\n            </form>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nExamples.propTypes = {\n  setSPDxWavelength: PropTypes.func.isRequired\n  //data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  SPDxWavelength: {\n    spd: state.dataReducers.spd,\n    wavelengths: state.dataReducers.wavelengths\n  }\n});\n\n/**\n * Export withRouter to be able to jump to the Reports page with the JSON Data\n */\nexport default connect(mapStateToProps, { setSPDxWavelength })(Examples);\n//export default withRouter(Examples);\n"]},"metadata":{},"sourceType":"module"}