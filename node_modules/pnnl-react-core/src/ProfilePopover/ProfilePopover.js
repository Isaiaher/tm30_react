import React, { Component } from 'react';
import PropTypes from 'prop-types';

import Overlay from 'react-bootstrap/lib/Overlay';
import Popover from 'react-bootstrap/lib/Popover';
import Person from '../Person';
import ProfileCard from '../ProfileCard';

import config from '../config';

class ProfilePopover extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: props.person || undefined,
      show: false,
    };
    this.getUserData = this.getUserData.bind(this);
    this.toggle = this.toggle.bind(this);
  }

  componentDidMount() {
    if (!this.props.id && !this.props.person.id) {
      throw new Error('A person identifier was not supplied to ProfilePopover. This can be either props.id (Hanford ID) or props.person.id.');
    } else if (this.props.id) {
      this.getUserData(this.props.id)
        .then(data => this.updateState(data));
    }
  }

  componentWillUnmount() {
    if (this.abortController) {
      this.abortController.abort();
    }
  }

  getUserData(hid) {
    return new Promise((resolve, reject) => {
      if (this.props.id || !this.props.person.facility || !this.props.person.space) {
        fetch(config.opwhse.person(hid), {
          signal: this.abortController && this.abortController.signal,
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
        })
          .then((response) => {
            if (response.status >= 400) {
              throw new Error(response.statusText);
            } else if (response.ok) {
              return response;
            }
            throw new Error(`An error resulted when trying to call the profile form the API. ${response.error}`);
          })
          .then((resp) => {
            resp.json().then((data) => {
              resolve(data);
            });
          })
          .catch((error) => {
            if (error.name === 'AbortError') return;
            reject(new Error(`An error resulted when trying to call the profile form the API. ${error}`));
          });
      }
    });
  }

  abortController = (window && window.AbortController) ? new window.AbortController() : undefined;

  updateState = (data) => {
    this.setState({
      data: Object.assign(
        data,
        { mapLink: (data.space) ? data.space.thumbnailImage : config.defaultLocationImage },
        { portraitLink: config.opwhse.personImage(data.id) },
      ),
    });
  }

  toggle() {
    this.setState({ show: !this.state.show });
  }

  render() {
    const defaultPerson = {
      id: '12345',
      firstName: ' ',
      lastName: ' ',
      title: ' '
    };
    const personProps = {
      person: this.state.data || defaultPerson,
      align: this.props.align,
      altName: this.props.altName,
      altTitle: this.props.altTitle,
      onClickCallback: this.toggle,
      isSwapped: this.props.isSwapped,
      isCondensed: this.props.isCondensed,
      size: this.props.size,
    };

    if (this.state.data) {
      const overlayProps = {
        show: this.state.show,
        target: this.overlayTarget,
        placement: this.props.placement,
        onHide: () => this.toggle(),
      };
      const cardProps = {
        person: this.state.data,
        isCompact: this.props.isCompact,
        isInsidePopover: true,
        onCloseCallback: this.toggle,
      };

      return (
        <div className="PnnlProfileCardContainer">
          <Person {...personProps} ref={(e) => { this.overlayTarget = e; }} />
          <Overlay {...overlayProps} rootClose >
            <Popover id="PnnlProfilePopover">
              <ProfileCard {...cardProps} />
            </Popover>
          </Overlay>
        </div>
      );
    }

    return this.props.altDefaultTemplate || (
      <div className="PnnlProfileCardContainer">
        <Person {...personProps} />
      </div>
    );
  }
}

ProfilePopover.propTypes = {
  /**
    * A Hanford ID for the person you want to create the card for.
    *
    * The ID will be ran against: https://api.pnl.gov/operations/v2/people/{hid}?expand=space,facility
    *
    * `Note:` Not required if a person object is provided.
    * @required
    * */
  id: PropTypes.string,

  /**
    * A Person object for the person you want to create the card for.
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/people/{hid}/?expand=space,facility,department
    *
    * `Note:` Not required if an id is provided.
    * @required
    * */
  person: PropTypes.shape({
    id: PropTypes.string,
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    title: PropTypes.string,
    phoneNumber: PropTypes.string,
    emailAddress: PropTypes.string,
    mailstop: PropTypes.string,
    mapLink: PropTypes.string,
    portraitLink: PropTypes.string,
    facility: PropTypes.shape({
      abbreviation: PropTypes.string,
    }),
    space: PropTypes.shape({
      locationId: PropTypes.string,
      name: PropTypes.string,
    }),
    department: PropTypes.shape({
      id: PropTypes.string,
      code: PropTypes.string,
      name: PropTypes.string,
    })
  }),

  /**
   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
   */
  align: PropTypes.oneOf(['left', 'right', 'center']),

  /**
    * Overrides the `name` on the Person display.
    * */
  altName: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),

  /**
    * Overrides the `title` on the Person display.
    * */
  altTitle: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),

  /**
     * Overrides the default template when no person is found
     */
  altDefaultTemplate: PropTypes.element,

  /**
    * Sets the direction the ProfileCard is positioned towards.
    * */
  placement: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),

  /**
    * Whether or not the contact card is in a compact format.
    * */
  isCompact: PropTypes.bool,

  /**
    * Swaps the `name` and `title` positions on the Person display.
    *
    * This will not change the styles of those two locations. It will only swap the values of the text pieces.
    * */
  isSwapped: PropTypes.bool,

  /**
    * Allows a condensed view of the Person display when true. By default, the `name` of the individual will
    * appear below the image of the individual in a smaller font size, without the display of the `title`.
    * If isSwapped is also true, the `title` of the individual will be displayed in place of the `name`.
    *
    * This will add a class, `condensed`, to the Person display.
    * */
  isCondensed: PropTypes.bool,

  /**
   * The size of the Avatar to be generated.
   */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
};

ProfilePopover.defaultProps = {
  id: undefined,
  person: undefined,
  align: 'left',
  altName: undefined,
  altTitle: undefined,
  altDefaultTemplate: undefined,
  placement: 'right',
  isCompact: false,
  isSwapped: false,
  isCondensed: false,
  size: 'md',
};

export default ProfilePopover;
