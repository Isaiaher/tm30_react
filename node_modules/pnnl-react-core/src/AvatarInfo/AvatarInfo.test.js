import React from 'react';
import { shallow } from 'enzyme';

import AvatarInfo from '../AvatarInfo';
import Chip from '../Chip';

/*
* During test writing you can selectively run just these tests or skip individual ones while you
* work on others https://facebook.github.io/jest/docs/en/api.html#testskipname-fn
*/
describe('<AvatarInfo />', () => {
  const defaultProps = {
    title: 'Geoff Elliott',
  };

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('../index.js');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.AvatarInfo).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(AvatarInfo).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    // it('should log 1 error when missing required prop.', () => {
    //   console.error = jest.fn();
    //   shallow(<AvatarInfo />);
    //   expect(console.error).toHaveBeenCalledTimes(1);
    //   console.error.mockClear();
    // });
    it('should render with no props supplied', () => {
      const wrapper = shallow(<AvatarInfo />);
      expect(wrapper).toMatchSnapshot();
    });
    it('should render with string subTitle', () => {
      const wrapper = shallow(<AvatarInfo {...defaultProps} subTitle="Foo" />);
      expect(wrapper).toMatchSnapshot();
    });
    it('should render with element subTitle', () => {
      const wrapper = shallow(<AvatarInfo {...defaultProps} subTitle={<Chip label="foo" />} />);
      expect(wrapper).toMatchSnapshot();
    });
  });

  describe('AvatarInfo render logic', () => {
    it('AvatarInfo should render left by default', () => {
      const wrapper = shallow(<AvatarInfo {...defaultProps} />);
      expect(wrapper.find('.PnnlAvatarInfo-left').exists()).toEqual(true);
    });
    it('AvatarInfo should render right justified', () => {
      const wrapper = shallow(<AvatarInfo {...defaultProps} align="right" />);
      expect(wrapper.find('.PnnlAvatarInfo-right').exists()).toEqual(true);
    });
    it('AvatarInfo should render center justified', () => {
      const wrapper = shallow(<AvatarInfo {...defaultProps} align="center" />);
      expect(wrapper.find('.PnnlAvatarInfo-center').exists()).toEqual(true);
    });
    it('AvatarInfo should render subTitle when string', () => {
      const subTitle = 'foo';
      const wrapper = shallow(<AvatarInfo {...defaultProps} align="center" subTitle={subTitle} />);
      expect(wrapper.containsMatchingElement(<strong>{subTitle}</strong>)).toBeTruthy();
    });
    it('AvatarInfo should render subTitle when element', () => {
      const subTitle = <Chip label="foo" />;
      const wrapper = shallow(<AvatarInfo {...defaultProps} align="center" subTitle={subTitle} />);
      expect(wrapper.containsMatchingElement(subTitle)).toBeTruthy();
    });
    it('AvatarInfo should render subTitle first when string and centered', () => {
      const subTitle = 'foo';
      const wrapper = shallow(<AvatarInfo {...defaultProps} align="center" subTitle={subTitle} />);
      expect(wrapper.find('.PnnlAvatarInfo-center').get(0).props.children[0].props.children).toEqual(subTitle);
    });
    it('AvatarInfo should render subTitle last when element and centered', () => {
      const label = 'foo';
      const subTitle = <Chip label={label} />;
      const wrapper = shallow(<AvatarInfo {...defaultProps} align="center" subTitle={subTitle} />);
      const lastIndex = wrapper.find('.PnnlAvatarInfo-center').get(0).props.children.length - 1;
      expect(wrapper.find('.PnnlAvatarInfo-center').get(0).props.children[lastIndex].props.label).toEqual(label);
    });
  });
});
