/* eslint react/jsx-no-bind: 0 */
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import phoneParser from '../__helpers/phoneParser';

import Avatar from '../Avatar';
import Icon from '../Icon';
import config from '../config';
import getDepartmentColor from '../__helpers/departments';
import Image from '../Image';

const ProfileCard = ({
  isCompact, isInsidePopover, onCloseCallback, person,
}) => {
  const {
    id,
    firstName,
    lastName,
    title,
    phoneNumber,
    emailAddress,
    mailstop,
    portraitLink,
  } = person;
  // Person may not have an assigned facility and or space (eg. works from home)
  const { facility: { abbreviation = null } = {} } = person;
  const { space: { locationId = null, name: locationName = null } = {} } = person;
  const { department: { id: departmentId = null, code = null, name: departmentName = null } = {} } = person;

  const deptColor = code ? getDepartmentColor(code) : 'platinum-50';
  const profileClasses = classNames('PnnlProfileCard', { isCompact }, deptColor);

  const closeButton = (isInsidePopover) ? <button className="close" onClick={onCloseCallback || null}>&times;</button> : null;
  const name = `${firstName} ${lastName}`;

  let avatarText = firstName.slice(0, 1);
  avatarText = avatarText.concat(lastName.slice(0, 1));
  const avatarComponent = (portraitLink !== undefined) ?
    (<Avatar src={portraitLink} size="lg" />) :
    (<Avatar size="lg">{avatarText}</Avatar>);

  // Only allow the IM link if the person has a PNNL email address
  const pnnlIM = (emailAddress && emailAddress.indexOf('@pnnl.gov') !== -1);

  return (
    <div className={profileClasses} key={id}>
      <div>{closeButton}</div>
      <section className="person">
        {avatarComponent}
        {(firstName && lastName) ? <h1>{name}</h1> : null}
        {(title) ? <small className="jobTitle">{title}</small> : null}
      </section>
      <ul className="contacts">
        {pnnlIM &&
          <li className="lync">
            <Icon icon="comment" iconDisplay="outline" />
            <a href={`sip:${emailAddress.toLowerCase()}`}>Instant Message</a>
          </li>
        }
        {phoneNumber &&
          <li className="phone">
            <Icon icon="phone" iconDisplay="outline" />
            <a href={`tel:${phoneParser(phoneNumber, '+1xxxxxxxxxx')}`}>
              {phoneParser(phoneNumber, '(xxx) xxx-xxxx')}
            </a>
          </li>
        }
        {emailAddress &&
          <li className="email">
            <Icon icon="email" iconDisplay="outline" />
            <a href={`mailto:${emailAddress.toLowerCase()}`}>{emailAddress.toLowerCase()}</a>
          </li>
        }
        {locationId &&
          <li className="location">
            <Icon icon="location" iconDisplay="outline" />
            <a href={config.mitLocation(locationId)} target="_blank">
              {(abbreviation) ? <span className="facility_abbreviation">{abbreviation} </span> : null}
              {(locationName) ? <span className="facility_location">{locationName}</span> : null}
              {(mailstop) ? <span className="mailstop">{`MSIN ${mailstop}`}</span> : null}
              {(locationId) ? <Image src={config.opwhse.locationImage(locationId)} alt={locationName} /> : null}
            </a>
          </li>
        }
        {departmentId &&
          <li className="department">
            <Avatar size="xs" className={deptColor}><Icon icon="org" /></Avatar>
            <a href={config.deptLocation(departmentId)} target="_blank">
              {departmentName}
            </a>
          </li>
        }
      </ul>
    </div>
  );
};

ProfileCard.propTypes = {
  /**
    * A Person object for the person you want to create the card for.
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/people/{hid}/?expand=space,facility,department
    * @required
    * */
  person: PropTypes.shape({
    id: PropTypes.string,
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    title: PropTypes.string,
    phoneNumber: PropTypes.string,
    emailAddress: PropTypes.string,
    mailstop: PropTypes.string,
    mapLink: PropTypes.string,
    portraitLink: PropTypes.string,
    facility: PropTypes.shape({
      abbreviation: PropTypes.string,
    }),
    space: PropTypes.shape({
      locationId: PropTypes.string,
      name: PropTypes.string,
    }),
    department: PropTypes.shape({
      id: PropTypes.string,
      code: PropTypes.string,
      name: PropTypes.string,
    })
  }).isRequired,

  /**
    * Callback you want to run when the close button is `clicked`.
    *
    * Only applies when `isInsidePopover` property is `true`
    * */
  onCloseCallback: PropTypes.func,

  /**
    * Whether or not the contact card is in a compact format.
    * */
  isCompact: PropTypes.bool,

  /**
    * Whether or not the contact card is included in a Popover.
    * */
  isInsidePopover: PropTypes.bool,
};

ProfileCard.defaultProps = {
  onCloseCallback: undefined,
  isCompact: false,
  isInsidePopover: false,
};

export default ProfileCard;
