/* eslint react/jsx-no-bind: 0, react/prefer-stateless-function:0 */
import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import Avatar from '../Avatar';
import AvatarInfo from '../AvatarInfo';

/*
* Leaving this as a "smart" component so calling components (eg. ProfilePopover)
* can specify a ref callback function. The ref callback works differently when
* using dumb/functional components.
*/
class Person extends React.Component {
  render() {
    const {
      person, onClickCallback, altName, altTitle, isSwapped, isCondensed, size,
    } = this.props;

    let { align } = this.props;

    const compactClass = (isCondensed) ? 'condensed' : '';
    const _className = classnames('PnnlPerson', 'pnnl-profile-trigger', compactClass);
    const fullName = `${person.firstName} ${person.lastName}`;
    let avatarText = person.firstName.slice(0, 1);
    avatarText = avatarText.concat(person.lastName.slice(0, 1));

    if (person) {
      const avatarComponent = (person.portraitLink !== undefined) ?
        (<Avatar src={person.portraitLink} size={size} />) :
        (<Avatar size={size}>{avatarText}</Avatar>);

      let title = fullName;
      if (typeof altName === 'string'
          || React.isValidElement(altName)) {
        title = altName;
      }
      let subTitle = person.title;
      if (typeof altTitle === 'string'
          || React.isValidElement(altTitle)) {
        subTitle = altTitle;
      }
      if (isSwapped) {
        const placeholder = title;
        title = subTitle;
        subTitle = placeholder;
      }

      if (isCondensed) align = 'center';

      const avatarInfo = (
        <AvatarInfo avatarComponent={avatarComponent} title={title} subTitle={subTitle} align={align} />
      );

      if (onClickCallback) {
        return (
          <button className={_className} onClick={onClickCallback}>
            {avatarInfo}
          </button>
        );
      }
      return (
        <div className={_className}>
          {avatarInfo}
        </div>
      );
    }

    return null;
  }
}

Person.propTypes = {
  /**
    * A Person object for the person you want to create the card for.
    *
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/people/{hid}/?expand=space,facility
    * @required
    * */
  person: PropTypes.shape({
    portraitLink: PropTypes.string,
    firstName: PropTypes.string,
    lastName: PropTypes.string,
    title: PropTypes.string,
  }).isRequired,

  /**
   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
   */
  align: PropTypes.oneOf(['left', 'right', 'center']),

  /**
    * Overrides the `name` on the Person display.
    * */
  altName: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),

  /**
    * Overrides the `title` on the Person display.
    * */
  altTitle: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),

  /**
    * Callback you want to run if the Person component is `clicked`.
    * */
  onClickCallback: PropTypes.func,

  /**
    * Swaps the `name` and `title` positions on the Person display.
    *
    * This will not change the styles of those two locations. It will only swap the values of the text pieces.
    * */
  isSwapped: PropTypes.bool,

  /**
    * Allows a condensed view of the Person display when true. By default, the `name` of the individual will
    * appear below the image of the individual in a smaller font size, without the display of the `title`.
    * If isSwapped is also true, the `title` of the individual will be displayed in place of the `name`.
    *
    * This will add a class, `condensed`, to the Person display.
    * */
  isCondensed: PropTypes.bool,

  /**
   * The size of the Avatar to be generated.
   */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
};

Person.defaultProps = {
  align: 'left',
  altName: undefined,
  altTitle: undefined,
  onClickCallback: undefined,
  isSwapped: false,
  isCondensed: false,
  size: 'md',
};

export default Person;
