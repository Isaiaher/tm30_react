{"ast":null,"code":"import _defineProperty from \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\"; //import Button from \"@material-ui/core/Button\";\n\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    boxShadow: theme.shadows[10],\n    fontSize: 14\n  }\n}))(Tooltip);\n/**\n * Paste Class\n */\n\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.populateSPDcells = () => {\n      var grid_items = [];\n      var i;\n      var spd_length = this.state.wavelength_end - this.state.wavelength_start + 1;\n\n      for (i = 0; i < spd_length; i += parseInt(this.state.step)) {\n        grid_items.push([{\n          readOnly: true,\n          value: i + parseInt(this.state.wavelength_start),\n          className: \"cell\"\n        }, {\n          value: \"\"\n        }]);\n      }\n\n      console.log(grid_items);\n      this.setState({\n        grid: [[{\n          readOnly: true,\n          value: \"Wavelength\"\n        }, {\n          readOnly: true,\n          className: \"cell\",\n          value: \"SPD\"\n        }], ...grid_items]\n      });\n    };\n\n    this.handleLeave = event => {\n      console.log(this.state);\n      this.populateSPDcells();\n    };\n\n    this.handleCreateTable = event => {\n      this.setState({\n        displayTable: true\n      });\n      this.populateSPDcells();\n    };\n\n    this.handleSPDChange = event => {\n      this.setState({\n        spd_paste: event.target.value\n      }, function () {\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStartChange = event => {\n      this.setState({\n        wavelength_start: event.target.value\n      }, function () {\n        //console.log(\"setState completed\", this.state);\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleEndChange = event => {\n      this.setState({\n        wavelength_end: event.target.value\n      }, function () {\n        //console.log(\"setState completed\", this.state);\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleStepChange = event => {\n      this.setState({\n        step: parseInt(event.target.value)\n      }, function () {\n        //console.log(\"setState completed\", this.state);\n        if (this.state.spd_paste !== \"\" && this.state.step !== \"\" && this.state.wavelength_end !== \"\" && this.state.wavelength_start !== \"\") {\n          this.setState({\n            disabled: false\n          });\n        } else {\n          this.setState({\n            disabled: true\n          });\n        }\n      });\n    };\n\n    this.handleNameChange = event => {\n      this.setState({\n        name: event.target.value\n      });\n    };\n\n    this.SPDs = [];\n    this.wavelengths = [];\n    this.state = {\n      spd_paste: \"\",\n      //the SPD string inputed to the text area\n      spd_array: [],\n      //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false,\n      //Boolean to control the loader\n      data: [],\n      //Data that is returned from the C code\n      wavelength_start: 380,\n      //The starting wavelength with default value of 380\n      wavelength_end: 780,\n      //The ending wavelength with default value of 780\n      step: 1,\n      //The step size with default value of 1\n      disabled: true,\n      //Boolean to control if the button is disabled or not. Default is that it is.\n      displayTable: false,\n      grid: [[{\n        readOnly: true,\n        value: \"Wavelength\"\n      }, {\n        readOnly: true,\n        className: \"cell\",\n        value: \"SPD\"\n      }]]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n    this.handleSubmitTable = this.handleSubmitTable.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.handleEndChange = this.handleEndChange.bind(this);\n    this.handleStepChange = this.handleStepChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    /*\n    var i;\n    for (i = 0; i < 401; i++) {\n      this.state.grid.push([\n        {\n          readOnly: true,\n          value: i + parseInt(this.state.wavelength_start),\n          className: \"cell\"\n        },\n        { value: \"\" }\n      ]);\n    }\n    */\n  }\n  /*\n  populateSPDcells = () => {\n    this.setState(\n      {\n        grid: [\n          [\n            { readOnly: true, value: \"Wavelength\" },\n            { readOnly: true, className: \"cell\", value: \"SPD\" }\n          ]\n        ]\n      },\n      function() {\n        var i;\n        var spd_length =\n          this.state.wavelength_end - this.state.wavelength_start + 1;\n        for (i = 0; i < spd_length; i += parseInt(this.state.step)) {\n          this.state.grid.push([\n            {\n              readOnly: true,\n              value: i + parseInt(this.state.wavelength_start),\n              className: \"cell\"\n            },\n            { value: \"\" }\n          ]);\n        }\n      }\n    );\n  };\n  */\n\n\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (false //this.state.wavelength_start !== 380 ||\n    //this.state.wavelength_end !== 780 ||\n    //this.state.step !== 1\n    ) {\n        alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n      } else {\n      this.setState({\n        wavelength_array: []\n      }, function () {\n        var i;\n        var array_i = 0;\n\n        for (i = this.state.wavelength_start; i <= this.state.wavelength_end; i += this.state.step) {\n          console.log(\"i = \".concat(i, \" array_i = \").concat(array_i, \" start = \").concat(this.state.wavelength_start, \" end = \").concat(this.state.wavelength_end));\n          this.state.wavelength_array[array_i] = i;\n          array_i++;\n        } //console.log(this.state.wavelength_array);\n\n      });\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n\n      this.setState({\n        spd_array: this.state.spd_paste.split(\"\\n\")\n      }, function () {\n        console.log(this.state.spd_array);\n\n        if (this.state.spd_array.length === this.state.wavelength_array.length) {\n          this.setState({\n            loading: true\n          }, () => {\n            axios.defaults.headers.common = {};\n            axios.defaults.headers.common.accept = \"application/json\";\n            axios.post(\"/tm30Paste\", {\n              spd: this.state.spd_array,\n              wavelength: this.state.wavelength_array\n            }).then(res => {\n              return res.data;\n            }).then(data => {\n              /**\n               * Set the state that loading is false,\n               * data is the json from the C code\n               * and tableReady is true\n               *\n               * TODO: TableReady is no longer used. Could take out.\n               */\n              this.setState({\n                loading: false,\n                data: data.data,\n                tableReady: true\n              });\n              /**\n               * Used later to store the data in cache\n               * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n               */\n\n              /**\n               * Pushes the data to the Reports page and redirects to that page\n               */\n\n              this.props.history.push({\n                pathname: \"/Report\",\n                state: {\n                  data: this.state.data\n                }\n              });\n            });\n          });\n        } else {\n          alert(\"Error: Length of SPD array does not match length of wavelength array.\");\n        }\n      });\n    }\n  }\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n\n\n  handleSubmitTable(event) {\n    this.wavelengths = [];\n    this.SPDs = []; //console.log(this.state.grid);\n    //console.log(this.state.grid.length);\n    //console.log(this.state.grid[1][0].value);\n\n    var next_spd;\n\n    if (false //this.state.wavelength_start !== 380 ||\n    //this.state.wavelength_end !== 780 ||\n    //this.state.step !== 1\n    ) {\n        alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n      } else {\n      this.setState({\n        wavelength_array: [],\n        spd_array: []\n      }, function () {\n        var array_i;\n\n        for (array_i = 1; array_i < this.state.grid.length; array_i++) {\n          this.wavelengths.push(this.state.grid[array_i][0].value);\n          next_spd = this.state.grid[array_i][1].value;\n\n          if (next_spd !== \"\") {\n            this.SPDs.push(this.state.grid[array_i][1].value);\n          }\n        }\n\n        console.log(this.wavelengths);\n        console.log(this.SPDs);\n        console.log(this.wavelengths.length === this.SPDs.length);\n        console.log(this.wavelengths.length);\n        console.log(this.SPDs.length);\n\n        if (this.wavelengths.length === this.SPDs.length && !(this.SPDs.length === 0)) {\n          this.setState({\n            loading: true,\n            spd_array: this.SPDs,\n            wavelength_array: this.wavelengths\n          }, () => {\n            axios.defaults.headers.common = {};\n            axios.defaults.headers.common.accept = \"application/json\";\n            axios.post(\"http://localhost:5000/api/tm30Paste\", {\n              spd: this.state.spd_array,\n              wavelength: this.state.wavelength_array\n            }).then(res => {\n              return res.data;\n            }).then(data => {\n              this.setState({\n                loading: false,\n                data: data.data,\n                tableReady: true\n              });\n              this.props.history.push({\n                pathname: \"/Report\",\n                state: {\n                  data: this.state.data\n                }\n              });\n            });\n          });\n        } else {\n          alert(\"Error: Length of SPD array does not match length of wavelength array.\");\n        }\n      });\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n\n\n  render() {\n    var loading = this.state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Paste SPD Data\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"inherit\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Start Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 380 nm. Value may not be greater than 400 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleStartChange //onBlur={this.handleLeave}\n      ,\n      defaultValue: 380,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, \"End Wavelength (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 780 nm. Value may not be less than 700 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleEndChange,\n      defaultValue: 780,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, \"Interval (nm):\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Recommended value is 1 nm. Value may not be greater than 5 nm.\",\n      placement: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.handleStepChange //onBlur={this.handleLeave}\n      ,\n      defaultValue: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }), loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, \" \", \"Calculating Results \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), \" \", React.createElement(LoadingSpinner, {\n      color: \"copper\",\n      size: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }), \" \")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, React.createElement(LightTooltip, {\n      title: \"Runs the calculation when enough data is entered\",\n      placement: \"right-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsSize: \"sm\",\n      onClick: this.handleSubmitTable //disabled={this.state.disabled}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, \"Calculate\"))), React.createElement(\"div\", {\n      style: {\n        width: \"5%\",\n        display: \"inline-block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(LightTooltip, {\n      title: \"Create Table for Wavelengths\",\n      placement: \"right-start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(Button, {\n      bsSize: \"sm\",\n      onClick: this.handleCreateTable,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, \"Create Table\")))), React.createElement(\"div\", {\n      style: {\n        position: \"inherit\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, this.state.displayTable ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"SPD Data\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, \"Name of SPD:\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: this.handleNameChange,\n      defaultValue: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    })), React.createElement(ReactDataSheet, {\n      data: this.state.grid,\n      valueRenderer: cell => cell.value,\n      onCellsChanged: changes => {\n        const grid = this.state.grid.map(row => [...row]);\n        changes.forEach(({\n          cell,\n          row,\n          col,\n          value\n        }) => {\n          grid[row][col] = _objectSpread({}, grid[row][col], {\n            value\n          });\n        });\n        this.setState({\n          grid\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    })));\n  }\n\n}\n/**\n * Export withRouter so we can jump to the Reports page\n */\n\nexport default withRouter(Paste);","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/components/pages/Calculator/Sections/Paste.jsx"],"names":["React","Component","Button","withRouter","LoadingSpinner","axios","Tooltip","withStyles","makeStyles","ReactDataSheet","LightTooltip","theme","tooltip","boxShadow","shadows","fontSize","Paste","constructor","props","populateSPDcells","grid_items","i","spd_length","state","wavelength_end","wavelength_start","parseInt","step","push","readOnly","value","className","console","log","setState","grid","handleLeave","event","handleCreateTable","displayTable","handleSPDChange","spd_paste","target","disabled","handleStartChange","handleEndChange","handleStepChange","handleNameChange","name","SPDs","wavelengths","spd_array","wavelength_array","loading","data","handleSubmit","bind","handleSubmitTable","alert","array_i","split","length","defaults","headers","common","accept","post","spd","wavelength","then","res","tableReady","history","pathname","next_spd","render","position","display","width","cell","changes","map","row","forEach","col"],"mappings":"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","sourcesContent":["/**\n * Paste.\n *\n * A component for the Paste option of the calculator.\n * A user can paste in an SPD and run the TM30\n * Calculation with that input.\n *\n * !The backend can not handle anything that is not a 380-780 by 1 step SPD as of 11.07.2018\n *\n * TODO Implement the Linear Interpolation functionality to the Pasting option.\n *\n * @author Isaiah Scheel.\n * @since  11.07.2019\n */\n/**\n * Imports\n */\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/es/Button\";\n//import Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingSpinner from \"pnnl-react-core/lib/Loader\";\nimport axios from \"axios\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    boxShadow: theme.shadows[10],\n    fontSize: 14\n  }\n}))(Tooltip);\n\n/**\n * Paste Class\n */\nexport class Paste extends Component {\n  /**\n   * Constructor that sets the state and binds some handler functions\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props);\n    this.SPDs = [];\n    this.wavelengths = [];\n    this.state = {\n      spd_paste: \"\", //the SPD string inputed to the text area\n      spd_array: [], //the SPD array that is made from splicing the string\n      wavelength_array: [],\n      loading: false, //Boolean to control the loader\n      data: [], //Data that is returned from the C code\n      wavelength_start: 380, //The starting wavelength with default value of 380\n      wavelength_end: 780, //The ending wavelength with default value of 780\n      step: 1, //The step size with default value of 1\n      disabled: true, //Boolean to control if the button is disabled or not. Default is that it is.\n      displayTable: false,\n      grid: [\n        [\n          { readOnly: true, value: \"Wavelength\" },\n          { readOnly: true, className: \"cell\", value: \"SPD\" }\n        ]\n      ]\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSPDChange = this.handleSPDChange.bind(this);\n    this.handleSubmitTable = this.handleSubmitTable.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.handleEndChange = this.handleEndChange.bind(this);\n    this.handleStepChange = this.handleStepChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n\n    /*\n    var i;\n    for (i = 0; i < 401; i++) {\n      this.state.grid.push([\n        {\n          readOnly: true,\n          value: i + parseInt(this.state.wavelength_start),\n          className: \"cell\"\n        },\n        { value: \"\" }\n      ]);\n    }\n    */\n  }\n  /*\n  populateSPDcells = () => {\n    this.setState(\n      {\n        grid: [\n          [\n            { readOnly: true, value: \"Wavelength\" },\n            { readOnly: true, className: \"cell\", value: \"SPD\" }\n          ]\n        ]\n      },\n      function() {\n        var i;\n        var spd_length =\n          this.state.wavelength_end - this.state.wavelength_start + 1;\n        for (i = 0; i < spd_length; i += parseInt(this.state.step)) {\n          this.state.grid.push([\n            {\n              readOnly: true,\n              value: i + parseInt(this.state.wavelength_start),\n              className: \"cell\"\n            },\n            { value: \"\" }\n          ]);\n        }\n      }\n    );\n  };\n  */\n\n  populateSPDcells = () => {\n    var grid_items = [];\n    var i;\n    var spd_length =\n      this.state.wavelength_end - this.state.wavelength_start + 1;\n    for (i = 0; i < spd_length; i += parseInt(this.state.step)) {\n      grid_items.push([\n        {\n          readOnly: true,\n          value: i + parseInt(this.state.wavelength_start),\n          className: \"cell\"\n        },\n        { value: \"\" }\n      ]);\n    }\n    console.log(grid_items);\n    this.setState({\n      grid: [\n        [\n          { readOnly: true, value: \"Wavelength\" },\n          { readOnly: true, className: \"cell\", value: \"SPD\" }\n        ],\n        ...grid_items\n      ]\n    });\n  };\n\n  /**\n   * Start of Handler functions-----------------------------------\n   */\n\n  handleLeave = event => {\n    console.log(this.state);\n    this.populateSPDcells();\n  };\n\n  handleCreateTable = event => {\n    this.setState({\n      displayTable: true\n    });\n    this.populateSPDcells();\n  };\n\n  /**\n   * Function that handles when the SPD paste text area is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleSPDChange = event => {\n    this.setState({ spd_paste: event.target.value }, function() {\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the Start Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStartChange = event => {\n    this.setState({ wavelength_start: event.target.value }, function() {\n      //console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleEndChange = event => {\n    this.setState({ wavelength_end: event.target.value }, function() {\n      //console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n  /**\n   * Function that handles when the End Wavelength is changed.\n   * Stores the value in state and checks if it should unlock\n   * the 'Calculation' button by checking all the other fields\n   */\n  handleStepChange = event => {\n    this.setState({ step: parseInt(event.target.value) }, function() {\n      //console.log(\"setState completed\", this.state);\n      if (\n        this.state.spd_paste !== \"\" &&\n        this.state.step !== \"\" &&\n        this.state.wavelength_end !== \"\" &&\n        this.state.wavelength_start !== \"\"\n      ) {\n        this.setState({ disabled: false });\n      } else {\n        this.setState({ disabled: true });\n      }\n    });\n  };\n\n  handleNameChange = event => {\n    this.setState({ name: event.target.value });\n  };\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmit(event) {\n    /**\n     * Check to see if the SPD is 380-780 by a step of 1\n     * !This calculator does not allow for any other type of SPD\n     * !than 380-780 by 1 for the time being.\n     */\n    if (\n      false\n      //this.state.wavelength_start !== 380 ||\n      //this.state.wavelength_end !== 780 ||\n      //this.state.step !== 1\n    ) {\n      alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n    } else {\n      this.setState(\n        {\n          wavelength_array: []\n        },\n        function() {\n          var i;\n          var array_i = 0;\n          for (\n            i = this.state.wavelength_start;\n            i <= this.state.wavelength_end;\n            i += this.state.step\n          ) {\n            console.log(\n              `i = ${i} array_i = ${array_i} start = ${this.state.wavelength_start} end = ${this.state.wavelength_end}`\n            );\n            this.state.wavelength_array[array_i] = i;\n            array_i++;\n          }\n          //console.log(this.state.wavelength_array);\n        }\n      );\n      /**\n       * Set state to place the text area SPD Paste as an array into spd_array\n       */\n      this.setState(\n        { spd_array: this.state.spd_paste.split(\"\\n\") },\n        function() {\n          console.log(this.state.spd_array);\n          if (\n            this.state.spd_array.length === this.state.wavelength_array.length\n          ) {\n            this.setState({ loading: true }, () => {\n              axios.defaults.headers.common = {};\n              axios.defaults.headers.common.accept = \"application/json\";\n              axios\n                .post(\"/tm30Paste\", {\n                  spd: this.state.spd_array,\n                  wavelength: this.state.wavelength_array\n                })\n                .then(res => {\n                  return res.data;\n                })\n                .then(data => {\n                  /**\n                   * Set the state that loading is false,\n                   * data is the json from the C code\n                   * and tableReady is true\n                   *\n                   * TODO: TableReady is no longer used. Could take out.\n                   */\n                  this.setState({\n                    loading: false,\n                    data: data.data,\n                    tableReady: true\n                  });\n                  /**\n                   * Used later to store the data in cache\n                   * localStorage.setItem(\"data\", JSON.stringify(this.state.data));\n                   */\n\n                  /**\n                   * Pushes the data to the Reports page and redirects to that page\n                   */\n                  this.props.history.push({\n                    pathname: \"/Report\",\n                    state: {\n                      data: this.state.data\n                    }\n                  });\n                });\n            });\n          } else {\n            alert(\n              \"Error: Length of SPD array does not match length of wavelength array.\"\n            );\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handle the submission of a psted in SPD\n   * @param {*} event\n   */\n  handleSubmitTable(event) {\n    this.wavelengths = [];\n    this.SPDs = [];\n    //console.log(this.state.grid);\n    //console.log(this.state.grid.length);\n    //console.log(this.state.grid[1][0].value);\n    var next_spd;\n    if (\n      false\n      //this.state.wavelength_start !== 380 ||\n      //this.state.wavelength_end !== 780 ||\n      //this.state.step !== 1\n    ) {\n      alert(\"Sorry SPDs other than 380-780 by stepd of 1 are not permitted\");\n    } else {\n      this.setState(\n        {\n          wavelength_array: [],\n          spd_array: []\n        },\n        function() {\n          var array_i;\n          for (array_i = 1; array_i < this.state.grid.length; array_i++) {\n            this.wavelengths.push(this.state.grid[array_i][0].value);\n            next_spd = this.state.grid[array_i][1].value;\n            if (next_spd !== \"\") {\n              this.SPDs.push(this.state.grid[array_i][1].value);\n            }\n          }\n          console.log(this.wavelengths);\n          console.log(this.SPDs);\n          console.log(this.wavelengths.length === this.SPDs.length);\n          console.log(this.wavelengths.length);\n          console.log(this.SPDs.length);\n          if (\n            this.wavelengths.length === this.SPDs.length &&\n            !(this.SPDs.length === 0)\n          ) {\n            this.setState(\n              {\n                loading: true,\n                spd_array: this.SPDs,\n                wavelength_array: this.wavelengths\n              },\n              () => {\n                axios.defaults.headers.common = {};\n                axios.defaults.headers.common.accept = \"application/json\";\n                axios\n                  .post(\"http://localhost:5000/api/tm30Paste\", {\n                    spd: this.state.spd_array,\n                    wavelength: this.state.wavelength_array\n                  })\n                  .then(res => {\n                    return res.data;\n                  })\n                  .then(data => {\n                    this.setState({\n                      loading: false,\n                      data: data.data,\n                      tableReady: true\n                    });\n                    this.props.history.push({\n                      pathname: \"/Report\",\n                      state: {\n                        data: this.state.data\n                      }\n                    });\n                  });\n              }\n            );\n          } else {\n            alert(\n              \"Error: Length of SPD array does not match length of wavelength array.\"\n            );\n          }\n        }\n      );\n    }\n  }\n  /**\n   * End of Handler functions-----------------------------------\n   */\n\n  /**\n   * Render function for Paste\n   */\n  render() {\n    var loading = this.state.loading;\n    return (\n      <div>\n        <h2>Paste SPD Data</h2>\n        <form>\n          <div style={{ position: \"inherit\", display: \"inline-block\" }}>\n            <label>\n              Start Wavelength (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 380 nm. Value may not be greater than 400 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleStartChange}\n                  //onBlur={this.handleLeave}\n                  defaultValue={380}\n                ></input>\n              </LightTooltip>\n            </label>\n            <br />\n            <label>\n              End Wavelength (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 780 nm. Value may not be less than 700 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleEndChange}\n                  defaultValue={780}\n                ></input>\n              </LightTooltip>\n            </label>\n            <br />\n            <label>\n              Interval (nm):\n              <br />\n              <LightTooltip\n                title=\"Recommended value is 1 nm. Value may not be greater than 5 nm.\"\n                placement=\"right\"\n              >\n                <input\n                  onChange={this.handleStepChange}\n                  //onBlur={this.handleLeave}\n                  defaultValue={1}\n                ></input>\n              </LightTooltip>\n            </label>\n          </div>\n          <br />\n          {loading ? (\n            <div>\n              <br />\n              <label>\n                {\" \"}\n                Calculating Results <br />{\" \"}\n                <LoadingSpinner color=\"copper\" size={6} />{\" \"}\n              </label>\n            </div>\n          ) : (\n            <div>\n              <LightTooltip\n                title=\"Runs the calculation when enough data is entered\"\n                placement=\"right-start\"\n              >\n                <span>\n                  <Button\n                    bsSize=\"sm\"\n                    onClick={this.handleSubmitTable}\n                    //disabled={this.state.disabled}\n                  >\n                    Calculate\n                  </Button>\n                </span>\n              </LightTooltip>\n\n              <div\n                style={{\n                  width: \"5%\",\n                  display: \"inline-block\"\n                }}\n              />\n\n              <LightTooltip\n                title=\"Create Table for Wavelengths\"\n                placement=\"right-start\"\n              >\n                <span>\n                  <Button bsSize=\"sm\" onClick={this.handleCreateTable}>\n                    Create Table\n                  </Button>\n                </span>\n              </LightTooltip>\n            </div>\n          )}\n          <div style={{ position: \"inherit\" }}>\n            {/*}\n            <LightTooltip\n              title=\"Wavelength values generated automatically. \n                Power values entered by user.\"\n              placement=\"right-start\"\n            >\n              <textarea onChange={this.handleSPDChange}></textarea>\n            </LightTooltip>\n          */}\n            {/*}\n            <ReactDataSheet\n              data={this.state.grid}\n              valueRenderer={cell => cell.value}\n              onCellsChanged={changes => {\n                const grid = this.state.grid.map(row => [...row]);\n                changes.forEach(({ cell, row, col, value }) => {\n                  grid[row][col] = { ...grid[row][col], value };\n                });\n                this.setState({ grid });\n              }}\n            />\n            */}\n            {this.state.displayTable ? (\n              <div>\n                <h3>SPD Data</h3>\n                <label>\n                  Name of SPD:\n                  <br />\n                  <input\n                    onChange={this.handleNameChange}\n                    defaultValue={\"\"}\n                  ></input>\n                </label>\n                <ReactDataSheet\n                  data={this.state.grid}\n                  valueRenderer={cell => cell.value}\n                  onCellsChanged={changes => {\n                    const grid = this.state.grid.map(row => [...row]);\n                    changes.forEach(({ cell, row, col, value }) => {\n                      grid[row][col] = { ...grid[row][col], value };\n                    });\n                    this.setState({ grid });\n                  }}\n                />\n              </div>\n            ) : (\n              <div></div>\n            )}\n          </div>\n          <br />\n        </form>\n      </div>\n    );\n  }\n}\n\n/**\n * Export withRouter so we can jump to the Reports page\n */\nexport default withRouter(Paste);\n"]},"metadata":{},"sourceType":"module"}