import React from 'react';
import PropTypes from 'prop-types';
import Grid from 'react-bootstrap/lib/Grid';
import Row from 'react-bootstrap/lib/Row';
import Collapse from 'react-bootstrap/lib/Collapse';
import Link from 'react-router-dom/Link';
import classNames from 'classnames';
import PnnlLink from '../Link';

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isMobile: () => document.body.clientWidth < 768, // Width in pixels below which the navigation will be accessible as a menu
      navbarCollapse: true,
      navbarTransitioning: false,
    };

    this.onToggle = this.onToggle.bind(this);
    this.onAppTitleClick = this.onAppTitleClick.bind(this);
    this.onNavActionsClick = this.onNavActionsClick.bind(this);
    this.onTransitionEnd = this.onTransitionEnd.bind(this);
    this.getParentSiteElement = this.getParentSiteElement.bind(this);
  }

  onAppTitleClick(event) {
    // Only do this if we're in a mobile context
    if (this.state.isMobile()) {
      event.preventDefault();
      this.onToggle();
    }
    // Otherwise go ahead and let the title navigate to the app root
  }

  onNavActionsClick(event) {
    // Only do this if we're in a mobile context
    if (this.state.isMobile()) {
      let node = event.target;
      do {
        // check to see if we are within a non-open dropdown menu
        if (node.classList.contains('dropdown') && !node.classList.contains('open')) {
          return;
        } else if (node.id === 'nav-actions') {
          // get to this by bubbling all the way up the parent stack until you get to the nav container
          this.onToggle();
          return;
        }
        node = node.parentNode;
      } while (node);
    }
  }

  onToggle() {
    this.setState((state) => {
      // Writing this way to avoid arrow-body-style lint rule
      const newState = {
        navbarCollapse: !state.navbarCollapse,
        navbarTransitioning: true,
      };
      return newState;
    });
  }

  onTransitionEnd(event) {
    if (event.srcElement === this.primaryNav) {
      this.setState({
        navbarTransitioning: false,
      });
    }
  }

  getNavigation() {
    const { primaryNav, fluid } = this.props;
    if (!primaryNav) {
      return '';
    }

    const { navbarCollapse, navbarTransitioning } = this.state;
    const navClasses = classNames('PnnlNavBar', {
      'open-nav': !navbarCollapse,
      transitioning: navbarTransitioning,
    });

    return (
      <nav
        className={navClasses}
        onTransitionEnd={this.onTransitionEnd}
      >
        <Collapse
          in={!navbarCollapse}
          role="navigation"
        >
          { /* do not change this id string without changing the click handler */ }
          <Grid onClick={this.onNavActionsClick} id="nav-actions" fluid={fluid}>
            {primaryNav}
          </Grid>
        </Collapse>
      </nav>
    );
  }

  getParentSiteElement() {
    const parentSite = this.props.parentSiteProps;

    if (parentSite && parentSite.label) {
      const labelContent = (parentSite.imageHref) ?
        (<img src={parentSite.imageHref} alt={parentSite.label} />) :
        (<span>{parentSite.label}</span>);
      if (parentSite.linkHref) {
        return (<PnnlLink to={parentSite.linkHref}>{labelContent}</PnnlLink>);
      }
      return labelContent;
    }
    return null;
  }

  render() {
    const {
      appLogo, appTitle = '', fluid, children, className
    } = this.props;
    const navigation = this.getNavigation();
    const headerClasses = classNames(
      {
        'no-nav': !this.props.primaryNav,
        'long-title': appTitle.length > 20,
      },
      'PnnlAppHeader', className
    );

    let parentSiteElement = this.getParentSiteElement();
    if (parentSiteElement) {
      parentSiteElement = React.cloneElement(parentSiteElement, {
        className: 'parentSite'
      });
    }

    let icon = '';
    if (appLogo) {
      icon = (<img src={appLogo} alt={appTitle} className="img-responsive" />);
    }
    let title = appTitle ? (<span>{appTitle}</span>) : null;
    if (children) {
      title = (<span>{children}</span>);
    }

    return (
      <header className={headerClasses}>
        <Grid fluid={fluid}>
          <Row>
            {parentSiteElement}
            {/* eslint-disable jsx-a11y/anchor-is-valid */}
            <Link onClick={this.onAppTitleClick} to="/" className="PnnlAppTitle">
              {/* eslint-enable jsx-a11y/anchor-is-valid */}
              <h1>
                {icon}
                {title}
                <span className="caret" />
              </h1>
            </Link>
          </Row>
        </Grid>

        {navigation}

      </header>
    );
  }
}

Header.propTypes = {
  /**
   * The navigation bar.  Should be a NavBar component.
   */
  primaryNav: PropTypes.node,
  /**
   * If this is an application, this is the icon for it. Guidance on creating app icons is included in the Common Design Standards (forge.pnl.gov/standards)
   */
  appLogo: PropTypes.string,
  /**
   * The title of the site/applcation. If the title is longer than 20 characters, it will be displayed in a smaller type size.
   */
  appTitle: PropTypes.string,
  /**
   * Whether the container is fluid or using fixed breakpoints.
   */
  fluid: PropTypes.bool,
  /**
   * A classname used to target styles.  Usually used to adjust the background color of the title area.
   */
  className: PropTypes.string,
  /**
   * An object with values used to build a label/link for the parent website, e.g. myPNNL. If an image path is provided the label will be used as alt-text. If a linkHref is provided then the text/image will be wrapped in a link.
   */
  parentSiteProps: PropTypes.shape({
    label: PropTypes.string.isRequired,
    imageHref: PropTypes.string,
    linkHref: PropTypes.string,
  }),
};

Header.defaultProps = {
  primaryNav: null,
  appLogo: null,
  appTitle: null,
  fluid: false,
  className: null,
  parentSiteProps: null,
};

export default Header;
