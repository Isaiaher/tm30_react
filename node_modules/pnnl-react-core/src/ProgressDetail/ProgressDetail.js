import React from 'react';
import PropTypes from 'prop-types';

const ProgressDetail = (props) => {
  const { progressPct, children } = props;
  const adjustmentPadding = 24; // Half of the min-width of a ProgressStep
  let arrowLeft = 0;
  let adjustment = 0;
  /*
    Adjustment needs to be tailored depending on if we're at the beginning of the progress or the end. In the middle you don't want any adjustment, at the outer edges you want more. At all times we're moving the arrow towards the center of the bar by adding or removing padding.

    Using CSS calc allows us to keep the position dynamic by using percentage and an adjustment based on the size of the steps.
  */
  if (progressPct > 50) {
    adjustment = adjustmentPadding * ((progressPct - 50) / 50);
    arrowLeft = `calc(${progressPct}% - ${adjustment}px`;
  } else {
    adjustment = adjustmentPadding * ((50 - progressPct) / 50);
    arrowLeft = `calc(${progressPct}% + ${adjustment}px`;
  }

  return (
    <div className="PnnlProgressDetail">
      <div className="PnnlProgressDetailContainer">
        <div className="PnnlProgressDetailArrow" style={{ left: arrowLeft }} />
        {children}
      </div>
    </div>
  );
};

ProgressDetail.propTypes = {
  /**
   * The percentage of the overall process to align the arrow with. Should be calculated against the total number of `ProgressStep` components, with a zero-based index for counting steps. So if the detail is for step 1, that's 0%. Step 2 of 4 would actually be 33%.
   */
  progressPct: PropTypes.number.isRequired,
};

export default ProgressDetail;
