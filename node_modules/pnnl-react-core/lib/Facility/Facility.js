'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _Avatar = require('../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _AvatarInfo = require('../AvatarInfo');

var _AvatarInfo2 = _interopRequireDefault(_AvatarInfo);

var _Loader = require('../Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _restApiHelper = require('../__helpers/restApiHelper');

var _restApiHelper2 = _interopRequireDefault(_restApiHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Facility = function (_React$Component) {
  (0, _inherits3['default'])(Facility, _React$Component);

  function Facility(props) {
    (0, _classCallCheck3['default'])(this, Facility);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.abortController = window && window.AbortController ? new window.AbortController() : undefined;

    _this.state = {
      data: _this.props.facility || undefined
    };
    return _this;
  }

  Facility.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.props.id && !this.props.facility.id) {
      throw new Error('A facility identifier was not supplied. This can be either props.id (Facility Id) or props.facility.id.');
    }
    if (this.props.id && !this.props.facility) {
      _restApiHelper2['default'].GET(_config2['default'].opwhse.facility(this.props.id), {
        signal: this.abortController && this.abortController.signal
      }).then(function (data) {
        return _this2.setState({
          data: data
        });
      })['catch'](function (error) {
        throw new Error('An error resulted when trying to get the facility from the API. ' + error);
      });
    }
  };

  Facility.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.abortController) {
      this.abortController.abort();
    }
  };

  Facility.prototype.render = function render() {
    var data = this.state.data;
    var _props = this.props,
        onClick = _props.onClick,
        size = _props.size,
        align = _props.align;


    if (!data) {
      return _react2['default'].createElement(_Loader2['default'], { show: true });
    }

    var address = ((data.address || {}).line1 || '').replace(/\w\S*/g, function (txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
    var avatarComponent = _react2['default'].createElement(_Avatar2['default'], { src: data.thumbnailImage || _config2['default'].defaultFacilityImage, size: size });

    var avatarInfo = _react2['default'].createElement(_AvatarInfo2['default'], { avatarComponent: avatarComponent, title: data.name, subTitle: address, align: align });

    if (onClick) {
      return _react2['default'].createElement(
        'button',
        { className: 'PnnlFacility', onClick: onClick },
        avatarInfo
      );
    }
    return _react2['default'].createElement(
      'div',
      { className: 'PnnlFacility' },
      avatarInfo
    );
  };

  return Facility;
}(_react2['default'].Component);

Facility.propTypes = {
  id: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number]),
  /**
    * A facility object for the facility you want display.
    *
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/facilities/{id}
    * @required
    * */
  facility: _propTypes2['default'].shape({
    id: _propTypes2['default'].string,
    name: _propTypes2['default'].string,
    abbreviation: _propTypes2['default'].string,
    thumbnailImage: _propTypes2['default'].string,
    address: _propTypes2['default'].shape({ line1: _propTypes2['default'].string })
  }),

  /**
   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
   */
  align: _propTypes2['default'].oneOf(['left', 'right', 'center']),

  /**
    * Callback you want to run if the Person component is `clicked`.
    * */
  onClick: _propTypes2['default'].func,

  /**
   * The size of the Avatar to be generated.
   */
  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg'])
};
Facility.defaultProps = {
  align: 'left',
  onClick: undefined,
  size: 'md',
  facility: undefined,
  id: undefined
};
exports['default'] = Facility;
module.exports = exports['default'];