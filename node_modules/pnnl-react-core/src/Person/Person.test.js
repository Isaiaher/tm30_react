import React from 'react';
import { shallow, mount } from 'enzyme';

import Person from './Person';


describe('<Person />', () => {
  const defaultProps = {
    person: {
      portraitLink: 'https://image.pnl.gov',
      firstName: 'Jane',
      lastName: 'Doe',
      title: 'Manager',
    },
  };

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('../index.js');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.Person).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(Person).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    // swallow prop type console errors
    console.error = jest.fn();

    it('should log 1 error when missing required props.', () => {
      expect(() => shallow(<Person person={null} />)).toThrowErrorMatchingSnapshot();
    });

    it('should render as NULL when required prop type is UNDEFINED', () => {
      expect(() => shallow(<Person person={undefined} />)).toThrowErrorMatchingSnapshot();
    });

    it('should render without an error when supplied default person prop type', () => {
      // shallow render should not raise an error if valid
      const wrapper = shallow(<Person {...defaultProps} />);
      expect(wrapper).toMatchSnapshot();

      // expect(wrapper.instance().props.person).toBeDefined();
      // expect(wrapper.instance().props.person).toEqual(defaultProps.person);
      // // check for default props on not required prop types
      // expect(wrapper.instance().props.altName).toBeUndefined();
      // expect(wrapper.instance().props.altTitle).toBeUndefined();
      // expect(wrapper.instance().props.onClickCallback).toBeUndefined();
      // expect(wrapper.instance().props.isSwapped).toEqual(false);
    });

    it('should set altName prop type when supplied', () => {
      const wrapper = shallow(<Person {...defaultProps} altName="James Smith" />);

      // expect(wrapper.instance().props.altName).toEqual('James Smith');
      expect(wrapper).toMatchSnapshot();
    });

    it('should set altTitle prop type when supplied', () => {
      const wrapper = shallow(<Person {...defaultProps} altTitle="Developer" />);

      // expect(wrapper.instance().props.altTitle).toEqual('Developer');
      expect(wrapper).toMatchSnapshot();
    });

    it('should set onClickCallback prop type when supplied', () => {
      const myCallback = () => (true);

      const wrapper = shallow(<Person {...defaultProps} onClickCallback={myCallback} />);

      // expect(wrapper.instance().props.onClickCallback).toEqual(myCallback);
      expect(wrapper).toMatchSnapshot();
    });

    it('should set isSwapped prop type when supplied', () => {
      const wrapper = shallow(<Person {...defaultProps} isSwapped />);

      // expect(wrapper.instance().props.isSwapped).toEqual(true);
      expect(wrapper).toMatchSnapshot();
    });

    console.error.mockClear();
  });

  describe('rendering output', () => {
    it('should render the default output when supplied default person prop type', () => {
      const wrapper = shallow(<Person {...defaultProps} />);

      // const expected = '<a class="person pnnl-profile-trigger "><img src="https://image.pnl.gov"/><span>Jane Doe<small>Manager</small></span></a>';

      expect(wrapper).toMatchSnapshot();
    });

    it('should render altName prop type when supplied ', () => {
      const wrapper = mount(<Person {...defaultProps} altName="James Smith" />);

      expect(wrapper.contains([<strong>James Smith</strong>, <small>Manager</small>])).toEqual(true);
    });

    it('should render altTitle prop type when supplied ', () => {
      const wrapper = mount(<Person {...defaultProps} altTitle="Developer" />);

      expect(wrapper.contains([<strong>Jane Doe</strong>, <small>Developer</small>])).toEqual(true);
    });

    it('should be able to swap rendering of NAME and TITLE when isSwapped is supplied ', () => {
      const wrapper = mount(<Person {...defaultProps} isSwapped />);

      expect(wrapper.contains([<strong>Manager</strong>, <small>Jane Doe</small>])).toEqual(true);
    });

    it('should be able to swap rendering of NAME and TITLE when isSwapped is supplied and alternate values are used', () => {
      const wrapper = mount(<Person {...defaultProps} altName="James Smith" altTitle="Developer" isSwapped />);

      expect(wrapper.contains([<strong>Developer</strong>, <small>James Smith</small>])).toEqual(true);
    });
  });

  test('Person renders expected output', () => {
    const wrapper = shallow(<Person {...defaultProps} />);
    expect(wrapper).toMatchSnapshot();
  });
});
