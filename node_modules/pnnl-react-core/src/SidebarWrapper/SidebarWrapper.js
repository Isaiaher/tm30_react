import React from 'react';
import PropTypes from 'prop-types';
import { Grid, Row } from 'react-bootstrap';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import Icon from '../Icon';

class SidebarWrapper extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      sidebarOpen: this.props.sidebarOpen,
    };

    this.toggleSidebarVisibility = this.toggleSidebarVisibility.bind(this);
  }

  toggleSidebarVisibility() {
    this.setState({
      sidebarOpen: !this.state.sidebarOpen,
    });
  }

  buildElements(isOpen) {
    const {
      align, children, sidebarComponent, collapsible, toggleLabel
    } = this.props;
    const sidebarElements = [];

    if (collapsible) {
      const toggleIcon = ((isOpen && align === 'left') || (!isOpen && align === 'right')) ? 'chevron-up' : 'chevron-down';

      sidebarElements.push(
        <CSSTransition key={1} classNames="PnnlSidebar" in={isOpen} timeout={400} appear>
          {sidebarComponent}
        </CSSTransition>,
        <button key={2} className="PnnlSidebarToggle" onClick={this.toggleSidebarVisibility}>
          <div>
            <Icon icon={toggleIcon} />
            <small>{toggleLabel}</small>
            <Icon icon={toggleIcon} />
          </div>
        </button>
      );
    } else {
      const newComponent = React.cloneElement(sidebarComponent, { key: 1 });
      sidebarElements.push(newComponent);
    }

    sidebarElements.push(<div key={3} className="PnnlSidebarNeighbor">{children}</div>);

    if (align === 'right') {
      sidebarElements.reverse();
    }

    return (sidebarElements);
  }

  render() {
    const { align, fluid, sidebarComponent } = this.props;
    const wrapperClassNames = classNames('PnnlSidebarWrapper', align);
    const elements = (sidebarComponent) ? this.buildElements(this.state.sidebarOpen) : null;

    return (
      <Grid fluid={fluid}>
        <Row className={wrapperClassNames}>
          {elements}
        </Row>
      </Grid>
    );
  }
}

SidebarWrapper.propTypes = {
  /**
   * Determines which side the Sidebar will be aligned to.
   */
  align: PropTypes.oneOf(['left', 'right']),
  /**
   * Whether the Sidebar can be collapsed.
   */
  collapsible: PropTypes.bool,
  /**
   * Whether the Container should use a fluid layout. You should probably match this to the rest of your application.
   */
  fluid: PropTypes.bool,
  /**
   * The Sidebar component that will be aligned to the rest of the content.
   * @required
   */
  sidebarComponent: PropTypes.node.isRequired,
  /**
   * Whether the Sidebar is currently open.
   */
  sidebarOpen: PropTypes.bool,
  /**
   * The label to be displayed in the toggle button. This should be descriptive enough that the user understands the type of content hidden when the Sidebar is collapsed.
   */
  toggleLabel: PropTypes.string,
  /**
   * The content to be displayed next to the Sidebar.
   * @required
   */
  children: PropTypes.node.isRequired,
};

SidebarWrapper.defaultProps = {
  align: 'left',
  collapsible: false,
  fluid: false,
  sidebarOpen: true,
  toggleLabel: 'Sidebar',
};

export default SidebarWrapper;
