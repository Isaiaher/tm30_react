'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Chip = function (_React$Component) {
  (0, _inherits3['default'])(Chip, _React$Component);

  function Chip() {
    var _temp, _this, _ret;

    (0, _classCallCheck3['default'])(this, Chip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleDeleteIconClick = function (event) {
      // Stop the event from bubbling up to the `Chip`
      event.stopPropagation();
      var onDelete = _this.props.onDelete;

      if (onDelete) {
        onDelete(event);
      }
    }, _this.handleKeyDown = function (event) {
      var onKeyDown = _this.props.onKeyDown;

      if (onKeyDown) {
        onKeyDown(event);
      }

      // Ignore events from children of `Chip`.
      if (event.currentTarget !== event.target) {
        return;
      }

      var key = event.key;

      if (key === ' ' || key === 'Enter' || key === 'Backspace' || key === 'Escape') {
        event.preventDefault();
      }
    }, _this.handleKeyUp = function (event) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          onDelete = _this$props.onDelete,
          onKeyUp = _this$props.onKeyUp;


      if (onKeyUp) {
        onKeyUp(event);
      }

      // Ignore events from children of `Chip`.
      if (event.currentTarget !== event.target) {
        return;
      }

      var key = event.key;

      if (onClick && (key === ' ' || key === 'Enter')) {
        onClick(event);
      } else if (onDelete && key === 'Backspace') {
        onDelete(event);
      }
    }, _temp), (0, _possibleConstructorReturn3['default'])(_this, _ret);
  }

  Chip.prototype.render = function render() {
    var _props = this.props,
        thumbnailProp = _props.thumbnail,
        className = _props.className,
        label = _props.label,
        onClick = _props.onClick,
        onDelete = _props.onDelete,
        onKeyDown = _props.onKeyDown,
        onKeyUp = _props.onKeyUp,
        tabIndexProp = _props.tabIndex,
        variant = _props.variant,
        size = _props.size,
        color = _props.color,
        other = (0, _objectWithoutProperties3['default'])(_props, ['thumbnail', 'className', 'label', 'onClick', 'onDelete', 'onKeyDown', 'onKeyUp', 'tabIndex', 'variant', 'size', 'color']);


    var deleteIcon = null;
    if (onDelete) {
      deleteIcon = _react2['default'].createElement(
        'button',
        {
          className: 'PnnlChip-delete',
          onClick: this.handleDeleteIconClick
        },
        _react2['default'].createElement(_Icon2['default'], { icon: 'crossmark-circle', iconDisplay: 'solid' })
      );
    }

    var thumbnail = null;
    if (thumbnailProp && _react2['default'].isValidElement(thumbnailProp)) {
      thumbnail = thumbnailProp;
    }

    var tabIndex = tabIndexProp;
    if (!tabIndex) {
      tabIndex = onClick || onKeyDown || onDelete ? 0 : -1;
    }

    var chipContent = null;
    if (onClick || onKeyDown) {
      chipContent = _react2['default'].createElement(
        'button',
        {
          tabIndex: tabIndex,
          onClick: onClick,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp
        },
        _react2['default'].createElement(
          'div',
          { className: 'PnnlChip-thumbnail' },
          thumbnail
        ),
        _react2['default'].createElement(
          'span',
          { className: 'PnnlChip-label' },
          label
        )
      );
    } else {
      chipContent = _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement(
          'div',
          { className: 'PnnlChip-thumbnail' },
          thumbnail
        ),
        _react2['default'].createElement(
          'span',
          { className: 'PnnlChip-label' },
          label
        )
      );
    }

    var componentClassNames = (0, _classnames2['default'])('PnnlChip', 'PnnlChip-' + variant, 'PnnlChip-' + size, 'PnnlChip-' + color, className, { 'PnnlChip-hasThumbnail': thumbnail }, { 'PnnlChip-hasClick': onClick || onKeyDown });

    return _react2['default'].createElement(
      'div',
      (0, _extends3['default'])({
        className: componentClassNames
      }, other),
      chipContent,
      deleteIcon
    );
  };

  return Chip;
}(_react2['default'].Component);

Chip.propTypes = {
  /**
   * An element to display in the thumbnail slot at the left of the Chip label. Could be an Avatar, Icon, or other element that can fit in that slot. Avatars should use the 'xs' size. For a small or medium Chip the thumbnail should be 20px wide/high; for a large Chip the thumbnail should be 24px wide/high.
   */
  thumbnail: _propTypes2['default'].element,
  /**
   * Override or extend the styles applied to the component.
   */
  className: _propTypes2['default'].string,
  /**
   * Specify a color for the Chip.
   */
  color: _propTypes2['default'].oneOf(['copper', 'silver', 'onyx', 'bronze', 'platinum', 'gold', 'emerald', 'sapphire', 'ruby', 'topaz', 'mercury', 'garnet', 'amethyst', 'emsl-green']),
  /**
   * The content of the label.
   */
  label: _propTypes2['default'].string.isRequired,
  /**
   * Callback function fired when the main body of the Chip is clicked.
   */
  onClick: _propTypes2['default'].func,
  /**
   * Callback function fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: _propTypes2['default'].func,
  /**
   * @ignore
   */
  onKeyDown: _propTypes2['default'].func,
  /**
   * @ignore
   */
  onKeyUp: _propTypes2['default'].func,
  /**
   * @ignore
   */
  tabIndex: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].string]),
  /**
   * The variant to use. Solid is off limits for now.
   * @ignore
   */
  variant: _propTypes2['default'].oneOf(['solid', 'outline']),
  /**
   * Size of the chip to display. Default is medium, other options are small and large.
   */
  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg'])
};

Chip.defaultProps = {
  thumbnail: null,
  className: '',
  onClick: null,
  onDelete: null,
  onKeyDown: null,
  onKeyUp: null,
  tabIndex: null,
  color: 'onyx',
  variant: 'outline',
  size: 'md'
};

exports['default'] = Chip;
module.exports = exports['default'];