{"ast":null,"code":"/*\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootSaga from \"./sagas/root\";\nimport rootReducer from \"./redux/reducers\";\n\nimport dataReducers from \"./redux/reducers/dataReducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(history, initialState) {\n  const storeEnhancers = [];\n  if (process.env.NODE_ENV !== \"production\") {\n    console.log(\n      `=-=-=-= The current application is running in ${process.env.NODE_ENV} mode =-=-=-=`\n    ); // eslint-disable-line\n    storeEnhancers.push(\n      typeof window === \"object\" &&\n        typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f\n    );\n  }\n\n  const reducers = combineReducers({\n    data: dataReducers\n  })\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(sagaMiddleware, thunkMiddleware), ...storeEnhancers)\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"./redux/reducers\", () => {\n      const nextRootReducer = require(\"./redux/reducers\"); // eslint-disable-line\n\n      store.replaceReducer(nextRootReducer.default || nextRootReducer);\n    });\n  }\n\n  return store;\n}\n*/\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport dataReducers from \"./redux/reducers/dataReducers\";\nconst initialState = {};\nconst middleware = [thunk];\nconst reducers = combineReducers({\n  data: dataReducers\n});\nconst composeEnhancers = typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\nconst store = createStore(reducers, initialState, enhancer);\nexport default store;","map":{"version":3,"sources":["/Users/sche566/OneDrive - PNNL/Code/ies_tm30_web_app/React App/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","dataReducers","initialState","middleware","reducers","data","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancer","store"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACH,KAAD,CAAnB;AAEA,MAAMI,QAAQ,GAAGP,eAAe,CAAC;AAC/BQ,EAAAA,IAAI,EAAEJ;AADyB,CAAD,CAAhC;AAIA,MAAMK,gBAAgB,GACpB,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,oCAArC,GACID,MAAM,CAACC,oCAAP,CAA4C,EAA5C,CADJ,GAEIT,OAHN;AAKA,MAAMU,QAAQ,GAAGH,gBAAgB,CAACR,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAAjC;AACA,MAAMO,KAAK,GAAGd,WAAW,CAACQ,QAAD,EAAWF,YAAX,EAAyBO,QAAzB,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["/*\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootSaga from \"./sagas/root\";\nimport rootReducer from \"./redux/reducers\";\n\nimport dataReducers from \"./redux/reducers/dataReducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(history, initialState) {\n  const storeEnhancers = [];\n  if (process.env.NODE_ENV !== \"production\") {\n    console.log(\n      `=-=-=-= The current application is running in ${process.env.NODE_ENV} mode =-=-=-=`\n    ); // eslint-disable-line\n    storeEnhancers.push(\n      typeof window === \"object\" &&\n        typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : f => f\n    );\n  }\n\n  const reducers = combineReducers({\n    data: dataReducers\n  })\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(sagaMiddleware, thunkMiddleware), ...storeEnhancers)\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  if (module.hot) {\n    module.hot.accept(\"./redux/reducers\", () => {\n      const nextRootReducer = require(\"./redux/reducers\"); // eslint-disable-line\n\n      store.replaceReducer(nextRootReducer.default || nextRootReducer);\n    });\n  }\n\n  return store;\n}\n*/\n\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport dataReducers from \"./redux/reducers/dataReducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reducers = combineReducers({\n  data: dataReducers\n});\n\nconst composeEnhancers =\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\nconst store = createStore(reducers, initialState, enhancer);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}