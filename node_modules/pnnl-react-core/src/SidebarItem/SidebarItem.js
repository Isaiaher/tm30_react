import React from 'react';
import Link from 'react-router-dom/Link';
import PropTypes from 'prop-types';
import Badge from 'react-bootstrap/lib/Badge';
import Button from 'react-bootstrap/lib/Button';
import classNames from 'classnames';
import ValidationIcon from '../ValidationIcon';

class SidebarItem extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      itemActive: this.props.itemActive,
    };

    this.renderAnchor = this.renderAnchor.bind(this);
    this.renderButton = this.renderButton.bind(this);
    this.renderValidation = this.renderValidation.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    this.setState({
      itemActive: nextProps.itemActive,
    });
  }

  renderAnchor() {
    const {
      title, count, href, validationState
    } = this.props;
    /* eslint-disable jsx-a11y/anchor-is-valid */
    return (
      <Link to={href}>
        {validationState && this.renderValidation()}
        {title}
        {count &&
          <Badge>{count}</Badge>
        }
      </Link>
    );
    /* eslint-enable jsx-a11y/anchor-is-valid */
  }

  renderButton() {
    const {
      title, count, onClick, validationState
    } = this.props;

    return (
      <Button bsStyle="link" onClick={onClick}>
        {validationState && this.renderValidation()}
        {title}
        {count &&
          <Badge>{count}</Badge>
        }
      </Button>
    );
  }

  renderValidation() {
    const { validationState } = this.props;

    return (<ValidationIcon validationState={validationState} />);
  }

  render() {
    const { onClick, children } = this.props;
    const itemClasses = classNames(
      'PnnlSidebarItem',
      { active: this.state.itemActive },
    );

    let actionLink = null;
    if (onClick) {
      actionLink = this.renderButton();
    } else {
      actionLink = this.renderAnchor();
    }

    return (
      <div className={itemClasses}>
        {actionLink}
        {children}
      </div>
    );
  }
}

SidebarItem.propTypes = {
  /**
   * If included, adds a Badge component with the count to the SidebarItem.
   */
  count: PropTypes.number,
  /**
   * If no onClick prop is supplied, a Link to this href will be created as the major element of the SidebarItem instead of a Button.
   */
  href: PropTypes.string,
  /**
   * Whether this SidebarItem is currently active/visible.
   */
  itemActive: PropTypes.bool,
  /**
   * Will create a Button to trigger the click action as the major element of the SidebarItem instead of a Link. The function will also be called onKeypress
   */
  onClick: PropTypes.func,
  /**
   * The label to be displayed in the Link/Button.
   * @required
   */
  title: PropTypes.string.isRequired,
  /**
   * If the SidebarItem has validation, display an icon summarizing the validation state. Adds a span and ValidationIcon before the title.
   */
  validationState: PropTypes.oneOf(['success', 'error', 'incomplete', 'warning']),
  /**
   * Additional components to be added to the SidebarItem.  Actions and Dropdowns are common items.
   */
  children: PropTypes.node,
};

SidebarItem.defaultProps = {
  count: null,
  href: '',
  itemActive: false,
  onClick: undefined,
  validationState: null,
  children: null,
};

export default SidebarItem;
