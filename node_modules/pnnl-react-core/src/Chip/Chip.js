import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Icon from '../Icon';

class Chip extends React.Component {
  handleDeleteIconClick = (event) => {
    // Stop the event from bubbling up to the `Chip`
    event.stopPropagation();
    const { onDelete } = this.props;
    if (onDelete) {
      onDelete(event);
    }
  };

  handleKeyDown = (event) => {
    const { onKeyDown } = this.props;
    if (onKeyDown) {
      onKeyDown(event);
    }

    // Ignore events from children of `Chip`.
    if (event.currentTarget !== event.target) {
      return;
    }

    const { key } = event;
    if (key === ' ' || key === 'Enter' || key === 'Backspace' || key === 'Escape') {
      event.preventDefault();
    }
  };

  handleKeyUp = (event) => {
    const { onClick, onDelete, onKeyUp } = this.props;

    if (onKeyUp) {
      onKeyUp(event);
    }

    // Ignore events from children of `Chip`.
    if (event.currentTarget !== event.target) {
      return;
    }

    const { key } = event;
    if (onClick && (key === ' ' || key === 'Enter')) {
      onClick(event);
    } else if (onDelete && key === 'Backspace') {
      onDelete(event);
    }
  };

  render() {
    const {
      thumbnail: thumbnailProp,
      className,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      tabIndex: tabIndexProp,
      variant,
      size,
      color,
      ...other
    } = this.props;

    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = (
        <button
          className="PnnlChip-delete"
          onClick={this.handleDeleteIconClick}
        >
          <Icon icon="crossmark-circle" iconDisplay="solid" />
        </button>
      );
    }

    let thumbnail = null;
    if (thumbnailProp && React.isValidElement(thumbnailProp)) {
      thumbnail = thumbnailProp;
    }

    let tabIndex = tabIndexProp;
    if (!tabIndex) {
      tabIndex = onClick || onKeyDown || onDelete ? 0 : -1;
    }

    let chipContent = null;
    if (onClick || onKeyDown) {
      chipContent = (
        <button
          tabIndex={tabIndex}
          onClick={onClick}
          onKeyDown={this.handleKeyDown}
          onKeyUp={this.handleKeyUp}
        >
          <div className="PnnlChip-thumbnail">
            {thumbnail}
          </div>
          <span className="PnnlChip-label">{label}</span>
        </button>
      );
    } else {
      chipContent = (
        <div>
          <div className="PnnlChip-thumbnail">
            {thumbnail}
          </div>
          <span className="PnnlChip-label">{label}</span>
        </div>
      );
    }

    const componentClassNames = classNames(
      'PnnlChip',
      `PnnlChip-${variant}`,
      `PnnlChip-${size}`,
      `PnnlChip-${color}`,
      className,
      { 'PnnlChip-hasThumbnail': thumbnail },
      { 'PnnlChip-hasClick': (onClick || onKeyDown) }
    );

    return (
      <div
        className={componentClassNames}
        {...other}
      >
        {chipContent}
        {deleteIcon}
      </div>
    );
  }
}

Chip.propTypes = {
  /**
   * An element to display in the thumbnail slot at the left of the Chip label. Could be an Avatar, Icon, or other element that can fit in that slot. Avatars should use the 'xs' size. For a small or medium Chip the thumbnail should be 20px wide/high; for a large Chip the thumbnail should be 24px wide/high.
   */
  thumbnail: PropTypes.element,
  /**
   * Override or extend the styles applied to the component.
   */
  className: PropTypes.string,
  /**
   * Specify a color for the Chip.
   */
  color: PropTypes.oneOf(['copper', 'silver', 'onyx', 'bronze', 'platinum', 'gold', 'emerald', 'sapphire', 'ruby', 'topaz', 'mercury', 'garnet', 'amethyst', 'emsl-green']),
  /**
   * The content of the label.
   */
  label: PropTypes.string.isRequired,
  /**
   * Callback function fired when the main body of the Chip is clicked.
   */
  onClick: PropTypes.func,
  /**
   * Callback function fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: PropTypes.func,
  /**
   * @ignore
   */
  onKeyDown: PropTypes.func,
  /**
   * @ignore
   */
  onKeyUp: PropTypes.func,
  /**
   * @ignore
   */
  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * The variant to use. Solid is off limits for now.
   * @ignore
   */
  variant: PropTypes.oneOf(['solid', 'outline']),
  /**
   * Size of the chip to display. Default is medium, other options are small and large.
   */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
};

Chip.defaultProps = {
  thumbnail: null,
  className: '',
  onClick: null,
  onDelete: null,
  onKeyDown: null,
  onKeyUp: null,
  tabIndex: null,
  color: 'onyx',
  variant: 'outline',
  size: 'md'
};

export default Chip;
