'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Avatar = require('../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _AvatarInfo = require('../AvatarInfo');

var _AvatarInfo2 = _interopRequireDefault(_AvatarInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
* Leaving this as a "smart" component so calling components (eg. ProfilePopover)
* can specify a ref callback function. The ref callback works differently when
* using dumb/functional components.
*/
var Person = function (_React$Component) {
  (0, _inherits3['default'])(Person, _React$Component);

  function Person() {
    (0, _classCallCheck3['default'])(this, Person);
    return (0, _possibleConstructorReturn3['default'])(this, _React$Component.apply(this, arguments));
  }

  Person.prototype.render = function render() {
    var _props = this.props,
        person = _props.person,
        onClickCallback = _props.onClickCallback,
        altName = _props.altName,
        altTitle = _props.altTitle,
        isSwapped = _props.isSwapped,
        isCondensed = _props.isCondensed,
        size = _props.size;
    var align = this.props.align;


    var compactClass = isCondensed ? 'condensed' : '';
    var _className = (0, _classnames2['default'])('PnnlPerson', 'pnnl-profile-trigger', compactClass);
    var fullName = person.firstName + ' ' + person.lastName;
    var avatarText = person.firstName.slice(0, 1);
    avatarText = avatarText.concat(person.lastName.slice(0, 1));

    if (person) {
      var avatarComponent = person.portraitLink !== undefined ? _react2['default'].createElement(_Avatar2['default'], { src: person.portraitLink, size: size }) : _react2['default'].createElement(
        _Avatar2['default'],
        { size: size },
        avatarText
      );

      var title = fullName;
      if (typeof altName === 'string' || _react2['default'].isValidElement(altName)) {
        title = altName;
      }
      var subTitle = person.title;
      if (typeof altTitle === 'string' || _react2['default'].isValidElement(altTitle)) {
        subTitle = altTitle;
      }
      if (isSwapped) {
        var placeholder = title;
        title = subTitle;
        subTitle = placeholder;
      }

      if (isCondensed) align = 'center';

      var avatarInfo = _react2['default'].createElement(_AvatarInfo2['default'], { avatarComponent: avatarComponent, title: title, subTitle: subTitle, align: align });

      if (onClickCallback) {
        return _react2['default'].createElement(
          'button',
          { className: _className, onClick: onClickCallback },
          avatarInfo
        );
      }
      return _react2['default'].createElement(
        'div',
        { className: _className },
        avatarInfo
      );
    }

    return null;
  };

  return Person;
}(_react2['default'].Component); /* eslint react/jsx-no-bind: 0, react/prefer-stateless-function:0 */


Person.propTypes = {
  /**
    * A Person object for the person you want to create the card for.
    *
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/people/{hid}/?expand=space,facility
    * @required
    * */
  person: _propTypes2['default'].shape({
    portraitLink: _propTypes2['default'].string,
    firstName: _propTypes2['default'].string,
    lastName: _propTypes2['default'].string,
    title: _propTypes2['default'].string
  }).isRequired,

  /**
   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
   */
  align: _propTypes2['default'].oneOf(['left', 'right', 'center']),

  /**
    * Overrides the `name` on the Person display.
    * */
  altName: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element]),

  /**
    * Overrides the `title` on the Person display.
    * */
  altTitle: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element]),

  /**
    * Callback you want to run if the Person component is `clicked`.
    * */
  onClickCallback: _propTypes2['default'].func,

  /**
    * Swaps the `name` and `title` positions on the Person display.
    *
    * This will not change the styles of those two locations. It will only swap the values of the text pieces.
    * */
  isSwapped: _propTypes2['default'].bool,

  /**
    * Allows a condensed view of the Person display when true. By default, the `name` of the individual will
    * appear below the image of the individual in a smaller font size, without the display of the `title`.
    * If isSwapped is also true, the `title` of the individual will be displayed in place of the `name`.
    *
    * This will add a class, `condensed`, to the Person display.
    * */
  isCondensed: _propTypes2['default'].bool,

  /**
   * The size of the Avatar to be generated.
   */
  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg'])
};

Person.defaultProps = {
  align: 'left',
  altName: undefined,
  altTitle: undefined,
  onClickCallback: undefined,
  isSwapped: false,
  isCondensed: false,
  size: 'md'
};

exports['default'] = Person;
module.exports = exports['default'];