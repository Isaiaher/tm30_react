import React from 'react';
import PropTypes from 'prop-types';
import Panel from 'react-bootstrap/lib/Panel';
import Icon from '../Icon';

class Card extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      collapsed: props.collapsed,
    };
  }

  setViewState = (collapsed) => {
    const { onToggleCollapse } = this.props;
    const newState = {
      collapsed,
    };
    this.setState(newState);
    if (onToggleCollapse) {
      onToggleCollapse(newState);
    }
  }

  getHeader = () => {
    const { header, collapsible } = this.props;
    let headerContent = null;
    if (typeof header === 'string') {
      headerContent = (
        <React.Fragment>
          {header}
          {collapsible && <span className="arrow"><Icon icon="chevron-up" /></span>}
        </React.Fragment>
      );
    } else {
      headerContent = header;
    }
    const intContent = (<Panel.Title toggle={collapsible} componentClass="h1">{headerContent}</Panel.Title>);
    return (
      <Panel.Heading>
        {intContent}
      </Panel.Heading>
    );
  }

  getFooter = () => {
    const { footer } = this.props;

    return (
      <Panel.Footer>{footer}</Panel.Footer>
    );
  }

  getMainContent = () => {
    const { collapsible, altContent, children } = this.props;
    const { collapsed } = this.state;
    let mainContent = (
      <Panel.Body>
        {children}
      </Panel.Body>
    );
    if (collapsible) {
      let altContentNode = '';
      if (altContent && collapsed) {
        altContentNode = (
          <div className="PnnlCard-alt">
            {altContent}
          </div>
        );
      }
      mainContent = (
        <React.Fragment>
          {altContentNode}
          <Panel.Collapse>
            <Panel.Body>
              {children}
            </Panel.Body>
          </Panel.Collapse>
        </React.Fragment>
      );
    }
    return mainContent;
  }

  collapseCard = () => {
    this.setViewState(true);
  }

  expandCard = () => {
    this.setViewState(false);
  }

  toggleCollapse = () => {
    this.setViewState(!this.state.collapsed);
  }

  render() {
    const {
      header, footer, className, style,
    } = this.props;
    let headerContent = '';
    if (header) {
      headerContent = this.getHeader();
    }
    const mainContent = this.getMainContent();
    let footerContent = '';
    if (footer) {
      footerContent = this.getFooter();
    }

    return (
      <Panel
        bsClass="PnnlCard"
        className={className}
        style={style}
        onToggle={this.setViewState}
        defaultExpanded={!this.state.collapsed}
      >
        {headerContent}
        {mainContent}
        {footerContent}
      </Panel>
    );
  }
}

Card.propTypes = {
  /**
    * Header to be displayed at the top of the card. If not provided then no header will be rendered.
    * */
  header: PropTypes.oneOfType([
    PropTypes.node,
    PropTypes.string
  ]),
  /**
    * Footer to be displayed at the bottom of the card. If not provided then no footer will be rendered.
    * */
  footer: PropTypes.oneOfType([
    PropTypes.node,
    PropTypes.string
  ]),
  /**
    * Should the card be collapsed on initial render?  False by default.
    * */
  collapsed: PropTypes.bool,
  /**
    * Should the card be collapsible by clicking on the header?  False by default.
    * */
  collapsible: PropTypes.bool,
  /**
    * Function to be called when the card is collapsed/expanded.  Can be used to change out the header content that will be displayed in the collapsed state.
    * */
  onToggleCollapse: PropTypes.func,
  /**
    * Content that will be displayed when the card is collapsed.  This can provide users a hint at what the collapsed card contains.  The alternative content should be informative, not interactive, and must not contain items that are unavailable in the main content of the card.
    * */
  altContent: PropTypes.node,
};

Card.defaultProps = {
  collapsible: false,
  collapsed: false,
  header: null,
  footer: null,
  onToggleCollapse: null,
  altContent: null,
};

export default Card;
