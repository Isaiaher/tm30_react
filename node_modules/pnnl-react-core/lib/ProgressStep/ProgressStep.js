'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactBootstrap = require('react-bootstrap');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _titleCase = require('title-case');

var _titleCase2 = _interopRequireDefault(_titleCase);

var _Avatar = require('../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var ProgressStep = function (_Component) {
  (0, _inherits3['default'])(ProgressStep, _Component);

  function ProgressStep(props) {
    (0, _classCallCheck3['default'])(this, ProgressStep);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _Component.call(this, props));

    _this.renderAvatar = _this.renderAvatar.bind(_this);
    _this.renderButton = _this.renderButton.bind(_this);
    _this.renderNode = _this.renderNode.bind(_this);
    return _this;
  }

  ProgressStep.prototype.renderAvatar = function renderAvatar() {
    var _props = this.props,
        avatar = _props.avatar,
        status = _props.status;

    // return custom avatar component

    if (avatar) {
      return avatar;
    }

    var icon = this.props.icon;

    var avatarClass = 'text-platinum white';
    var iconDisplay = 'outline';

    switch (status) {
      case 'active':
        avatarClass = 'text-gold gold-10';
        iconDisplay = 'solid';
        break;
      case 'complete':
        avatarClass = 'text-white emerald';
        iconDisplay = 'solid';
        break;
      case 'error':
        avatarClass = 'text-white ruby';
        iconDisplay = 'solid';
        icon = 'error';
        break;
      case 'warning':
        avatarClass = 'text-ruby white';
        icon = 'alert';
        break;
      default:
        break;
    }

    avatarClass = (0, _classnames2['default'])(avatarClass, ['PnnlProgressStep-' + status]);

    // Return default inactive avatar component
    return _react2['default'].createElement(
      _Avatar2['default'],
      { className: avatarClass, size: 'sm' },
      _react2['default'].createElement(_Icon2['default'], { icon: icon, iconDisplay: iconDisplay })
    );
  };

  ProgressStep.prototype.renderNode = function renderNode() {
    var label = this.props.label;


    return _react2['default'].createElement(
      'div',
      { className: 'PnnlProgressStep' },
      this.renderAvatar(),
      _react2['default'].createElement(
        'span',
        { className: 'PnnlProgressStepLabel' },
        label
      )
    );
  };

  ProgressStep.prototype.renderButton = function renderButton() {
    var _props2 = this.props,
        label = _props2.label,
        onClick = _props2.onClick;

    var stepClasses = (0, _classnames2['default'])('PnnlProgressStep', 'hasClick');

    return _react2['default'].createElement(
      'button',
      {
        className: stepClasses,
        onClick: onClick,
        onKeyDown: onClick
      },
      this.renderAvatar(),
      _react2['default'].createElement(
        'span',
        { className: 'PnnlProgressStepLabel' },
        label
      )
    );
  };

  ProgressStep.prototype.render = function render() {
    var _props3 = this.props,
        label = _props3.label,
        onClick = _props3.onClick,
        status = _props3.status;


    var node = this.renderNode();
    if (onClick) {
      node = this.renderButton();
    }

    return _react2['default'].createElement(
      _reactBootstrap.OverlayTrigger,
      {
        overlay: _react2['default'].createElement(
          _reactBootstrap.Tooltip,
          { id: 'progress-' + label },
          (0, _titleCase2['default'])(status)
        ),
        placement: 'top',
        delayShow: 300,
        delayHide: 150
      },
      node
    );
  };

  return ProgressStep;
}(_react.Component);

ProgressStep.propTypes = {
  /**
   * The avatar displayed above the step label. If no avatar is supplied, a default avatar will be displayed.
   */
  avatar: _propTypes2['default'].node,
  /**
   * Available progress states
   */
  status: _propTypes2['default'].oneOf(['inactive', 'active', 'complete', 'error', 'warning']),
  /**
   * Label for display*
   */
  label: _propTypes2['default'].string,
  /**
   * Custom icon name to display
   */
  icon: _propTypes2['default'].string,
  /**
    * Optional function to call when clicking a step.
    * Can be used to swap out the detail component when clicking a particular step.
    * */
  onClick: _propTypes2['default'].func
};

ProgressStep.defaultProps = {
  avatar: undefined,
  label: '',
  icon: 'checkmark',
  status: undefined,
  onClick: undefined
};

exports['default'] = ProgressStep;
module.exports = exports['default'];