import React from 'react';
import { shallow } from 'enzyme';

import NavItem from '../NavItem';
import Action from '../Action';

/*
* During test writing you can selectively run just these tests or skip individual ones while you
* work on others https://facebook.github.io/jest/docs/en/api.html#testskipname-fn
*/
describe('<NavItem />', () => {
  const defaultProps = {
    icon: 'help',
    text: 'Help',
    to: '/help',
  };

  const badgeProps = {
    icon: 'notification',
    text: 'Notifications',
    to: '/notifications',
    count: 2,
  };

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('../index.js');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.NavItem).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(NavItem).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    it('should render when no prop types supplied', () => {
      expect(() => shallow(<NavItem />)).toMatchSnapshot();
    });
  });

  describe('rendering output', () => {
    it('should render the default output when supplied default props', () => {
      const wrapper = shallow(<NavItem {...defaultProps} />);

      expect(wrapper.getElement()).toBeTruthy();
      expect(wrapper.type()).toEqual('li');
      expect(wrapper.find(Action)).toHaveLength(1);
    });

    it('should render a badge when supplied badge props', () => {
      const wrapper = shallow(<NavItem {...badgeProps} />);

      expect(wrapper.getElement()).toBeTruthy();
      expect(wrapper.type()).toEqual('li');
      expect(wrapper.find(Action)).toHaveLength(1);
      // expect(wrapper.find(Badge)).toHaveLength(1);

      /* const nextWrapper = */wrapper.childAt(1);
      // expect(nextWrapper).toHaveProperty('children');
      // expect(nextWrapper.getElement().props.children).toEqual(2);
      expect(wrapper).toMatchSnapshot();
    });
  });

  test('NavItem renders expected output', () => {
    const wrapper = shallow(<NavItem {...defaultProps} />);
    expect(wrapper).toMatchSnapshot();
  });
});
