import React from 'react';
import PropTypes from 'prop-types';
import config from '../config';
import Avatar from '../Avatar';
import AvatarInfo from '../AvatarInfo';
import Loader from '../Loader';
import api from '../__helpers/restApiHelper';

export default class Space extends React.Component {
  static propTypes = {
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    /**
      * A Facility object for the facility you want to display.
      *
      *
      * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/spaces/{id}?expand=facility
      * */
    space: PropTypes.shape({
      id: PropTypes.string,
      name: PropTypes.string,
      description: PropTypes.string,
      thumbnailImage: PropTypes.string,
      facility: PropTypes.shape({
        id: PropTypes.string,
        abbreviation: PropTypes.string,
      }),
    }),

    /**
     * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
     */
    align: PropTypes.oneOf(['left', 'right', 'center']),

    /**
      * Callback you want to run if the Person component is `clicked`.
      * */
    onClick: PropTypes.func,

    /**
     * The size of the Avatar to be generated.
     */
    size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
  };

  static defaultProps = {
    align: 'left',
    onClick: undefined,
    size: 'md',
    space: undefined,
    id: undefined,
  };


  constructor(props) {
    super(props);
    this.state = {
      data: this.props.space || undefined,
    };
  }

  componentDidMount() {
    if (!this.props.id && !this.props.space) {
      throw new Error('A space identifier was not supplied. This can be either props.id (Space Id) or props.space.id.');
    }
    if (this.props.id && !this.props.space) {
      api.GET(config.opwhse.space(this.props.id), {
        signal: this.abortController && this.abortController.signal
      })
        .then((data) => {
          this.setState({
            data,
          });
        })
        .catch((error) => {
          throw new Error(`An error resulted when trying to get the space from the API. ${error}`);
        });
    }
  }

  componentWillUnmount() {
    if (this.abortController) {
      this.abortController.abort();
    }
  }

  abortController = (window && window.AbortController) ? new window.AbortController() : undefined;

  render() {
    const { data } = this.state;
    const { onClick, size, align } = this.props;

    if (!data) {
      return (
        <Loader show />
      );
    }
    const title = data.name === data.description ? `${data.facility.abbreviation} ${data.name}` : data.description;
    const subTitle = data.name === data.description ? '' : `${data.facility.abbreviation} ${data.name}`;

    const avatarComponent =
      (<Avatar src={data.thumbnailImage || config.defaultSpaceImage} size={size} />);

    const avatarInfo = (
      <AvatarInfo avatarComponent={avatarComponent} title={title} subTitle={subTitle} align={align} />
    );

    if (onClick) {
      return (
        <button className="PnnlSpace" onClick={onClick}>
          {avatarInfo}
        </button>
      );
    }
    return (
      <div className="PnnlSpace">
        {avatarInfo}
      </div>
    );
  }
}
