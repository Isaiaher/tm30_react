'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Grid = require('react-bootstrap/lib/Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _Row = require('react-bootstrap/lib/Row');

var _Row2 = _interopRequireDefault(_Row);

var _Collapse = require('react-bootstrap/lib/Collapse');

var _Collapse2 = _interopRequireDefault(_Collapse);

var _Link = require('react-router-dom/Link');

var _Link2 = _interopRequireDefault(_Link);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Link3 = require('../Link');

var _Link4 = _interopRequireDefault(_Link3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var Header = function (_React$Component) {
  (0, _inherits3['default'])(Header, _React$Component);

  function Header(props) {
    (0, _classCallCheck3['default'])(this, Header);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.state = {
      isMobile: function isMobile() {
        return document.body.clientWidth < 768;
      }, // Width in pixels below which the navigation will be accessible as a menu
      navbarCollapse: true,
      navbarTransitioning: false
    };

    _this.onToggle = _this.onToggle.bind(_this);
    _this.onAppTitleClick = _this.onAppTitleClick.bind(_this);
    _this.onNavActionsClick = _this.onNavActionsClick.bind(_this);
    _this.onTransitionEnd = _this.onTransitionEnd.bind(_this);
    _this.getParentSiteElement = _this.getParentSiteElement.bind(_this);
    return _this;
  }

  Header.prototype.onAppTitleClick = function onAppTitleClick(event) {
    // Only do this if we're in a mobile context
    if (this.state.isMobile()) {
      event.preventDefault();
      this.onToggle();
    }
    // Otherwise go ahead and let the title navigate to the app root
  };

  Header.prototype.onNavActionsClick = function onNavActionsClick(event) {
    // Only do this if we're in a mobile context
    if (this.state.isMobile()) {
      var node = event.target;
      do {
        // check to see if we are within a non-open dropdown menu
        if (node.classList.contains('dropdown') && !node.classList.contains('open')) {
          return;
        } else if (node.id === 'nav-actions') {
          // get to this by bubbling all the way up the parent stack until you get to the nav container
          this.onToggle();
          return;
        }
        node = node.parentNode;
      } while (node);
    }
  };

  Header.prototype.onToggle = function onToggle() {
    this.setState(function (state) {
      // Writing this way to avoid arrow-body-style lint rule
      var newState = {
        navbarCollapse: !state.navbarCollapse,
        navbarTransitioning: true
      };
      return newState;
    });
  };

  Header.prototype.onTransitionEnd = function onTransitionEnd(event) {
    if (event.srcElement === this.primaryNav) {
      this.setState({
        navbarTransitioning: false
      });
    }
  };

  Header.prototype.getNavigation = function getNavigation() {
    var _props = this.props,
        primaryNav = _props.primaryNav,
        fluid = _props.fluid;

    if (!primaryNav) {
      return '';
    }

    var _state = this.state,
        navbarCollapse = _state.navbarCollapse,
        navbarTransitioning = _state.navbarTransitioning;

    var navClasses = (0, _classnames2['default'])('PnnlNavBar', {
      'open-nav': !navbarCollapse,
      transitioning: navbarTransitioning
    });

    return _react2['default'].createElement(
      'nav',
      {
        className: navClasses,
        onTransitionEnd: this.onTransitionEnd
      },
      _react2['default'].createElement(
        _Collapse2['default'],
        {
          'in': !navbarCollapse,
          role: 'navigation'
        },
        _react2['default'].createElement(
          _Grid2['default'],
          { onClick: this.onNavActionsClick, id: 'nav-actions', fluid: fluid },
          primaryNav
        )
      )
    );
  };

  Header.prototype.getParentSiteElement = function getParentSiteElement() {
    var parentSite = this.props.parentSiteProps;

    if (parentSite && parentSite.label) {
      var labelContent = parentSite.imageHref ? _react2['default'].createElement('img', { src: parentSite.imageHref, alt: parentSite.label }) : _react2['default'].createElement(
        'span',
        null,
        parentSite.label
      );
      if (parentSite.linkHref) {
        return _react2['default'].createElement(
          _Link4['default'],
          { to: parentSite.linkHref },
          labelContent
        );
      }
      return labelContent;
    }
    return null;
  };

  Header.prototype.render = function render() {
    var _props2 = this.props,
        appLogo = _props2.appLogo,
        _props2$appTitle = _props2.appTitle,
        appTitle = _props2$appTitle === undefined ? '' : _props2$appTitle,
        fluid = _props2.fluid,
        children = _props2.children,
        className = _props2.className;

    var navigation = this.getNavigation();
    var headerClasses = (0, _classnames2['default'])({
      'no-nav': !this.props.primaryNav,
      'long-title': appTitle.length > 20
    }, 'PnnlAppHeader', className);

    var parentSiteElement = this.getParentSiteElement();
    if (parentSiteElement) {
      parentSiteElement = _react2['default'].cloneElement(parentSiteElement, {
        className: 'parentSite'
      });
    }

    var icon = '';
    if (appLogo) {
      icon = _react2['default'].createElement('img', { src: appLogo, alt: appTitle, className: 'img-responsive' });
    }
    var title = appTitle ? _react2['default'].createElement(
      'span',
      null,
      appTitle
    ) : null;
    if (children) {
      title = _react2['default'].createElement(
        'span',
        null,
        children
      );
    }

    return _react2['default'].createElement(
      'header',
      { className: headerClasses },
      _react2['default'].createElement(
        _Grid2['default'],
        { fluid: fluid },
        _react2['default'].createElement(
          _Row2['default'],
          null,
          parentSiteElement,
          _react2['default'].createElement(
            _Link2['default'],
            { onClick: this.onAppTitleClick, to: '/', className: 'PnnlAppTitle' },
            _react2['default'].createElement(
              'h1',
              null,
              icon,
              title,
              _react2['default'].createElement('span', { className: 'caret' })
            )
          )
        )
      ),
      navigation
    );
  };

  return Header;
}(_react2['default'].Component);

Header.propTypes = {
  /**
   * The navigation bar.  Should be a NavBar component.
   */
  primaryNav: _propTypes2['default'].node,
  /**
   * If this is an application, this is the icon for it. Guidance on creating app icons is included in the Common Design Standards (forge.pnl.gov/standards)
   */
  appLogo: _propTypes2['default'].string,
  /**
   * The title of the site/applcation. If the title is longer than 20 characters, it will be displayed in a smaller type size.
   */
  appTitle: _propTypes2['default'].string,
  /**
   * Whether the container is fluid or using fixed breakpoints.
   */
  fluid: _propTypes2['default'].bool,
  /**
   * A classname used to target styles.  Usually used to adjust the background color of the title area.
   */
  className: _propTypes2['default'].string,
  /**
   * An object with values used to build a label/link for the parent website, e.g. myPNNL. If an image path is provided the label will be used as alt-text. If a linkHref is provided then the text/image will be wrapped in a link.
   */
  parentSiteProps: _propTypes2['default'].shape({
    label: _propTypes2['default'].string.isRequired,
    imageHref: _propTypes2['default'].string,
    linkHref: _propTypes2['default'].string
  })
};

Header.defaultProps = {
  primaryNav: null,
  appLogo: null,
  appTitle: null,
  fluid: false,
  className: null,
  parentSiteProps: null
};

exports['default'] = Header;
module.exports = exports['default'];