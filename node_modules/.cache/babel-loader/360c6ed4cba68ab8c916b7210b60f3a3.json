{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Portal = _interopRequireWildcard(require(\"./Portal\"));\n\nvar _position = _interopRequireDefault(require(\"./position\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // default colors\n\n\nvar defaultColor = '#fff';\nvar defaultBg = '#333';\nvar resizeThrottle = 100;\nvar resizeThreshold = 5;\n\nvar stopProp = function stopProp(e) {\n  return e.stopPropagation();\n};\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tooltip, _React$Component);\n\n  _createClass(Tooltip, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      return _Portal.isBrowser && nextProps.isOpen ? {\n        hasBeenShown: true\n      } : null;\n    }\n  }]);\n\n  function Tooltip() {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"debounceTimeout\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"hoverTimeout\", false);\n\n    _this.state = {\n      showTip: false,\n      hasHover: false,\n      ignoreShow: false,\n      hasBeenShown: false\n    };\n    _this.showTip = _this.showTip.bind(_assertThisInitialized(_this));\n    _this.hideTip = _this.hideTip.bind(_assertThisInitialized(_this));\n    _this.checkHover = _this.checkHover.bind(_assertThisInitialized(_this));\n    _this.toggleTip = _this.toggleTip.bind(_assertThisInitialized(_this));\n    _this.startHover = _this.startHover.bind(_assertThisInitialized(_this));\n    _this.endHover = _this.endHover.bind(_assertThisInitialized(_this));\n    _this.listenResizeScroll = _this.listenResizeScroll.bind(_assertThisInitialized(_this));\n    _this.handleResizeScroll = _this.handleResizeScroll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // if the isOpen prop is passed on first render we need to immediately trigger a second render,\n      // because the tip ref is needed to calculate the position\n      if (this.props.isOpen) {\n        // eslint-disable-next-line react/no-did-mount-set-state\n        this.setState({\n          isOpen: true\n        });\n      }\n\n      window.addEventListener('resize', this.listenResizeScroll);\n      window.addEventListener('scroll', this.listenResizeScroll);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      // older versions of react won't leverage getDerivedStateFromProps, TODO: remove when < 16.3 support is dropped\n      if (!this.state.hasBeenShown && this.props.isOpen) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          hasBeenShown: true\n        });\n        return setTimeout(this.showTip, 0);\n      } // we need to render once to get refs in place, then we can make the calculations on a followup render\n      // this only has to happen the first time the tip is shown, and allows us to not render every tip on the page with initial render.\n\n\n      if (!prevState.hasBeenShown && this.state.hasBeenShown) {\n        this.showTip();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.listenResizeScroll);\n      window.removeEventListener('scroll', this.listenResizeScroll);\n      clearTimeout(this.debounceTimeout);\n      clearTimeout(this.hoverTimeout);\n    }\n  }, {\n    key: \"listenResizeScroll\",\n    value: function listenResizeScroll() {\n      clearTimeout(this.debounceTimeout);\n      this.debounceTimeout = setTimeout(this.handleResizeScroll, resizeThrottle);\n    }\n  }, {\n    key: \"handleResizeScroll\",\n    value: function handleResizeScroll() {\n      if (this.state.showTip) {\n        // if we're showing the tip and the resize was actually a signifigant change, then setState to re-render and calculate position\n        var clientWidth = Math.round(document.documentElement.clientWidth / resizeThreshold) * resizeThreshold;\n        this.setState({\n          clientWidth: clientWidth\n        });\n      }\n    }\n  }, {\n    key: \"toggleTip\",\n    value: function toggleTip() {\n      this.state.showTip ? this.hideTip() : this.showTip();\n    }\n  }, {\n    key: \"showTip\",\n    value: function showTip() {\n      if (!this.state.hasBeenShown) {\n        // this will render once, then fire componentDidUpdate, which will show the tip\n        return this.setState({\n          hasBeenShown: true\n        });\n      }\n\n      this.setState({\n        showTip: true\n      });\n    }\n  }, {\n    key: \"hideTip\",\n    value: function hideTip() {\n      this.setState({\n        hasHover: false\n      });\n      this.setState({\n        showTip: false\n      });\n    }\n  }, {\n    key: \"startHover\",\n    value: function startHover() {\n      if (!this.state.ignoreShow) {\n        this.setState({\n          hasHover: true\n        });\n        clearTimeout(this.hoverTimeout);\n        this.hoverTimeout = setTimeout(this.checkHover, this.props.hoverDelay);\n      }\n    }\n  }, {\n    key: \"endHover\",\n    value: function endHover() {\n      this.setState({\n        hasHover: false\n      });\n      clearTimeout(this.hoverTimeout);\n      this.hoverTimeout = setTimeout(this.checkHover, this.props.mouseOutDelay || this.props.hoverDelay);\n    }\n  }, {\n    key: \"checkHover\",\n    value: function checkHover() {\n      this.state.hasHover ? this.showTip() : this.hideTip();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          arrow = _this$props.arrow,\n          arrowSize = _this$props.arrowSize,\n          background = _this$props.background,\n          className = _this$props.className,\n          children = _this$props.children,\n          color = _this$props.color,\n          content = _this$props.content,\n          direction = _this$props.direction,\n          distance = _this$props.distance,\n          eventOff = _this$props.eventOff,\n          eventOn = _this$props.eventOn,\n          eventToggle = _this$props.eventToggle,\n          forceDirection = _this$props.forceDirection,\n          isOpen = _this$props.isOpen,\n          mouseOutDelay = _this$props.mouseOutDelay,\n          padding = _this$props.padding,\n          styles = _this$props.styles,\n          TagName = _this$props.tagName,\n          tipContentHover = _this$props.tipContentHover,\n          tipContentClassName = _this$props.tipContentClassName,\n          useDefaultStyles = _this$props.useDefaultStyles,\n          useHover = _this$props.useHover;\n      var isControlledByProps = typeof isOpen !== 'undefined' && isOpen !== null;\n      var showTip = isControlledByProps ? isOpen : this.state.showTip;\n\n      var wrapperStyles = _objectSpread({\n        position: 'relative'\n      }, styles);\n\n      var props = {\n        style: wrapperStyles,\n        ref: function ref(target) {\n          _this2.target = target;\n        },\n        className: className\n      };\n      var portalProps = {\n        // keep clicks on the tip from closing click controlled tips\n        onClick: stopProp\n      }; // event handling\n\n      if (eventOff) {\n        props[eventOff] = this.hideTip;\n      }\n\n      if (eventOn) {\n        props[eventOn] = this.showTip;\n      }\n\n      if (eventToggle) {\n        props[eventToggle] = this.toggleTip; // only use hover if they don't have a toggle event\n      } else if (useHover && !isControlledByProps) {\n        props.onMouseEnter = this.startHover;\n        props.onMouseLeave = tipContentHover || mouseOutDelay ? this.endHover : this.hideTip;\n        props.onTouchStart = this.toggleTip;\n\n        if (tipContentHover) {\n          portalProps.onMouseEnter = this.startHover;\n          portalProps.onMouseLeave = this.endHover;\n          portalProps.onTouchStart = stopProp;\n        }\n      } // conditional rendering of tip\n\n\n      var tipPortal;\n\n      if (this.state.hasBeenShown) {\n        var currentPositions = (0, _position[\"default\"])(direction, forceDirection, this.tip, this.target, _objectSpread({}, this.state, {\n          showTip: showTip\n        }), {\n          background: useDefaultStyles ? defaultBg : background,\n          arrow: arrow,\n          arrowSize: arrowSize,\n          distance: distance\n        });\n\n        var tipStyles = _objectSpread({}, currentPositions.tip, {\n          background: useDefaultStyles ? defaultBg : background,\n          color: useDefaultStyles ? defaultColor : color,\n          padding: padding,\n          boxSizing: 'border-box',\n          zIndex: 1000,\n          position: 'absolute',\n          display: 'inline-block'\n        });\n\n        var arrowStyles = _objectSpread({}, currentPositions.arrow, {\n          position: 'absolute',\n          width: '0px',\n          height: '0px',\n          zIndex: 1001\n        });\n\n        tipPortal = _react[\"default\"].createElement(_Portal[\"default\"], null, _react[\"default\"].createElement(\"div\", _extends({}, portalProps, {\n          className: typeof tipContentClassName !== 'undefined' ? tipContentClassName : className\n        }), _react[\"default\"].createElement(\"span\", {\n          className: \"react-tooltip-lite\",\n          style: tipStyles,\n          ref: function ref(tip) {\n            _this2.tip = tip;\n          }\n        }, content), _react[\"default\"].createElement(\"span\", {\n          className: \"react-tooltip-lite-arrow react-tooltip-lite-\".concat(currentPositions.realDirection, \"-arrow\"),\n          style: arrowStyles\n        })));\n      }\n\n      return _react[\"default\"].createElement(TagName, props, children, tipPortal);\n    }\n  }]);\n\n  return Tooltip;\n}(_react[\"default\"].Component);\n\n_defineProperty(Tooltip, \"propTypes\", {\n  arrow: _propTypes[\"default\"].bool,\n  arrowSize: _propTypes[\"default\"].number,\n  background: _propTypes[\"default\"].string,\n  children: _propTypes[\"default\"].node.isRequired,\n  className: _propTypes[\"default\"].string,\n  color: _propTypes[\"default\"].string,\n  content: _propTypes[\"default\"].node.isRequired,\n  direction: _propTypes[\"default\"].string,\n  distance: _propTypes[\"default\"].number,\n  eventOff: _propTypes[\"default\"].string,\n  eventOn: _propTypes[\"default\"].string,\n  eventToggle: _propTypes[\"default\"].string,\n  forceDirection: _propTypes[\"default\"].bool,\n  hoverDelay: _propTypes[\"default\"].number,\n  isOpen: _propTypes[\"default\"].bool,\n  mouseOutDelay: _propTypes[\"default\"].number,\n  padding: _propTypes[\"default\"].string,\n  styles: _propTypes[\"default\"].object,\n  tagName: _propTypes[\"default\"].string,\n  tipContentHover: _propTypes[\"default\"].bool,\n  tipContentClassName: _propTypes[\"default\"].string,\n  useDefaultStyles: _propTypes[\"default\"].bool,\n  useHover: _propTypes[\"default\"].bool\n});\n\n_defineProperty(Tooltip, \"defaultProps\", {\n  arrow: true,\n  arrowSize: 10,\n  background: '',\n  className: '',\n  color: '',\n  direction: 'up',\n  distance: undefined,\n  eventOff: undefined,\n  eventOn: undefined,\n  eventToggle: undefined,\n  forceDirection: false,\n  hoverDelay: 200,\n  isOpen: undefined,\n  mouseOutDelay: undefined,\n  padding: '10px',\n  styles: {},\n  tagName: 'div',\n  tipContentHover: false,\n  tipContentClassName: undefined,\n  useDefaultStyles: false,\n  useHover: true\n});\n\nvar _default = Tooltip;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}