import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import prefixer from '../__helpers/prefixer';


class Loader extends React.Component {
  calculateRatio(value) {
    if (value < this.props.min) return 0;
    if (value > this.props.max) return 1;
    return (value - this.props.min) / (this.props.max - this.props.min);
  }

  circularStyle() {
    let _stroke;

    if (this.props.mode !== 'indeterminate') {
      _stroke = { strokeDasharray: `${2 * Math.PI * 25 * this.calculateRatio(this.props.value)}, 400` };
    } else if (typeof (window) !== 'undefined') {
      if (window.navigator.userAgent.match(/Trident\/7\./)) {
        // Used for matching IE11. It does not support animation of the stroke-dasharray CSS prop
        _stroke = { strokeDasharray: '100' };
      }
    }
    return _stroke;
  }

  linearStyle() {
    if (this.props.mode !== 'indeterminate') {
      return {
        buffer: prefixer({ transform: `scaleX(${this.calculateRatio(this.props.buffer)})` }),
        value: prefixer({ transform: `scaleX(${this.calculateRatio(this.props.value)})` }),
      };
    }
    return {};
  }

  renderCircular() {
    return (
      <svg className="circle" viewBox="0 0 60 60">
        <circle className="path" style={this.circularStyle()} cx="30" cy="30" r="25" />
      </svg>
    );
  }

  renderLinear() {
    const { buffer, value } = this.linearStyle();
    return (
      <div>
        <span data-ref="buffer" className="buffer" style={buffer} />
        <span data-ref="value" className="value" style={value} />
      </div>
    );
  }


  render() {
    const {
      className, disabled, max, min, mode, show, size, style, type, value,
    } = this.props;
    let { multicolor, color } = this.props;

    if (!show) {
      return null;
    }

    multicolor = (color || type === 'linear') ? false : multicolor;
    color = color ? `${color}-path` : null;

    const _className = classnames('pnnl-loader', type, mode, { multicolor }, color, className);
    const circularStyle = size && type === 'circular' ? { width: `${size}em`, height: `${size}em` } : null;
    const _style = Object.assign({}, circularStyle, style);

    return (
      <div
        disabled={disabled}
        data-react-core="loader"
        aria-valuenow={value}
        aria-valuemin={min}
        aria-valuemax={max}
        className={_className}
        style={_style}
      >
        {type === 'circular' ? this.renderCircular() : this.renderLinear()}
      </div>
    );
  }
}

Loader.propTypes = {
  /**
     * Used to style the buffer element in the linear progress.
     * */
  buffer: PropTypes.number,
  /**
     * Used to add additional CSS classes to the root of the progress bar.
     * */
  className: PropTypes.string,
  /**
     * Used as a style shortcut for the progress bar with branded colors.
     * */
  color: PropTypes.oneOf(['white', 'silver', 'copper', 'bronze', 'gold', 'platinum', 'onyx', 'emerald', 'sapphire', 'ruby', 'mercury', 'topaz', 'amethyst', 'garnet', 'emsl-green']),
  /**
     * If true, component will be disabled but still shown on the screen.
     * @default false
     * */
  disabled: PropTypes.bool,
  /**
     * Maximum value permitted. Useful for setting custom scales that don't align to a 0 to 100 scale.
     * */
  max: PropTypes.number,
  /**
     * Minimum value permitted. Useful for setting custom scales that don't align to a 0 to 100 scale.
     * */
  min: PropTypes.number,
  /**
     * Mode of the progress bar.
     * */
  mode: PropTypes.oneOf(['determinate', 'indeterminate']),
  /**
     * If true, the circular progress bar will be changing its color. If a color value is provided as well, multicolor will be ignored.
     * */
  multicolor: PropTypes.bool,
  /**
     * If false, component will return null and will not present any markup. It is recommended to conditionally require this component
     * in a parent container instead to avoid the unnecessary lifecycle calls of this component.
     * */
  show: PropTypes.bool,
  /**
     * Used to set the relative size of a circular progress bar in `em` sizing. This will allow a circular progress bar to grow to the same size of its
     * neighbor content or be overridden with a custom scaling factor.
     * */
  size: PropTypes.number,
  /**
     * Pass-through style props object.
     * */
  style: PropTypes.object, // eslint-disable-line react/forbid-prop-types
  /**
     * The type of the progress bar.
     * */
  type: PropTypes.oneOf(['linear', 'circular']),
  /**
     * Used to show the current value of the progress bar.
     * */
  value: PropTypes.number,
};

Loader.defaultProps = {
  buffer: 0,
  max: 100,
  min: 0,
  mode: 'indeterminate',
  multicolor: false,
  show: true,
  size: 1,
  type: 'circular',
  value: 0,
  className: null,
  color: null,
  disabled: false,
  style: {},
};

export default Loader;
