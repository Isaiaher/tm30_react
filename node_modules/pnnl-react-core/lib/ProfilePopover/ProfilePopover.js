'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Overlay = require('react-bootstrap/lib/Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

var _Popover = require('react-bootstrap/lib/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _Person = require('../Person');

var _Person2 = _interopRequireDefault(_Person);

var _ProfileCard = require('../ProfileCard');

var _ProfileCard2 = _interopRequireDefault(_ProfileCard);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var ProfilePopover = function (_Component) {
  (0, _inherits3['default'])(ProfilePopover, _Component);

  function ProfilePopover(props) {
    (0, _classCallCheck3['default'])(this, ProfilePopover);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _Component.call(this, props));

    _this.abortController = window && window.AbortController ? new window.AbortController() : undefined;

    _this.updateState = function (data) {
      _this.setState({
        data: (0, _assign2['default'])(data, { mapLink: data.space ? data.space.thumbnailImage : _config2['default'].defaultLocationImage }, { portraitLink: _config2['default'].opwhse.personImage(data.id) })
      });
    };

    _this.state = {
      data: props.person || undefined,
      show: false
    };
    _this.getUserData = _this.getUserData.bind(_this);
    _this.toggle = _this.toggle.bind(_this);
    return _this;
  }

  ProfilePopover.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    if (!this.props.id && !this.props.person.id) {
      throw new Error('A person identifier was not supplied to ProfilePopover. This can be either props.id (Hanford ID) or props.person.id.');
    } else if (this.props.id) {
      this.getUserData(this.props.id).then(function (data) {
        return _this2.updateState(data);
      });
    }
  };

  ProfilePopover.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.abortController) {
      this.abortController.abort();
    }
  };

  ProfilePopover.prototype.getUserData = function getUserData(hid) {
    var _this3 = this;

    return new _promise2['default'](function (resolve, reject) {
      if (_this3.props.id || !_this3.props.person.facility || !_this3.props.person.space) {
        fetch(_config2['default'].opwhse.person(hid), {
          signal: _this3.abortController && _this3.abortController.signal,
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(function (response) {
          if (response.status >= 400) {
            throw new Error(response.statusText);
          } else if (response.ok) {
            return response;
          }
          throw new Error('An error resulted when trying to call the profile form the API. ' + response.error);
        }).then(function (resp) {
          resp.json().then(function (data) {
            resolve(data);
          });
        })['catch'](function (error) {
          if (error.name === 'AbortError') return;
          reject(new Error('An error resulted when trying to call the profile form the API. ' + error));
        });
      }
    });
  };

  ProfilePopover.prototype.toggle = function toggle() {
    this.setState({ show: !this.state.show });
  };

  ProfilePopover.prototype.render = function render() {
    var _this4 = this;

    var defaultPerson = {
      id: '12345',
      firstName: ' ',
      lastName: ' ',
      title: ' '
    };
    var personProps = {
      person: this.state.data || defaultPerson,
      align: this.props.align,
      altName: this.props.altName,
      altTitle: this.props.altTitle,
      onClickCallback: this.toggle,
      isSwapped: this.props.isSwapped,
      isCondensed: this.props.isCondensed,
      size: this.props.size
    };

    if (this.state.data) {
      var overlayProps = {
        show: this.state.show,
        target: this.overlayTarget,
        placement: this.props.placement,
        onHide: function onHide() {
          return _this4.toggle();
        }
      };
      var cardProps = {
        person: this.state.data,
        isCompact: this.props.isCompact,
        isInsidePopover: true,
        onCloseCallback: this.toggle
      };

      return _react2['default'].createElement(
        'div',
        { className: 'PnnlProfileCardContainer' },
        _react2['default'].createElement(_Person2['default'], (0, _extends3['default'])({}, personProps, { ref: function ref(e) {
            _this4.overlayTarget = e;
          } })),
        _react2['default'].createElement(
          _Overlay2['default'],
          (0, _extends3['default'])({}, overlayProps, { rootClose: true }),
          _react2['default'].createElement(
            _Popover2['default'],
            { id: 'PnnlProfilePopover' },
            _react2['default'].createElement(_ProfileCard2['default'], cardProps)
          )
        )
      );
    }

    return this.props.altDefaultTemplate || _react2['default'].createElement(
      'div',
      { className: 'PnnlProfileCardContainer' },
      _react2['default'].createElement(_Person2['default'], personProps)
    );
  };

  return ProfilePopover;
}(_react.Component);

ProfilePopover.propTypes = {
  /**
    * A Hanford ID for the person you want to create the card for.
    *
    * The ID will be ran against: https://api.pnl.gov/operations/v2/people/{hid}?expand=space,facility
    *
    * `Note:` Not required if a person object is provided.
    * @required
    * */
  id: _propTypes2['default'].string,

  /**
    * A Person object for the person you want to create the card for.
    *
    * The object needs to have the same naming convention as: https://api.pnl.gov/operations/v2/people/{hid}/?expand=space,facility,department
    *
    * `Note:` Not required if an id is provided.
    * @required
    * */
  person: _propTypes2['default'].shape({
    id: _propTypes2['default'].string,
    firstName: _propTypes2['default'].string,
    lastName: _propTypes2['default'].string,
    title: _propTypes2['default'].string,
    phoneNumber: _propTypes2['default'].string,
    emailAddress: _propTypes2['default'].string,
    mailstop: _propTypes2['default'].string,
    mapLink: _propTypes2['default'].string,
    portraitLink: _propTypes2['default'].string,
    facility: _propTypes2['default'].shape({
      abbreviation: _propTypes2['default'].string
    }),
    space: _propTypes2['default'].shape({
      locationId: _propTypes2['default'].string,
      name: _propTypes2['default'].string
    }),
    department: _propTypes2['default'].shape({
      id: _propTypes2['default'].string,
      code: _propTypes2['default'].string,
      name: _propTypes2['default'].string
    })
  }),

  /**
   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
   */
  align: _propTypes2['default'].oneOf(['left', 'right', 'center']),

  /**
    * Overrides the `name` on the Person display.
    * */
  altName: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element]),

  /**
    * Overrides the `title` on the Person display.
    * */
  altTitle: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element]),

  /**
     * Overrides the default template when no person is found
     */
  altDefaultTemplate: _propTypes2['default'].element,

  /**
    * Sets the direction the ProfileCard is positioned towards.
    * */
  placement: _propTypes2['default'].oneOf(['left', 'right', 'top', 'bottom']),

  /**
    * Whether or not the contact card is in a compact format.
    * */
  isCompact: _propTypes2['default'].bool,

  /**
    * Swaps the `name` and `title` positions on the Person display.
    *
    * This will not change the styles of those two locations. It will only swap the values of the text pieces.
    * */
  isSwapped: _propTypes2['default'].bool,

  /**
    * Allows a condensed view of the Person display when true. By default, the `name` of the individual will
    * appear below the image of the individual in a smaller font size, without the display of the `title`.
    * If isSwapped is also true, the `title` of the individual will be displayed in place of the `name`.
    *
    * This will add a class, `condensed`, to the Person display.
    * */
  isCondensed: _propTypes2['default'].bool,

  /**
   * The size of the Avatar to be generated.
   */
  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg'])
};

ProfilePopover.defaultProps = {
  id: undefined,
  person: undefined,
  align: 'left',
  altName: undefined,
  altTitle: undefined,
  altDefaultTemplate: undefined,
  placement: 'right',
  isCompact: false,
  isSwapped: false,
  isCondensed: false,
  size: 'md'
};

exports['default'] = ProfilePopover;
module.exports = exports['default'];