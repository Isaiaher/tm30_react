'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Avatar = require('../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var AvatarInfo = function AvatarInfo(props) {
  var align = props.align,
      className = props.className,
      size = props.size,
      title = props.title,
      subTitle = props.subTitle;
  var avatarComponent = props.avatarComponent;


  var classes = (0, _classnames2['default'])('PnnlAvatarInfo', className, {
    'PnnlAvatarInfo-left': align === 'left',
    'PnnlAvatarInfo-right': align === 'right',
    'PnnlAvatarInfo-center': align === 'center'
  });

  if (avatarComponent === null) {
    var avatarText = void 0;
    if (title && typeof title === 'string') {
      var titleWords = title.split(' ');
      avatarText = titleWords[0].slice(0, 1);
      if (titleWords[1]) {
        avatarText = avatarText.concat(titleWords[1].slice(0, 1));
      }
    }
    avatarComponent = _react2['default'].createElement(
      _Avatar2['default'],
      { size: size, key: 1 },
      avatarText
    );
  } else {
    avatarComponent = _react2['default'].cloneElement(avatarComponent, { key: 1 });
  }

  var content = [avatarComponent, _react2['default'].createElement(
    'span',
    { key: 2 },
    _react2['default'].createElement(
      'strong',
      null,
      title
    ),
    subTitle && _react2['default'].createElement(
      'small',
      null,
      subTitle
    )
  )];

  if (align === 'right') {
    content.reverse();
  } else if (align === 'center') {
    content = [subTitle && typeof subTitle === 'string' && _react2['default'].createElement(
      'strong',
      { key: 2 },
      subTitle
    ), avatarComponent, _react2['default'].createElement(
      'small',
      { key: 3 },
      title
    ), subTitle && _react2['default'].isValidElement(subTitle) && subTitle];
  }

  return _react2['default'].createElement(
    'div',
    { className: classes },
    content
  );
};

AvatarInfo.propTypes = {
  /**
   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information
   */
  align: _propTypes2['default'].oneOf(['left', 'right', 'center']),
  /**
   * An Avatar to display instead of the default one created by the component.
   */
  avatarComponent: _propTypes2['default'].node,
  /**
   * The css class name of the root `div` or `img` element. Can be one of our standard color names to set the background color, or "text-*" with a color to specify the icon/text color.
   */
  className: _propTypes2['default'].string,
  /**
   * This is the size of the avatar. Our breakpoints are consistent with Boostrap grid breakpoints. 'md' is the default. These translate into a className, and the actual sizes are defined in pnnl-theme-core.
   */
  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg']),
  /**
   * The main info label to display.  Often the name of the person, space, or building being represented.
   */
  title: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element]),
  /**
   * Secondary info to display.  Often this is the role of the person, room number of the space, or address of the building.
   */
  subTitle: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element])
};

AvatarInfo.defaultProps = {
  align: 'left',
  avatarComponent: null,
  className: null,
  size: 'md',
  subTitle: null,
  title: null
};

exports['default'] = AvatarInfo;
module.exports = exports['default'];