import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import ProgressBar from 'react-bootstrap/lib/ProgressBar';
import classNames from 'classnames';

function filterObject(obj) {
  const ret = {};
  Object.keys(obj)
    .filter(key => obj[key] !== undefined)
    .forEach((key) => { ret[key] = obj[key]; });
  return ret;
}

class Progress extends Component {
  static createClickHandler(onClick, step) {
    return () => onClick(step);
  }

  render() {
    const {
      activeStep,
      invert,
      children,
    } = this.props;

    const numChildren = Children.count(children);
    const steps = [];

    Children.forEach(children, (child, index) => {
      const controlProps = { index };

      if (activeStep === index) {
        controlProps.status = 'active';
      } else if (activeStep > index) {
        controlProps.status = 'complete';
      } else if (activeStep < index) {
        controlProps.status = 'inactive';
      }

      if (index + 1 === numChildren) {
        controlProps.last = true;
      }

      const definedProps = filterObject(child.props);

      steps.push(React.cloneElement(child, Object.assign(controlProps, definedProps)));
    });

    const percentComplete = ((activeStep) / (steps.length - 1)) * 100;

    const progressClasses = classNames('PnnlProgress', { invert });

    return (
      <div className={progressClasses}>
        <div className="PnnlProgressBarContainer">
          <ProgressBar now={percentComplete} />
        </div>
        <div className="PnnlProgressStepsContainer">
          {steps}
        </div>
      </div>
    );
  }
}

Progress.propTypes = {
  /**
   * Set the active step (zero based index). This will adjust the progress bar and try to automatically set the status on any `ProgressStep` children. You can always override this by passing a status prop to a `ProgressStep`.
   */
  activeStep: PropTypes.number,
  /**
   * Whether to adjust the colors because of the background.
   */
  invert: PropTypes.bool,
  /**
   * Should be two or more `ProgressStep` components, or components that resolve down to a `ProgressStep` like an `OverlayTrigger`.
   */
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node,
  ]).isRequired,
};

Progress.defaultProps = {
  activeStep: 0,
  invert: false,
};

export default Progress;
