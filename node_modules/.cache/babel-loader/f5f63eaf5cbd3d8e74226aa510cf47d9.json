{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _Avatar = require('../Avatar');\n\nvar _Avatar2 = _interopRequireDefault(_Avatar);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar AvatarInfo = function AvatarInfo(props) {\n  var align = props.align,\n      className = props.className,\n      size = props.size,\n      title = props.title,\n      subTitle = props.subTitle;\n  var avatarComponent = props.avatarComponent;\n  var classes = (0, _classnames2['default'])('PnnlAvatarInfo', className, {\n    'PnnlAvatarInfo-left': align === 'left',\n    'PnnlAvatarInfo-right': align === 'right',\n    'PnnlAvatarInfo-center': align === 'center'\n  });\n\n  if (avatarComponent === null) {\n    var avatarText = void 0;\n\n    if (title && typeof title === 'string') {\n      var titleWords = title.split(' ');\n      avatarText = titleWords[0].slice(0, 1);\n\n      if (titleWords[1]) {\n        avatarText = avatarText.concat(titleWords[1].slice(0, 1));\n      }\n    }\n\n    avatarComponent = _react2['default'].createElement(_Avatar2['default'], {\n      size: size,\n      key: 1\n    }, avatarText);\n  } else {\n    avatarComponent = _react2['default'].cloneElement(avatarComponent, {\n      key: 1\n    });\n  }\n\n  var content = [avatarComponent, _react2['default'].createElement('span', {\n    key: 2\n  }, _react2['default'].createElement('strong', null, title), subTitle && _react2['default'].createElement('small', null, subTitle))];\n\n  if (align === 'right') {\n    content.reverse();\n  } else if (align === 'center') {\n    content = [subTitle && typeof subTitle === 'string' && _react2['default'].createElement('strong', {\n      key: 2\n    }, subTitle), avatarComponent, _react2['default'].createElement('small', {\n      key: 3\n    }, title), subTitle && _react2['default'].isValidElement(subTitle) && subTitle];\n  }\n\n  return _react2['default'].createElement('div', {\n    className: classes\n  }, content);\n};\n\nAvatarInfo.propTypes = {\n  /**\r\n   * Which side should the Avatar be aligned on? Choosing 'center' will stack the information\r\n   */\n  align: _propTypes2['default'].oneOf(['left', 'right', 'center']),\n\n  /**\r\n   * An Avatar to display instead of the default one created by the component.\r\n   */\n  avatarComponent: _propTypes2['default'].node,\n\n  /**\r\n   * The css class name of the root `div` or `img` element. Can be one of our standard color names to set the background color, or \"text-*\" with a color to specify the icon/text color.\r\n   */\n  className: _propTypes2['default'].string,\n\n  /**\r\n   * This is the size of the avatar. Our breakpoints are consistent with Boostrap grid breakpoints. 'md' is the default. These translate into a className, and the actual sizes are defined in pnnl-theme-core.\r\n   */\n  size: _propTypes2['default'].oneOf(['xs', 'sm', 'md', 'lg']),\n\n  /**\r\n   * The main info label to display.  Often the name of the person, space, or building being represented.\r\n   */\n  title: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element]),\n\n  /**\r\n   * Secondary info to display.  Often this is the role of the person, room number of the space, or address of the building.\r\n   */\n  subTitle: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].element])\n};\nAvatarInfo.defaultProps = {\n  align: 'left',\n  avatarComponent: null,\n  className: null,\n  size: 'md',\n  subTitle: null,\n  title: null\n};\nexports['default'] = AvatarInfo;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}