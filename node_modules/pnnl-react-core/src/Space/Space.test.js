import React from 'react';
import { shallow } from 'enzyme';

import Space from './Space';


describe('<Space />', () => {
  const defaultProps = {
    space: {
      $type: 'Pnnl.Api.Operations.Space, Pnnl.Api.Operations',
      id: '335011C25',
      concurrencyToken: '1507385339852292096',
      version: '25',
      isActive: true,
      name: '1C25',
      description: '1C25',
      type: 'Single office Unfronted',
      floor: '1',
      fireZone: '01',
      statusCode: 'UC',
      typeCode: '112',
      category: 'OFF',
      squareFeet: 59.0,
      defaultImage: 'https://cdn.pnl.gov/images/locations/5423.png',
      thumbnailImage: 'https://cdn.pnl.gov/images/locations/5423-thumb.png',
      facilityId: '3350',
      locationId: '5423',
      facility: {
        $type: 'Pnnl.Api.Operations.Facility, Pnnl.Api.Operations',
        id: '3350',
        concurrencyToken: '1517454153993289728',
        version: '378',
        isActive: true,
        isConsolidatedLab: true,
        name: 'Laboratory Support Building',
        abbreviation: 'LSB',
        acquiredOn: '2004-01-01T08:00:00Z',
        beneficialOn: '1996-01-01T00:00:00Z',
        constructionCompletedOn: '1996-01-01T08:00:00Z',
        area: 'RCHN',
        buildingCode: 'C',
        categoryCode: '1',
        departmentOfEnergyCode: '3350GWW',
        status: 'ACTIVE',
        address: {
          $type: 'Pnnl.Api.Operations.Address, Pnnl.Api.Operations',
          city: 'Richland',
          county: 'BENTON',
          line1: '3350 GEORGE WASHINGTON WAY',
          stateOrProvince: 'WA',
          postalCode: '99354',
          countryId: 'USA',
        },
        defaultImage: 'https://cdn.pnl.gov/images/locations/1130.png',
        outlineImage: 'https://cdn.pnl.gov/images/locations/1130-outline.png',
        thumbnailImage: 'https://cdn.pnl.gov/images/locations/1130-thumb.png',
        managerId: '0326640',
        locationId: '1130',
      },
    },
  };

  describe('checking for component import errors', () => {
    it('should be in the component index file', () => {
      const loadedIndexFile = require('..');
      expect(loadedIndexFile).toBeTruthy();
      expect(loadedIndexFile.Space).toBeTruthy();
    });

    it('should be in the components directory', () => {
      expect(Space).toBeTruthy();
    });
  });

  describe('prop type validation', () => {
    // swallow prop type console errors
    console.error = jest.fn();

    it('should log 1 error when missing required props.', () => {
      expect(() => shallow(<Space space={null} />)).toThrowErrorMatchingSnapshot();
    });

    it('should render as NULL when required prop type is UNDEFINED', () => {
      expect(() => shallow(<Space space={undefined} />)).toThrowErrorMatchingSnapshot();
    });

    it('should render without an error when supplied default space prop type', () => {
      // shallow render should not raise an error if valid
      const wrapper = shallow(<Space {...defaultProps} />);
      expect(wrapper).toMatchSnapshot();
    });

    it('should set onClick prop type when supplied', () => {
      const myCallback = jest.fn();

      const wrapper = shallow(<Space {...defaultProps} onClickCallback={myCallback} />);

      // expect(wrapper.instance().props.onClickCallback).toEqual(myCallback);
      expect(wrapper).toMatchSnapshot();
    });

    console.error.mockClear();
  });

  describe('rendering output', () => {
    it('should render the default output when supplied default space prop type', () => {
      const wrapper = shallow(<Space {...defaultProps} />);
      expect(wrapper).toMatchSnapshot();
    });
  });
});
